<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Advanced-Binary-Analysis on Pwn the world.</title>
    <link>https://blog.hexterisk.com/categories/advanced-binary-analysis/</link>
    <description>Recent content in Advanced-Binary-Analysis on Pwn the world.</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>hexterisk@gmail.com (Bhanupratap Singh)</managingEditor>
    <webMaster>hexterisk@gmail.com (Bhanupratap Singh)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 17 Jul 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.hexterisk.com/categories/advanced-binary-analysis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Taint Analysis</title>
      <link>https://blog.hexterisk.com/posts/2020/07/17/taint-analysis/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate><author>hexterisk@gmail.com (Bhanupratap Singh)</author>
      <guid>https://blog.hexterisk.com/posts/2020/07/17/taint-analysis/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Taint Analysis&lt;/strong&gt; is a program analysis technique that allows you to determine the influence that a selected program state has on other parts of the program state. Taint any data that a program receives from the network, track that data, and raise an alert if it affects the program counter. If an operation uses the value of some tainted object, say &lt;em&gt;X&lt;/em&gt;, to derive a value for another, say &lt;em&gt;Y&lt;/em&gt;, then object &lt;em&gt;Y&lt;/em&gt; becomes tainted. Object &lt;em&gt;X&lt;/em&gt; tainted the object &lt;em&gt;Y&lt;/em&gt;. Taint Analysis can be classified into two types.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Binary Obfuscation</title>
      <link>https://blog.hexterisk.com/posts/2020/07/08/binary-obfuscation/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate><author>hexterisk@gmail.com (Bhanupratap Singh)</author>
      <guid>https://blog.hexterisk.com/posts/2020/07/08/binary-obfuscation/</guid>
      <description>&lt;p&gt;The main aim of &lt;strong&gt;Binary Obfuscation&lt;/strong&gt; is to hinder the process of static analysis of a binary. &lt;/p&gt;&#xA;&lt;p&gt;Renaming the &lt;strong&gt;symbols&lt;/strong&gt;(variables and functions) of a binary implies that the clues as to what data a variable holds or what task a function performs that could be obtained from their names, are lost. This makes it a little harder for the analysts to keep a track of all the symbols without documenting them. &lt;/p&gt;</description>
    </item>
    <item>
      <title>Binary Instrumentation</title>
      <link>https://blog.hexterisk.com/posts/2020/06/27/binary-instrumentation/</link>
      <pubDate>Sat, 27 Jun 2020 00:00:00 +0000</pubDate><author>hexterisk@gmail.com (Bhanupratap Singh)</author>
      <guid>https://blog.hexterisk.com/posts/2020/06/27/binary-instrumentation/</guid>
      <description>&lt;p&gt;Inserting new code at any point in an existing binary to observe or modify the binary’s behavior in some way is called &lt;strong&gt;instrumenting&lt;/strong&gt; the binary. The point where you add new code is called the &lt;strong&gt;instrumentation point&lt;/strong&gt;, and the added code is called &lt;strong&gt;instrumentation code&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../Binary_Instrumentation/3_image.png&#34;&gt;&#xA;&lt;em&gt;Tradeoffs of Dynamic and Static Binary Instrumentation.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;static-binary-instrumentation&#34;&gt;Static Binary Instrumentation&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Static Binary Instrumentation&lt;/strong&gt; works by disassembling a binary and then adding instrumentation code where needed and storing the updated binary permanently on disk.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Principles of Symbolic Execution</title>
      <link>https://blog.hexterisk.com/posts/2020/06/11/principles-of-symbolic-execution/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate><author>hexterisk@gmail.com (Bhanupratap Singh)</author>
      <guid>https://blog.hexterisk.com/posts/2020/06/11/principles-of-symbolic-execution/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Symbolic Execution&lt;/strong&gt;, or &lt;strong&gt;symbex&lt;/strong&gt;, is a software analysis technique that expresses program state in terms of logical formulas that you can automatically reason about to answer complex questions about a program’s behavior. Can automatically increase the code coverage of dynamic analyses by generating new inputs that lead to unexplored program paths. Apply it sparingly and carefully because of scalability issues.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Symbex executes (or emulates) an application with &lt;strong&gt;symbolic values.&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Symbolic values&lt;/strong&gt; represent a domain covering possible concrete values, represented by symbols like &lt;em&gt;φ&lt;/em&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Symbolic variables&lt;/strong&gt; are just memory addresses that will hold symbolic values.&lt;/li&gt;&#xA;&lt;li&gt;Symbolic execution computes logical formulas over these symbols. These formulas represent the operations performed on the symbols during execution and describe limits for the range of values the symbols can represent.&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Many symbex engines maintain the symbols and formulas as metadata in addition to concrete values rather than replacing the concrete values.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;The collection of symbolic values and formulas that a symbex engine maintains is called the &lt;strong&gt;Symbolic State&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Symbex engine computes two different kinds of formulas over these symbolic values: a set of &lt;strong&gt;symbolic expressions&lt;/strong&gt; and a &lt;strong&gt;path constraint.&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt; &lt;/p&gt;</description>
    </item>
  </channel>
</rss>
