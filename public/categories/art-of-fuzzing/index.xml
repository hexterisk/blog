<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Art-of-Fuzzing on Pwn the world.</title>
    <link>http://localhost:1313/categories/art-of-fuzzing/</link>
    <description>Recent content in Art-of-Fuzzing on Pwn the world.</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>hexterisk@gmail.com (Bhanupratap Singh)</managingEditor>
    <webMaster>hexterisk@gmail.com (Bhanupratap Singh)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 15 Mar 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/art-of-fuzzing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DART &amp; SAGE</title>
      <link>http://localhost:1313/posts/2021/03/15/dart-sage/</link>
      <pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate><author>hexterisk@gmail.com (Bhanupratap Singh)</author>
      <guid>http://localhost:1313/posts/2021/03/15/dart-sage/</guid>
      <description>&lt;h2 id=&#34;dart&#34;&gt;DART&lt;/h2&gt;&#xA;&lt;p&gt;Back in 2005, researchers at Microsoft came up with a concolic testing tool called &lt;strong&gt;DART&lt;/strong&gt;(&lt;strong&gt;Directed Automated Random Testing&lt;/strong&gt;). The tool can be used in the unit testing phase, as well as can be applied to large programs.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;We present a new tool, named DART, for automatically testing software that combines three main techniques: (1) automated extraction of the interface of a program with its external environment using static source-code parsing; (2) automatic generation of a test driver for this interface that performs random testing to simulate the most general environment the program can operate in; and (3) dynamic analysis of how the program behaves under random testing and automatic generation of new test inputs to direct systematically the execution along alternative program paths.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sanitation</title>
      <link>http://localhost:1313/posts/2021/02/12/sanitation/</link>
      <pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate><author>hexterisk@gmail.com (Bhanupratap Singh)</author>
      <guid>http://localhost:1313/posts/2021/02/12/sanitation/</guid>
      <description>&lt;p&gt;Sanitation tools, or &lt;a href=&#34;https://github.com/google/sanitizers&#34;&gt;sanitizers&lt;/a&gt;, are a set of libraries that can directly observe and flag an incorrect behavior for a certain class of violation at runtime.&lt;/p&gt;&#xA;&lt;p&gt;Sanitizers are employed by instrumenting the source code. The compiled binary, therefore, essentially has certain tripwires that catch any invalid or incorrect behavior and reports it. The fact that it only brings about minimal performance overhead allows it to be coupled with fuzzing techniques, a powerful combination.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Architecture</title>
      <link>http://localhost:1313/posts/2021/01/20/architecture/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate><author>hexterisk@gmail.com (Bhanupratap Singh)</author>
      <guid>http://localhost:1313/posts/2021/01/20/architecture/</guid>
      <description>&lt;p&gt;A robust pipeline needs to be established to ensure that a fuzzer is effective and efficient. The pipeline is required to perform the following tasks:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Generate new test cases.&lt;/li&gt;&#xA;&lt;li&gt;Ensure delivery of the test cases to, and safe execution, of the target.&lt;/li&gt;&#xA;&lt;li&gt;Record the statistics from the execution of the test cases.&lt;/li&gt;&#xA;&lt;li&gt;Reproduce the crashes.&lt;/li&gt;&#xA;&lt;li&gt;Triage the crashes.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../Fuzzing_Architecture/chart.jpg&#34;&gt;&#xA;&lt;em&gt;Generic fuzzing pipeline.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Separate modules perform different set of the aforementioned tasks. The underlying code in these modules is aligned with the principles of code resusability and modularity. This way, different modules can be swapped as per requirement of the program being fuzzed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Approaches</title>
      <link>http://localhost:1313/posts/2021/01/01/approaches/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate><author>hexterisk@gmail.com (Bhanupratap Singh)</author>
      <guid>http://localhost:1313/posts/2021/01/01/approaches/</guid>
      <description>&lt;p&gt;Fuzzing can be segregated into different types based on the facet of the process we look at.&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;program-structure&#34;&gt;Program Structure&lt;/h2&gt;&#xA;&lt;p&gt;Knowledge of the internals of the target application directly results into maintaining a certain structure to the fuzzing process, which can result into achieving a higher code coverage in a shorter span of time. This results in a much more effective fuzzing exercise.&lt;/p&gt;&#xA;&lt;h3 id=&#34;blackbox-fuzzing&#34;&gt;Blackbox Fuzzing&lt;/h3&gt;&#xA;&lt;p&gt;This approach involves the assumption that the target is a black box since we don&amp;rsquo;t have any knowledge of the internal behavior, source code or the implementation of the target application, hence the name.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction</title>
      <link>http://localhost:1313/posts/2020/12/14/introduction/</link>
      <pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate><author>hexterisk@gmail.com (Bhanupratap Singh)</author>
      <guid>http://localhost:1313/posts/2020/12/14/introduction/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Fuzzing&lt;/strong&gt;, or &lt;strong&gt;Fuzz Testing&lt;/strong&gt;, is an automated software testing technique where a target application is placed in an execution environment. An input generation technique is employed to create unique and varying inputs(test cases) for the target. These new inputs are continuously sent to the target and the resultant behavior is observed.&lt;/p&gt;&#xA;&lt;p&gt;NOTE: the phrases “test cases” and “inputs” can be used interchangeably.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../Fuzzing_Introduction/a.png&#34;&gt;&#xA;&lt;em&gt;Fuzzing cycle.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Either the program will be able to handle the provided input just fine, or it will enter an invalid state of execution(mostly a crash) and you&amp;rsquo;ll have a bug report on your hand. It&amp;rsquo;s a continuous, cyclic process.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
