<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Practical-Binary-Analysis on Pwn the world.</title>
    <link>http://localhost:1313/categories/practical-binary-analysis/</link>
    <description>Recent content in Practical-Binary-Analysis on Pwn the world.</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>hexterisk@gmail.com (Bhanupratap Singh)</managingEditor>
    <webMaster>hexterisk@gmail.com (Bhanupratap Singh)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 08 Nov 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/practical-binary-analysis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dynamic Taint Analysis and Pin</title>
      <link>http://localhost:1313/posts/2020/11/08/dynamic-taint-analysis-and-pin/</link>
      <pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate><author>hexterisk@gmail.com (Bhanupratap Singh)</author>
      <guid>http://localhost:1313/posts/2020/11/08/dynamic-taint-analysis-and-pin/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Dynamic Taint Analysis&lt;/strong&gt; is a technique used to discover what part of memory or register are controllable by the some data we are interested, such as the user input, at a given program state. This is done by marking the interested data. There on after, any piece of data that comes in contact with the tainted data by any means, like getting computed from the tainted data, is tainted too, thus spreading the taint throughout the execution.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dynamic Binary Instrumentation and Pin</title>
      <link>http://localhost:1313/posts/2020/10/21/dynamic-binary-instrumentation-and-pin/</link>
      <pubDate>Wed, 21 Oct 2020 00:00:00 +0000</pubDate><author>hexterisk@gmail.com (Bhanupratap Singh)</author>
      <guid>http://localhost:1313/posts/2020/10/21/dynamic-binary-instrumentation-and-pin/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Dynamic Binary Instrumentation&lt;/strong&gt; is the process of monitoring or measuring a binary&amp;rsquo;s execution and its behavior, such as resource usage, during runtime. It allows us to focus on specific parts of a binary for various purposes such as vulnerability analysis, dynamic tainting and state analysis.&lt;/p&gt;&#xA;&lt;p&gt;We will skip over Source Instrumentation since it requires source code of the application, which is pretty rare in real world scenarios.&lt;/p&gt;&#xA;&lt;p&gt;¬†&lt;/p&gt;</description>
    </item>
    <item>
      <title>Source Code Instrumentation and LLVM</title>
      <link>http://localhost:1313/posts/2020/09/28/source-code-instrumentation-and-llvm/</link>
      <pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate><author>hexterisk@gmail.com (Bhanupratap Singh)</author>
      <guid>http://localhost:1313/posts/2020/09/28/source-code-instrumentation-and-llvm/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Source Code Instrumentation&lt;/strong&gt; adds specific code meant for instrumentation/analysis, called &lt;strong&gt;Instrumentation Code&lt;/strong&gt;, to the source files of the program under consideration. The source files are then compiled and executed. Since the instrumentation code is integrated into the binary itself, the output from the execution includes the dump of the instrumentation code which can then be used for further analysis and component testing.&lt;/p&gt;&#xA;&lt;p&gt;¬†&lt;/p&gt;&#xA;&lt;h2 id=&#34;intermediate-representations&#34;&gt;Intermediate Representations&lt;/h2&gt;&#xA;&lt;p&gt;Representation of a program in a state that lies between the source code and the compiled binary(specifically, the assembly code). Compilers have a stage of intermediate code generation, where they natively generate IR of the source code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Symbolic Execution and Angr</title>
      <link>http://localhost:1313/posts/2020/09/04/symbolic-execution-and-angr/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate><author>hexterisk@gmail.com (Bhanupratap Singh)</author>
      <guid>http://localhost:1313/posts/2020/09/04/symbolic-execution-and-angr/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Symbolic Execution&lt;/strong&gt; is mainly focused on converting a program made up of a concrete set of instructions into an equation-like format. This is achieved with two core components:&lt;/p&gt;&#xA;&lt;p&gt;¬†&lt;/p&gt;&#xA;&lt;h2 id=&#34;symbols&#34;&gt;Symbols&lt;/h2&gt;&#xA;&lt;p&gt;Different values in a program(such as the user input) are substituted with &lt;strong&gt;Symbols&lt;/strong&gt;(variables or placeholders). These symbols pertain to a domain full of values, allowing us to explore the program in a much more open form, basically ‚Äúwalking through the program‚Äù with a domain full of values(handled by any one of the constraint solving backends like Z3) instead of walking a fixed path due to a fixed hard-coded value/input.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Constraint Solvers and Z3</title>
      <link>http://localhost:1313/posts/2020/08/18/constraint-solvers-and-z3/</link>
      <pubDate>Tue, 18 Aug 2020 00:00:00 +0000</pubDate><author>hexterisk@gmail.com (Bhanupratap Singh)</author>
      <guid>http://localhost:1313/posts/2020/08/18/constraint-solvers-and-z3/</guid>
      <description>&lt;p&gt;A constraint solver must be versatile, that is, it should be able to act as an:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Interpreter&lt;/strong&gt;: Given the input, solve for the output of the equation.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Inverter&lt;/strong&gt;: Given the output, solve for the input of the equation.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Synthesizer&lt;/strong&gt;: Act as both Interpreter and Inverter.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;¬†&lt;/p&gt;&#xA;&lt;h2 id=&#34;formulating-programs&#34;&gt;Formulating Programs&lt;/h2&gt;&#xA;&lt;p&gt;Assume a formula &lt;em&gt;ùëÜ‚Çö(ùë•, ùë¶)&lt;/em&gt; which holds if and only if program &lt;em&gt;P(x)&lt;/em&gt; outputs value &lt;em&gt;y&lt;/em&gt; such that:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
