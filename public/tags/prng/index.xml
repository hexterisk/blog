<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PRNG on Pwn the world.</title>
    <link>http://localhost:1313/tags/prng/</link>
    <description>Recent content in PRNG on Pwn the world.</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>hexterisk@gmail.com (Bhanupratap Singh)</managingEditor>
    <webMaster>hexterisk@gmail.com (Bhanupratap Singh)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 29 Apr 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/prng/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Set 3</title>
      <link>http://localhost:1313/posts/2020/04/29/set-3/</link>
      <pubDate>Wed, 29 Apr 2020 00:00:00 +0000</pubDate><author>hexterisk@gmail.com (Bhanupratap Singh)</author>
      <guid>http://localhost:1313/posts/2020/04/29/set-3/</guid>
      <description>&lt;p&gt;Refer to this &lt;a href=&#34;https://github.com/hexterisk/cryptopals-solutions&#34;&gt;repository&lt;/a&gt; for solution scripts and the IPython Notebook pertaining to the explanations here.&lt;/p&gt;&#xA;&lt;p&gt;Â &lt;/p&gt;&#xA;&lt;h3 id=&#34;challenge-17-the-cbc-padding-oracle&#34;&gt;Challenge 17: The CBC padding oracle&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://cryptopals.com/sets/3/challenges/17&#34;&gt;Link&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;This is the best-known attack on modern block-cipher cryptography.&lt;br&gt;&#xA;Combine your padding code and your CBC code to write two functions.&lt;br&gt;&#xA;The first function should select at random one of the following 10 strings:&lt;br&gt;&#xA;&lt;strong&gt;MDAwMDAwTm93IHRoYXQgdGhlIHBhcnR5IGlzIGp1bXBpbmc=&lt;/strong&gt;&lt;br&gt;&#xA;&lt;strong&gt;MDAwMDAxV2l0aCB0aGUgYmFzcyBraWNrZWQgaW4gYW5kIHRoZSBWZWdhJ3MgYXJlIHB1bXBpbic=&lt;/strong&gt;&lt;br&gt;&#xA;&lt;strong&gt;MDAwMDAyUXVpY2sgdG8gdGhlIHBvaW50LCB0byB0aGUgcG9pbnQsIG5vIGZha2luZw==&lt;/strong&gt;&lt;br&gt;&#xA;&lt;strong&gt;MDAwMDAzQ29va2luZyBNQydzIGxpa2UgYSBwb3VuZCBvZiBiYWNvbg==&lt;/strong&gt;&lt;br&gt;&#xA;&lt;strong&gt;MDAwMDA0QnVybmluZyAnZW0sIGlmIHlvdSBhaW4ndCBxdWljayBhbmQgbmltYmxl&lt;/strong&gt;&lt;br&gt;&#xA;&lt;strong&gt;MDAwMDA1SSBnbyBjcmF6eSB3aGVuIEkgaGVhciBhIGN5bWJhbA==&lt;/strong&gt;&lt;br&gt;&#xA;&lt;strong&gt;MDAwMDA2QW5kIGEgaGlnaCBoYXQgd2l0aCBhIHNvdXBlZCB1cCB0ZW1wbw==&lt;/strong&gt;&lt;br&gt;&#xA;&lt;strong&gt;MDAwMDA3SSdtIG9uIGEgcm9sbCwgaXQncyB0aW1lIHRvIGdvIHNvbG8=&lt;/strong&gt;&lt;br&gt;&#xA;&lt;strong&gt;MDAwMDA4b2xsaW4nIGluIG15IGZpdmUgcG9pbnQgb2g=&lt;/strong&gt;&lt;br&gt;&#xA;&lt;strong&gt;MDAwMDA5aXRoIG15IHJhZy10b3AgZG93biBzbyBteSBoYWlyIGNhbiBibG93&lt;/strong&gt;&lt;br&gt;&#xA;&amp;hellip; generate a random AES key (which it should save for all future encryptions), pad the string out to the 16-byte AES block size and CBC-encrypt it under that key, providing the caller the ciphertext and IV.&lt;br&gt;&#xA;The second function should consume the ciphertext produced by the first function, decrypt it, check its padding, and return true or false depending on whether the padding is valid.&lt;br&gt;&#xA;It turns out that it&amp;rsquo;s possible to decrypt the ciphertexts provided by the first function.&lt;br&gt;&#xA;The decryption here depends on a side-channel leak by the decryption function. The leak is the error message that the padding is valid or not.&lt;br&gt;&#xA;You can find 100 web pages on how this attack works, so I won&amp;rsquo;t re-explain it. What I&amp;rsquo;ll say is this:&lt;br&gt;&#xA;The fundamental insight behind this attack is that the byte 01h is valid padding, and occur in 1/256 trials of &amp;ldquo;randomized&amp;rdquo; plaintexts produced by decrypting a tampered ciphertext.&lt;br&gt;&#xA;02h in isolation is not valid padding.&lt;br&gt;&#xA;02h 02h is valid padding, but is much less likely to occur randomly than 01h.&lt;br&gt;&#xA;03h 03h 03h is even less likely.&lt;br&gt;&#xA;So you can assume that if you corrupt a decryption AND it had valid padding, you know what that padding byte is.&lt;br&gt;&#xA;It is easy to get tripped up on the fact that CBC plaintexts are &amp;ldquo;padded&amp;rdquo;. Padding oracles have nothing to do with the actual padding on a CBC plaintext. It&amp;rsquo;s an attack that targets a specific bit of code that handles decryption. You can mount a padding oracle on any CBC block, whether it&amp;rsquo;s padded or not.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
