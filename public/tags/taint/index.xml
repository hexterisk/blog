<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Taint on Pwn the world.</title>
    <link>https://hexterisk.com/blog/tags/taint/</link>
    <description>Recent content in Taint on Pwn the world.</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>hexterisk@gmail.com (Bhanupratap Singh)</managingEditor>
    <webMaster>hexterisk@gmail.com (Bhanupratap Singh)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 08 Nov 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://hexterisk.com/blog/tags/taint/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dynamic Taint Analysis and Pin</title>
      <link>https://hexterisk.com/blog/posts/2020/11/08/dynamic-taint-analysis-and-pin/</link>
      <pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate><author>hexterisk@gmail.com (Bhanupratap Singh)</author>
      <guid>https://hexterisk.com/blog/posts/2020/11/08/dynamic-taint-analysis-and-pin/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Dynamic Taint Analysis&lt;/strong&gt; is a technique used to discover what part of memory or register are controllable by the some data we are interested, such as the user input, at a given program state. This is done by marking the interested data. There on after, any piece of data that comes in contact with the tainted data by any means, like getting computed from the tainted data, is tainted too, thus spreading the taint throughout the execution.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Taint Analysis</title>
      <link>https://hexterisk.com/blog/posts/2020/07/17/taint-analysis/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate><author>hexterisk@gmail.com (Bhanupratap Singh)</author>
      <guid>https://hexterisk.com/blog/posts/2020/07/17/taint-analysis/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Taint Analysis&lt;/strong&gt; is a program analysis technique that allows you to determine the influence that a selected program state has on other parts of the program state. Taint any data that a program receives from the network, track that data, and raise an alert if it affects the program counter. If an operation uses the value of some tainted object, say &lt;em&gt;X&lt;/em&gt;, to derive a value for another, say &lt;em&gt;Y&lt;/em&gt;, then object &lt;em&gt;Y&lt;/em&gt; becomes tainted. Object &lt;em&gt;X&lt;/em&gt; tainted the object &lt;em&gt;Y&lt;/em&gt;. Taint Analysis can be classified into two types.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
