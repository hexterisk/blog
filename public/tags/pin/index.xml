<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pin on Pwn the world.</title>
    <link>http://localhost:1313/tags/pin/</link>
    <description>Recent content in Pin on Pwn the world.</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>hexterisk@gmail.com (Bhanupratap Singh)</managingEditor>
    <webMaster>hexterisk@gmail.com (Bhanupratap Singh)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 08 Nov 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/pin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dynamic Taint Analysis and Pin</title>
      <link>http://localhost:1313/posts/2020/11/08/dynamic-taint-analysis-and-pin/</link>
      <pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate><author>hexterisk@gmail.com (Bhanupratap Singh)</author>
      <guid>http://localhost:1313/posts/2020/11/08/dynamic-taint-analysis-and-pin/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Dynamic Taint Analysis&lt;/strong&gt; is a technique used to discover what part of memory or register are controllable by the some data we are interested, such as the user input, at a given program state. This is done by marking the interested data. There on after, any piece of data that comes in contact with the tainted data by any means, like getting computed from the tainted data, is tainted too, thus spreading the taint throughout the execution.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
