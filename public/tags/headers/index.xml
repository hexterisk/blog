<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Headers on Pwn the world.</title>
    <link>https://blog.hexterisk.com/tags/headers/</link>
    <description>Recent content in Headers on Pwn the world.</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>hexterisk@gmail.com (Bhanupratap Singh)</managingEditor>
    <webMaster>hexterisk@gmail.com (Bhanupratap Singh)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 05 Aug 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.hexterisk.com/tags/headers/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Classification of Malwares through Static Analysis</title>
      <link>https://blog.hexterisk.com/posts/2020/08/05/classification-of-malwares-through-static-analysis/</link>
      <pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><author>hexterisk@gmail.com (Bhanupratap Singh)</author>
      <guid>https://blog.hexterisk.com/posts/2020/08/05/classification-of-malwares-through-static-analysis/</guid>
      <description>&lt;p&gt;Static analysis is the analysis of an executable file on a structural bases without executing it in controlled environment. It is the analysis of the executable&amp;rsquo;s static attributes such as different sections and memory characteristics.&lt;/p&gt;&#xA;&lt;p&gt;Therefore, static analysis of a PE allows extraction of a lot of metadata that can be useful in further analysis such as names of sections, imported DLLs and strings present which gives an early idea of the functions performed by the binary in question. Malicious binaries with unstructured and improperly formatted metadata (done to achieve sophisticated levels of obfuscation and anti-debugging/anti-reversing defenses) can raise suspicions since a benign PE generally has a well-formed and valid metadata. Therefore, static analysis has been a popular approach towards malware detection in PEs. Since execution of the binary is not required, this approach is much more lightweight and resource-conserving. This allows security teams and researchers quickly perform a preliminary analysis.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The ELF Format</title>
      <link>https://blog.hexterisk.com/posts/2020/03/07/the-elf-format/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0000</pubDate><author>hexterisk@gmail.com (Bhanupratap Singh)</author>
      <guid>https://blog.hexterisk.com/posts/2020/03/07/the-elf-format/</guid>
      <description>&lt;p&gt;ELF binaries really consist of only four types of components: &lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Executable Header&lt;/li&gt;&#xA;&lt;li&gt;Program Headers (optional)&lt;/li&gt;&#xA;&lt;li&gt;Sections&lt;/li&gt;&#xA;&lt;li&gt;Section Headers, one per section (optional)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../The_ELF_Format/1_image.png&#34;&gt;&#xA;&lt;em&gt;64-bit ELF binary structure.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h2 id=&#34;executable-header&#34;&gt;Executable Header&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Every ELF file starts with an executable header, which is just a structured series of bytes telling you that it’s an ELF file and other metadata.&lt;/li&gt;&#xA;&lt;li&gt;Format of executable header: /usr/include/elf.h&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; e_ident[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;/* Magic number and other info */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; e_type; &lt;span style=&#34;color:#75715e&#34;&gt;/* Object file type */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; e_machine; &lt;span style=&#34;color:#75715e&#34;&gt;/* Architecture */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; e_version; &lt;span style=&#34;color:#75715e&#34;&gt;/* Object file version */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint64_t&lt;/span&gt; e_entry; &lt;span style=&#34;color:#75715e&#34;&gt;/* Entry point virtual address */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint64_t&lt;/span&gt; e_phoff; &lt;span style=&#34;color:#75715e&#34;&gt;/* Program header table file offset */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint64_t&lt;/span&gt; e_shoff; &lt;span style=&#34;color:#75715e&#34;&gt;/* Section header table file offset */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; e_flags; &lt;span style=&#34;color:#75715e&#34;&gt;/* Processor-specific flags */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; e_ehsize; &lt;span style=&#34;color:#75715e&#34;&gt;/* ELF header size in bytes */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; e_phentsize; &lt;span style=&#34;color:#75715e&#34;&gt;/* Program header table entry size */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; e_phnum; &lt;span style=&#34;color:#75715e&#34;&gt;/* Program header table entry count */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; e_shentsize; &lt;span style=&#34;color:#75715e&#34;&gt;/* Section header table entry size */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; e_shnum; &lt;span style=&#34;color:#75715e&#34;&gt;/* Section header table entry count */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; e_shstrndx; &lt;span style=&#34;color:#75715e&#34;&gt;/* Section header string table index */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} Elf64_Ehdr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt; &lt;/p&gt;</description>
    </item>
  </channel>
</rss>
