<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design-Patterns on Pwn the world.</title>
    <link>https://blogs.hexterisk.com/tags/design-patterns/</link>
    <description>Recent content in Design-Patterns on Pwn the world.</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>hexterisk@gmail.com (Bhanupratap Singh)</managingEditor>
    <webMaster>hexterisk@gmail.com (Bhanupratap Singh)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 01 Oct 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blogs.hexterisk.com/tags/design-patterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Concurrency Patterns</title>
      <link>https://blogs.hexterisk.com/posts/2021/10/01/concurrency-patterns/</link>
      <pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><author>hexterisk@gmail.com (Bhanupratap Singh)</author>
      <guid>https://blogs.hexterisk.com/posts/2021/10/01/concurrency-patterns/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Concurrency Design Patterns&lt;/strong&gt; describe ways of dealing with concurrent executing code, be it multi-threaded or multi-processed.&lt;/p&gt;&#xA;&lt;h2 id=&#34;active-object&#34;&gt;Active Object&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Decouple method execution from method invocation for objects that each live in their own thread of control. The goal is to introduce concurrency, by using asynchronous method invocation and a scheduler for handling requests.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;The &lt;strong&gt;Active Object&lt;/strong&gt; pattern introduces the following components:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Proxy&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The interface of the object to which a client connects to.&lt;/li&gt;&#xA;&lt;li&gt;Resides in the client thread.&lt;/li&gt;&#xA;&lt;li&gt;Automatically converts an invoked method to a method request.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Â &lt;strong&gt;Servant&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Defines the behavior and state of the active object.&lt;/li&gt;&#xA;&lt;li&gt;Provides implementation of the active object.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Activation/Dispatch Queue&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Maintains a buffer of pending requests created by Proxy.&lt;/li&gt;&#xA;&lt;li&gt;Keeps track of which requests can execute.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Scheduler&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Decides which request should be executed next.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Result Handle&lt;/strong&gt; or &lt;strong&gt;Callback&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Allows Proxy to get the result post execution.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../Design_Patterns_Concurrency_Patterns/1_image.png&#34;&gt;&#xA;&lt;strong&gt;Active Object Structure&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Structural Patterns</title>
      <link>https://blogs.hexterisk.com/posts/2021/09/10/structural-patterns/</link>
      <pubDate>Fri, 10 Sep 2021 00:00:00 +0000</pubDate><author>hexterisk@gmail.com (Bhanupratap Singh)</author>
      <guid>https://blogs.hexterisk.com/posts/2021/09/10/structural-patterns/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Structural Design Patterns&lt;/strong&gt; help in composing small structures into larger structures, while ensuring that these larger structures remain flexible and efficient. These larger structures remain simplified through the realization of the relationship between it&amp;rsquo;s smaller component structures, that is, how each component inherits from each other.&lt;/p&gt;&#xA;&lt;h4 id=&#34;structural-class-patterns&#34;&gt;Structural Class Patterns&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Composes interfaces and implementations through (multiple) inheritance.&lt;/li&gt;&#xA;&lt;li&gt;Useful to make independently developed classes work together.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;structural-object-patterns&#34;&gt;Structural Object Patterns&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Realizes new functionality through composition of different objects.&lt;/li&gt;&#xA;&lt;li&gt;Ability of objects to change composition at run-time is integral for composition of different types of objects.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;adapter&#34;&gt;Adapter&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn&amp;rsquo;t otherwise because of incompatible interfaces.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Behavioral Patterns</title>
      <link>https://blogs.hexterisk.com/posts/2021/08/16/behavioral-patterns/</link>
      <pubDate>Mon, 16 Aug 2021 00:00:00 +0000</pubDate><author>hexterisk@gmail.com (Bhanupratap Singh)</author>
      <guid>https://blogs.hexterisk.com/posts/2021/08/16/behavioral-patterns/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Behavioral Design Patterns&lt;/strong&gt; are concerned with optimizing the complex flow of control and communication between objects during run-time. Their main goal is to assign responsibilities between objects in a manner that ensures loose coupling.&lt;/p&gt;&#xA;&lt;h4 id=&#34;behavioral-class-patterns&#34;&gt;Behavioral Class Patterns&lt;/h4&gt;&#xA;&lt;p&gt;Inheritance is employed to distribute behavior between classes.&lt;/p&gt;&#xA;&lt;h4 id=&#34;behavioral-object-patterns&#34;&gt;Behavioral Object Patterns&lt;/h4&gt;&#xA;&lt;p&gt;Composition is employed to characterize how a group of objects work with each other to perform a task that cannot be accomplished by a single object.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Creational Patterns</title>
      <link>https://blogs.hexterisk.com/posts/2021/07/02/creational-patterns/</link>
      <pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate><author>hexterisk@gmail.com (Bhanupratap Singh)</author>
      <guid>https://blogs.hexterisk.com/posts/2021/07/02/creational-patterns/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Creational Design Patterns&lt;/strong&gt; reduce the complexity in creation of different objects of shared type/properties.&lt;/p&gt;&#xA;&lt;p&gt;These patterns simplify object creation mechanisms by separating the workings of an object&amp;rsquo;s creation, composition and representation. This in turn results in increased flexibility. Instead of hardcoding data into classes for creating objects every time, we can employ these patterns for the instantiation of an object dependent on the situation. This ensures that the set of related objects share a common ancestor for common properties.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reuse</title>
      <link>https://blogs.hexterisk.com/posts/2021/05/21/reuse/</link>
      <pubDate>Fri, 21 May 2021 00:00:00 +0000</pubDate><author>hexterisk@gmail.com (Bhanupratap Singh)</author>
      <guid>https://blogs.hexterisk.com/posts/2021/05/21/reuse/</guid>
      <description>&lt;p&gt;While designing a class, always keep the &lt;strong&gt;Open-Closed Principle&lt;/strong&gt; in mind. It states that,&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;This implies that an entity shall allow extensions to itself, but no modification to its source code. We are therefore allowed to extend our base class, and consequently implement re-usability.&lt;/p&gt;&#xA;&lt;h2 id=&#34;class-inheritance&#34;&gt;Class Inheritance&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Inheritance&lt;/strong&gt; models an &lt;code&gt;Is-A&lt;/code&gt; relationship, where the child class inherits properties from the parent class, making the child class a specialized version of the parent class.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Overview</title>
      <link>https://blogs.hexterisk.com/posts/2021/04/28/overview/</link>
      <pubDate>Wed, 28 Apr 2021 00:00:00 +0000</pubDate><author>hexterisk@gmail.com (Bhanupratap Singh)</author>
      <guid>https://blogs.hexterisk.com/posts/2021/04/28/overview/</guid>
      <description>&lt;p&gt;An general overview of the Design Patterns.&lt;/p&gt;&#xA;&lt;h2 id=&#34;classification&#34;&gt;Classification&lt;/h2&gt;&#xA;&lt;h3 id=&#34;purpose&#34;&gt;Purpose&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;Purpose&lt;/strong&gt; reflects the use case of a design pattern.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Creational Pattern&lt;/strong&gt; concerns the process of object creation.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Structural Pattern&lt;/strong&gt; deals with the composition of classes or objects.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Behavioral Pattern&lt;/strong&gt; characterizes the ways in which classes or objects interact and distribute responsibility.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../Design_Patterns_Overview/image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Catalog of design patterns based on Purpose.&lt;/p&gt;&#xA;&lt;h3 id=&#34;scope&#34;&gt;Scope&lt;/h3&gt;&#xA;&lt;p&gt;The scope of a design patterns specifies where it is primarily applied.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction</title>
      <link>https://blogs.hexterisk.com/posts/2021/04/10/introduction/</link>
      <pubDate>Sat, 10 Apr 2021 00:00:00 +0000</pubDate><author>hexterisk@gmail.com (Bhanupratap Singh)</author>
      <guid>https://blogs.hexterisk.com/posts/2021/04/10/introduction/</guid>
      <description>&lt;p&gt;A design pattern is a code structure used to solve commonly occurring problems in software development. It is a generic description of different components&amp;rsquo; design, their relationships, and how they come together to solve the said problem in the specified context. It is characterized by:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Pattern Name&#xA;&lt;ul&gt;&#xA;&lt;li&gt;To associate a certain solution to a name for ease of reference, through appropriate association.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Problem&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The design problem and issues to be addressed in a specified context, to which the solution described by the design pattern is applicable.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Solution&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The code structure to resolve the problem, consisting of comprehensive definition of the components and the relationships among them.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Consequences&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The results of the design pattern on application to a problem. Addresses space-time trade-off and implementation issues, including the impact on the system&amp;rsquo;s extensibility and portability.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;The MVC model from Smalltalk-80 is the most basic and appropriate example to describe a design pattern.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
