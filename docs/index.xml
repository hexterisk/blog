<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pwn the world.</title>
    <link>https://hexterisk.tech/blog/</link>
    <description>Recent content on Pwn the world.</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 12 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hexterisk.tech/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dynamic Taint Analysis and Pin</title>
      <link>https://hexterisk.tech/blog/posts/2020/06/12/dynamic-taint-analysis-and-pin/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hexterisk.tech/blog/posts/2020/06/12/dynamic-taint-analysis-and-pin/</guid>
      <description>Dynamic Taint Analysis is a technique used to discover what part of memory or register are controllable by the some data we are interested, such as the user input, at a given program state. This is done by marking the interested data. There on after, any piece of data that comes in contact with the tainted data by any means, like getting computed from the tainted data, is tainted too, thus spreading the taint throughout the execution.</description>
    </item>
    
    <item>
      <title>Dynamic Binary Instrumentation and Pin</title>
      <link>https://hexterisk.tech/blog/posts/2020/06/03/dynamic-binary-instrumentation-and-pin/</link>
      <pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hexterisk.tech/blog/posts/2020/06/03/dynamic-binary-instrumentation-and-pin/</guid>
      <description>Dynamic Binary Instrumentation is the process of monitoring or measuring a binary&amp;rsquo;s execution and its behavior, such as resource usage, during runtime. It allows us to focus on specific parts of a binary for various purposes such as vulnerability analysis, dynamic tainting and state analysis.
We will skip over Source Instrumentation since it requires source code of the application, which is pretty rare in real world scenarios.
Instrumentation Code The technique requires injecting Instrumentation Code into a running binary.</description>
    </item>
    
    <item>
      <title>Source Code Instrumentation and LLVM</title>
      <link>https://hexterisk.tech/blog/posts/2020/05/26/source-code-instrumentation-and-llvm/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hexterisk.tech/blog/posts/2020/05/26/source-code-instrumentation-and-llvm/</guid>
      <description>Source Code Instrumentation adds specific code meant for instrumentation/analysis, called Instrumentation Code, to the source files of the program under consideration. The source files are then compiled and executed. Since the instrumentation code is integrated into the binary itself, the output from the execution includes the dump of the instrumentation code which can then be used for further analysis and component testing.
Intermediate Representations Representation of a program in a state that lies between the source code and the compiled binary(specifically, the assembly code).</description>
    </item>
    
    <item>
      <title>Symbolic Execution and Angr</title>
      <link>https://hexterisk.tech/blog/posts/2020/05/21/symbolic-execution-and-angr/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hexterisk.tech/blog/posts/2020/05/21/symbolic-execution-and-angr/</guid>
      <description>Symbolic Execution is mainly focused on converting a program made up of a concrete set of instructions into an equation-like format. This is achieved with two core components:
Symbols Different values in a program(such as the user input) are substituted with Symbols(variables or placeholders). These symbols pertain to a domain full of values, allowing us to explore the program in a much more open form, basically ‚Äúwalking through the program‚Äù with a domain full of values(handled by any one of the constraint solving backends like Z3) instead of walking a fixed path due to a fixed hard-coded value/input.</description>
    </item>
    
    <item>
      <title>Constraint Solvers and Z3</title>
      <link>https://hexterisk.tech/blog/posts/2020/05/15/constraint-solvers-and-z3/</link>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hexterisk.tech/blog/posts/2020/05/15/constraint-solvers-and-z3/</guid>
      <description>A constraint solver must be versatile, that is, it should be able to act as an:
 Interpreter: Given the input, solve for the output of the equation. Inverter: Given the output, solve for the input of the equation. Synthesizer: Act as both Interpreter and Inverter.  Formulating Programs Assume a formula ùëÜ‚Çö(ùë•, ùë¶) which holds if and only if program P(x) outputs value y such that
Program: f(ùë•) { return ùë• + ùë• }</description>
    </item>
    
    <item>
      <title>Serial 2</title>
      <link>https://hexterisk.tech/blog/posts/2020/05/09/serial-2/</link>
      <pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hexterisk.tech/blog/posts/2020/05/09/serial-2/</guid>
      <description>Name: serial: 2 Date release: 27 Sep 2019 Author: sk4 Series: serial  Initial Discovery VMIP is the VM‚Äôs IP Address
LHIP is the Local Host‚Äôs IP Address
Compare the commands I ran, and the formats specified to check where you need to replace values according to your machine.
IP Discovery Run sudo netdiscover.
It detects online hosts by sending ARP requests.
Output of netdiscover.
192.168.1.10 happens to be the IP of the VM.</description>
    </item>
    
    <item>
      <title>Serial 1</title>
      <link>https://hexterisk.tech/blog/posts/2020/05/08/serial-1/</link>
      <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hexterisk.tech/blog/posts/2020/05/08/serial-1/</guid>
      <description>Name: serial: 1 Date release: 20 Aug 2019 Author: sk4 Series: serial  Initial Discovery VMIP is the VM‚Äôs IP Address
LHIP is the Local Host‚Äôs IP Address
Compare the commands I ran, and the formats specified to check where you need to replace values according to your machine.
IP Discovery Run sudo netdiscover.
It detects online hosts by sending ARP requests.
Output of netdiscover.
192.168.1.8 happens to be the IP of the VM.</description>
    </item>
    
    <item>
      <title>Taint Analysis</title>
      <link>https://hexterisk.tech/blog/posts/2020/05/03/taint-analysis/</link>
      <pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hexterisk.tech/blog/posts/2020/05/03/taint-analysis/</guid>
      <description>Taint Analysis is a program analysis technique that allows you to determine the influence that a selected program state has on other parts of the program state. Taint any data that a program receives from the network, track that data, and raise an alert if it affects the program counter. If an operation uses the value of some tainted object, say X, to derive a value for another, say Y, then object Y becomes tainted.</description>
    </item>
    
    <item>
      <title>Binary Obfuscation</title>
      <link>https://hexterisk.tech/blog/posts/2020/04/28/binary-obfuscation/</link>
      <pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hexterisk.tech/blog/posts/2020/04/28/binary-obfuscation/</guid>
      <description>The main aim of Binary Obfuscation is to hinder the process of static analysis of a binary.¬†Renaming the symbols(variables and functions) of a binary implies that the clues as to what data a variable holds or what task a function performs that could be obtained from their names, are lost. This makes it a little harder for the analysts to keep a track of all the symbols without documenting them.</description>
    </item>
    
    <item>
      <title>Binary Instrumentation</title>
      <link>https://hexterisk.tech/blog/posts/2020/04/25/binary-instrumentation/</link>
      <pubDate>Sat, 25 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hexterisk.tech/blog/posts/2020/04/25/binary-instrumentation/</guid>
      <description>Inserting new code at any point in an existing binary to observe or modify the binary‚Äôs behavior in some way is called instrumenting the binary. The point where you add new code is called the instrumentation point, and the added code is called instrumentation code.
Tradeoffs of Dynamic and Static Binary Instrumentation.
Static Binary Instrumentation Static Binary Instrumentation works by disassembling a binary and then adding instrumentation code where needed and storing the updated binary permanently on disk.</description>
    </item>
    
  </channel>
</rss>