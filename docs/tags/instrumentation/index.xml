<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>instrumentation on Pwn the world.</title>
    <link>https://hexterisk.tech/blog/tags/instrumentation/</link>
    <description>Recent content in instrumentation on Pwn the world.</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 07 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://hexterisk.tech/blog/tags/instrumentation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Binary Instrumentation</title>
      <link>https://hexterisk.tech/blog/posts/2020/01/07/binary-instrumentation/</link>
      <pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hexterisk.tech/blog/posts/2020/01/07/binary-instrumentation/</guid>
      <description>Inserting new code at any point in an existing binary to observe or modify the binaryâ€™s behavior in some way is called instrumenting the binary. The point where you add new code is called the instrumentation point, and the added code is called instrumentation code.
Tradeoffs of Dynamic and Static Binary Instrumentation.
Static Binary Instrumentation Static Binary Instrumentation works by disassembling a binary and then adding instrumentation code where needed and storing the updated binary permanently on disk.</description>
    </item>
    
  </channel>
</rss>